// Code generated by ent, DO NOT EDIT.

package exam_applications_pmpa

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldID, id))
}

// ApplicationNumber applies equality check predicate on the "ApplicationNumber" field. It's identical to ApplicationNumberEQ.
func ApplicationNumber(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldApplicationNumber, v))
}

// ApplnSubmittedDate applies equality check predicate on the "ApplnSubmittedDate" field. It's identical to ApplnSubmittedDateEQ.
func ApplnSubmittedDate(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldApplnSubmittedDate, v))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldExamCode, v))
}

// ExamShortName applies equality check predicate on the "ExamShortName" field. It's identical to ExamShortNameEQ.
func ExamShortName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldExamShortName, v))
}

// ExamName applies equality check predicate on the "ExamName" field. It's identical to ExamNameEQ.
func ExamName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldExamName, v))
}

// SmsExamShortName applies equality check predicate on the "SmsExamShortName" field. It's identical to SmsExamShortNameEQ.
func SmsExamShortName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldSmsExamShortName, v))
}

// ExamYear applies equality check predicate on the "ExamYear" field. It's identical to ExamYearEQ.
func ExamYear(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldExamYear, v))
}

// UserID applies equality check predicate on the "UserID" field. It's identical to UserIDEQ.
func UserID(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldUserID, v))
}

// EmployeeID applies equality check predicate on the "EmployeeID" field. It's identical to EmployeeIDEQ.
func EmployeeID(v int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeName applies equality check predicate on the "EmployeeName" field. It's identical to EmployeeNameEQ.
func EmployeeName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEmployeeName, v))
}

// DOB applies equality check predicate on the "DOB" field. It's identical to DOBEQ.
func DOB(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDOB, v))
}

// Gender applies equality check predicate on the "Gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldGender, v))
}

// MobileNumber applies equality check predicate on the "MobileNumber" field. It's identical to MobileNumberEQ.
func MobileNumber(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldMobileNumber, v))
}

// EmailID applies equality check predicate on the "EmailID" field. It's identical to EmailIDEQ.
func EmailID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEmailID, v))
}

// CategoryCode applies equality check predicate on the "CategoryCode" field. It's identical to CategoryCodeEQ.
func CategoryCode(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCategoryCode, v))
}

// CategoryDescription applies equality check predicate on the "CategoryDescription" field. It's identical to CategoryDescriptionEQ.
func CategoryDescription(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCategoryDescription, v))
}

// DisabilityTypeID applies equality check predicate on the "DisabilityTypeID" field. It's identical to DisabilityTypeIDEQ.
func DisabilityTypeID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDisabilityTypeID, v))
}

// DisabilityTypeCode applies equality check predicate on the "DisabilityTypeCode" field. It's identical to DisabilityTypeCodeEQ.
func DisabilityTypeCode(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDisabilityTypeCode, v))
}

// DisabilityTypeDescription applies equality check predicate on the "DisabilityTypeDescription" field. It's identical to DisabilityTypeDescriptionEQ.
func DisabilityTypeDescription(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDisabilityTypeDescription, v))
}

// DisabilityPercentage applies equality check predicate on the "DisabilityPercentage" field. It's identical to DisabilityPercentageEQ.
func DisabilityPercentage(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDisabilityPercentage, v))
}

// DCCS applies equality check predicate on the "DCCS" field. It's identical to DCCSEQ.
func DCCS(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDCCS, v))
}

// EntryPostCode applies equality check predicate on the "EntryPostCode" field. It's identical to EntryPostCodeEQ.
func EntryPostCode(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEntryPostCode, v))
}

// EntryPostDescription applies equality check predicate on the "EntryPostDescription" field. It's identical to EntryPostDescriptionEQ.
func EntryPostDescription(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEntryPostDescription, v))
}

// PresentPostCode applies equality check predicate on the "PresentPostCode" field. It's identical to PresentPostCodeEQ.
func PresentPostCode(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldPresentPostCode, v))
}

// PresentPostDescription applies equality check predicate on the "PresentPostDescription" field. It's identical to PresentPostDescriptionEQ.
func PresentPostDescription(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldPresentPostDescription, v))
}

// FeederPostCode applies equality check predicate on the "FeederPostCode" field. It's identical to FeederPostCodeEQ.
func FeederPostCode(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldFeederPostCode, v))
}

// FeederPostDescription applies equality check predicate on the "FeederPostDescription" field. It's identical to FeederPostDescriptionEQ.
func FeederPostDescription(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldFeederPostDescription, v))
}

// FeederPostJoiningDate applies equality check predicate on the "FeederPostJoiningDate" field. It's identical to FeederPostJoiningDateEQ.
func FeederPostJoiningDate(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldFeederPostJoiningDate, v))
}

// DesignationID applies equality check predicate on the "DesignationID" field. It's identical to DesignationIDEQ.
func DesignationID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDesignationID, v))
}

// PresentDesignation applies equality check predicate on the "PresentDesignation" field. It's identical to PresentDesignationEQ.
func PresentDesignation(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldPresentDesignation, v))
}

// EducationCode applies equality check predicate on the "EducationCode" field. It's identical to EducationCodeEQ.
func EducationCode(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEducationCode, v))
}

// EducationDescription applies equality check predicate on the "EducationDescription" field. It's identical to EducationDescriptionEQ.
func EducationDescription(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEducationDescription, v))
}

// FacilityUniqueID applies equality check predicate on the "FacilityUniqueID" field. It's identical to FacilityUniqueIDEQ.
func FacilityUniqueID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldFacilityUniqueID, v))
}

// WorkingOfficePincode applies equality check predicate on the "WorkingOfficePincode" field. It's identical to WorkingOfficePincodeEQ.
func WorkingOfficePincode(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficePincode, v))
}

// WorkingOfficeFacilityID applies equality check predicate on the "WorkingOfficeFacilityID" field. It's identical to WorkingOfficeFacilityIDEQ.
func WorkingOfficeFacilityID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeFacilityID, v))
}

// WorkingOfficeName applies equality check predicate on the "WorkingOfficeName" field. It's identical to WorkingOfficeNameEQ.
func WorkingOfficeName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeName, v))
}

// WorkingOfficeCircleFacilityID applies equality check predicate on the "WorkingOfficeCircleFacilityID" field. It's identical to WorkingOfficeCircleFacilityIDEQ.
func WorkingOfficeCircleFacilityID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeCircleFacilityID, v))
}

// WorkingOfficeCircleName applies equality check predicate on the "WorkingOfficeCircleName" field. It's identical to WorkingOfficeCircleNameEQ.
func WorkingOfficeCircleName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeCircleName, v))
}

// WorkingOfficeRegionFacilityID applies equality check predicate on the "WorkingOfficeRegionFacilityID" field. It's identical to WorkingOfficeRegionFacilityIDEQ.
func WorkingOfficeRegionFacilityID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeRegionFacilityID, v))
}

// WorkingOfficeRegionName applies equality check predicate on the "WorkingOfficeRegionName" field. It's identical to WorkingOfficeRegionNameEQ.
func WorkingOfficeRegionName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeRegionName, v))
}

// WorkingOfficeDivisionFacilityID applies equality check predicate on the "WorkingOfficeDivisionFacilityID" field. It's identical to WorkingOfficeDivisionFacilityIDEQ.
func WorkingOfficeDivisionFacilityID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeDivisionFacilityID, v))
}

// WorkingOfficeDivisionName applies equality check predicate on the "WorkingOfficeDivisionName" field. It's identical to WorkingOfficeDivisionNameEQ.
func WorkingOfficeDivisionName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeDivisionName, v))
}

// ReportingOfficeFacilityID applies equality check predicate on the "ReportingOfficeFacilityID" field. It's identical to ReportingOfficeFacilityIDEQ.
func ReportingOfficeFacilityID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldReportingOfficeFacilityID, v))
}

// ReportingOfficeName applies equality check predicate on the "ReportingOfficeName" field. It's identical to ReportingOfficeNameEQ.
func ReportingOfficeName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldReportingOfficeName, v))
}

// LienControllingOfficeID applies equality check predicate on the "LienControllingOfficeID" field. It's identical to LienControllingOfficeIDEQ.
func LienControllingOfficeID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldLienControllingOfficeID, v))
}

// LienControllingOfficeName applies equality check predicate on the "LienControllingOfficeName" field. It's identical to LienControllingOfficeNameEQ.
func LienControllingOfficeName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldLienControllingOfficeName, v))
}

// InDeputation applies equality check predicate on the "InDeputation" field. It's identical to InDeputationEQ.
func InDeputation(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldInDeputation, v))
}

// DeputationType applies equality check predicate on the "DeputationType" field. It's identical to DeputationTypeEQ.
func DeputationType(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationType, v))
}

// DeputationOfficeUniqueId applies equality check predicate on the "DeputationOfficeUniqueId" field. It's identical to DeputationOfficeUniqueIdEQ.
func DeputationOfficeUniqueId(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationOfficeUniqueId, v))
}

// DeputationOfficeFacilityID applies equality check predicate on the "DeputationOfficeFacilityID" field. It's identical to DeputationOfficeFacilityIDEQ.
func DeputationOfficeFacilityID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationOfficeFacilityID, v))
}

// DeputationOfficeName applies equality check predicate on the "DeputationOfficeName" field. It's identical to DeputationOfficeNameEQ.
func DeputationOfficeName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationOfficeName, v))
}

// DeputationControllingOfficeID applies equality check predicate on the "DeputationControllingOfficeID" field. It's identical to DeputationControllingOfficeIDEQ.
func DeputationControllingOfficeID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationControllingOfficeID, v))
}

// DeputationControllingOfficeName applies equality check predicate on the "DeputationControllingOfficeName" field. It's identical to DeputationControllingOfficeNameEQ.
func DeputationControllingOfficeName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationControllingOfficeName, v))
}

// ControllingOfficeFacilityID applies equality check predicate on the "ControllingOfficeFacilityID" field. It's identical to ControllingOfficeFacilityIDEQ.
func ControllingOfficeFacilityID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldControllingOfficeFacilityID, v))
}

// ControllingOfficeName applies equality check predicate on the "ControllingOfficeName" field. It's identical to ControllingOfficeNameEQ.
func ControllingOfficeName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldControllingOfficeName, v))
}

// NodalOfficeFacilityID applies equality check predicate on the "NodalOfficeFacilityID" field. It's identical to NodalOfficeFacilityIDEQ.
func NodalOfficeFacilityID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeName applies equality check predicate on the "NodalOfficeName" field. It's identical to NodalOfficeNameEQ.
func NodalOfficeName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNodalOfficeName, v))
}

// ExamCityCenterCode applies equality check predicate on the "ExamCityCenterCode" field. It's identical to ExamCityCenterCodeEQ.
func ExamCityCenterCode(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldExamCityCenterCode, v))
}

// CenterFacilityId applies equality check predicate on the "CenterFacilityId" field. It's identical to CenterFacilityIdEQ.
func CenterFacilityId(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCenterFacilityId, v))
}

// CentrePreference applies equality check predicate on the "CentrePreference" field. It's identical to CentrePreferenceEQ.
func CentrePreference(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCentrePreference, v))
}

// Signature applies equality check predicate on the "Signature" field. It's identical to SignatureEQ.
func Signature(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldSignature, v))
}

// Photo applies equality check predicate on the "Photo" field. It's identical to PhotoEQ.
func Photo(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldPhoto, v))
}

// CandidatePhoto applies equality check predicate on the "CandidatePhoto" field. It's identical to CandidatePhotoEQ.
func CandidatePhoto(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCandidatePhoto, v))
}

// CandidateSignature applies equality check predicate on the "CandidateSignature" field. It's identical to CandidateSignatureEQ.
func CandidateSignature(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCandidateSignature, v))
}

// SignaturePath applies equality check predicate on the "SignaturePath" field. It's identical to SignaturePathEQ.
func SignaturePath(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldSignaturePath, v))
}

// PhotoPath applies equality check predicate on the "PhotoPath" field. It's identical to PhotoPathEQ.
func PhotoPath(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldPhotoPath, v))
}

// TempHallTicket applies equality check predicate on the "TempHallTicket" field. It's identical to TempHallTicketEQ.
func TempHallTicket(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldTempHallTicket, v))
}

// CandidateRemarks applies equality check predicate on the "CandidateRemarks" field. It's identical to CandidateRemarksEQ.
func CandidateRemarks(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCandidateRemarks, v))
}

// VAGeneralRemarks applies equality check predicate on the "VAGeneralRemarks" field. It's identical to VAGeneralRemarksEQ.
func VAGeneralRemarks(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVAGeneralRemarks, v))
}

// CAGeneralRemarks applies equality check predicate on the "CAGeneralRemarks" field. It's identical to CAGeneralRemarksEQ.
func CAGeneralRemarks(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCAGeneralRemarks, v))
}

// NAGeneralRemarks applies equality check predicate on the "NAGeneralRemarks" field. It's identical to NAGeneralRemarksEQ.
func NAGeneralRemarks(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNAGeneralRemarks, v))
}

// ApplicationStatus applies equality check predicate on the "ApplicationStatus" field. It's identical to ApplicationStatusEQ.
func ApplicationStatus(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldApplicationStatus, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldStatus, v))
}

// VAUserId applies equality check predicate on the "VA_UserId" field. It's identical to VAUserIdEQ.
func VAUserId(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVAUserId, v))
}

// VAUserName applies equality check predicate on the "VA_UserName" field. It's identical to VAUserNameEQ.
func VAUserName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVAUserName, v))
}

// VAEmployeeID applies equality check predicate on the "VA_EmployeeID" field. It's identical to VAEmployeeIDEQ.
func VAEmployeeID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVAEmployeeID, v))
}

// VAEmployeeDesignation applies equality check predicate on the "VA_EmployeeDesignation" field. It's identical to VAEmployeeDesignationEQ.
func VAEmployeeDesignation(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVAEmployeeDesignation, v))
}

// VARemarks applies equality check predicate on the "VA_Remarks" field. It's identical to VARemarksEQ.
func VARemarks(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVARemarks, v))
}

// VADate applies equality check predicate on the "VA_Date" field. It's identical to VADateEQ.
func VADate(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVADate, v))
}

// CAUserId applies equality check predicate on the "CA_UserId" field. It's identical to CAUserIdEQ.
func CAUserId(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCAUserId, v))
}

// CAUserName applies equality check predicate on the "CA_UserName" field. It's identical to CAUserNameEQ.
func CAUserName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCAUserName, v))
}

// CAEmployeeID applies equality check predicate on the "CA_EmployeeID" field. It's identical to CAEmployeeIDEQ.
func CAEmployeeID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCAEmployeeID, v))
}

// CAEmployeeDesignation applies equality check predicate on the "CA_EmployeeDesignation" field. It's identical to CAEmployeeDesignationEQ.
func CAEmployeeDesignation(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCAEmployeeDesignation, v))
}

// CARemarks applies equality check predicate on the "CA_Remarks" field. It's identical to CARemarksEQ.
func CARemarks(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCARemarks, v))
}

// CADate applies equality check predicate on the "CA_Date" field. It's identical to CADateEQ.
func CADate(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCADate, v))
}

// NAUserId applies equality check predicate on the "NA_UserId" field. It's identical to NAUserIdEQ.
func NAUserId(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNAUserId, v))
}

// NAUserName applies equality check predicate on the "NA_UserName" field. It's identical to NAUserNameEQ.
func NAUserName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNAUserName, v))
}

// NAEmployeeID applies equality check predicate on the "NA_EmployeeID" field. It's identical to NAEmployeeIDEQ.
func NAEmployeeID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNAEmployeeID, v))
}

// NAEmployeeDesignation applies equality check predicate on the "NA_EmployeeDesignation" field. It's identical to NAEmployeeDesignationEQ.
func NAEmployeeDesignation(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNAEmployeeDesignation, v))
}

// NARemarks applies equality check predicate on the "NA_Remarks" field. It's identical to NARemarksEQ.
func NARemarks(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNARemarks, v))
}

// NADate applies equality check predicate on the "NA_Date" field. It's identical to NADateEQ.
func NADate(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNADate, v))
}

// AppliactionRemarks applies equality check predicate on the "AppliactionRemarks" field. It's identical to AppliactionRemarksEQ.
func AppliactionRemarks(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldAppliactionRemarks, v))
}

// CAPreviousRemarks applies equality check predicate on the "CAPreviousRemarks" field. It's identical to CAPreviousRemarksEQ.
func CAPreviousRemarks(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCAPreviousRemarks, v))
}

// PunishmentStatus applies equality check predicate on the "PunishmentStatus" field. It's identical to PunishmentStatusEQ.
func PunishmentStatus(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldPunishmentStatus, v))
}

// DisciplinaryCaseStatus applies equality check predicate on the "DisciplinaryCaseStatus" field. It's identical to DisciplinaryCaseStatusEQ.
func DisciplinaryCaseStatus(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDisciplinaryCaseStatus, v))
}

// GenerateHallTicketFlag applies equality check predicate on the "GenerateHallTicketFlag" field. It's identical to GenerateHallTicketFlagEQ.
func GenerateHallTicketFlag(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldGenerateHallTicketFlag, v))
}

// HallTicketNumber applies equality check predicate on the "HallTicketNumber" field. It's identical to HallTicketNumberEQ.
func HallTicketNumber(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldHallTicketNumber, v))
}

// HallTicketGeneratedFlag applies equality check predicate on the "HallTicketGeneratedFlag" field. It's identical to HallTicketGeneratedFlagEQ.
func HallTicketGeneratedFlag(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldHallTicketGeneratedFlag, v))
}

// GenerateHallTicketFlagByNO applies equality check predicate on the "GenerateHallTicketFlagByNO" field. It's identical to GenerateHallTicketFlagByNOEQ.
func GenerateHallTicketFlagByNO(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldGenerateHallTicketFlagByNO, v))
}

// HallTicketGeneratedDate applies equality check predicate on the "HallTicketGeneratedDate" field. It's identical to HallTicketGeneratedDateEQ.
func HallTicketGeneratedDate(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldHallTicketGeneratedDate, v))
}

// TemporaryHallTicket applies equality check predicate on the "TemporaryHallTicket" field. It's identical to TemporaryHallTicketEQ.
func TemporaryHallTicket(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldTemporaryHallTicket, v))
}

// OptionUsed applies equality check predicate on the "OptionUsed" field. It's identical to OptionUsedEQ.
func OptionUsed(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldOptionUsed, v))
}

// Remarks applies equality check predicate on the "Remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldRemarks, v))
}

// Cadre applies equality check predicate on the "Cadre" field. It's identical to CadreEQ.
func Cadre(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCadre, v))
}

// EmployeePost applies equality check predicate on the "EmployeePost" field. It's identical to EmployeePostEQ.
func EmployeePost(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEmployeePost, v))
}

// DOJInEligiblePost applies equality check predicate on the "DOJInEligiblePost" field. It's identical to DOJInEligiblePostEQ.
func DOJInEligiblePost(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDOJInEligiblePost, v))
}

// RoleUserCode applies equality check predicate on the "RoleUserCode" field. It's identical to RoleUserCodeEQ.
func RoleUserCode(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldRoleUserCode, v))
}

// IpAddress applies equality check predicate on the "IpAddress" field. It's identical to IpAddressEQ.
func IpAddress(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldIpAddress, v))
}

// LatitudeLongitude applies equality check predicate on the "LatitudeLongitude" field. It's identical to LatitudeLongitudeEQ.
func LatitudeLongitude(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldLatitudeLongitude, v))
}

// CircleSID applies equality check predicate on the "CircleSID" field. It's identical to CircleSIDEQ.
func CircleSID(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCircleSID, v))
}

// FacilityName applies equality check predicate on the "FacilityName" field. It's identical to FacilityNameEQ.
func FacilityName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldFacilityName, v))
}

// DCInPresentCadre applies equality check predicate on the "DCInPresentCadre" field. It's identical to DCInPresentCadreEQ.
func DCInPresentCadre(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDCInPresentCadre, v))
}

// ReportingOfficeID applies equality check predicate on the "ReportingOfficeID" field. It's identical to ReportingOfficeIDEQ.
func ReportingOfficeID(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldReportingOfficeID, v))
}

// CircleID applies equality check predicate on the "CircleID" field. It's identical to CircleIDEQ.
func CircleID(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCircleID, v))
}

// RegionID applies equality check predicate on the "RegionID" field. It's identical to RegionIDEQ.
func RegionID(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldRegionID, v))
}

// DivisionID applies equality check predicate on the "DivisionID" field. It's identical to DivisionIDEQ.
func DivisionID(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDivisionID, v))
}

// CenterId applies equality check predicate on the "CenterId" field. It's identical to CenterIdEQ.
func CenterId(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCenterId, v))
}

// CenterCode applies equality check predicate on the "CenterCode" field. It's identical to CenterCodeEQ.
func CenterCode(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCenterCode, v))
}

// ClaimingQualifyingService applies equality check predicate on the "ClaimingQualifyingService" field. It's identical to ClaimingQualifyingServiceEQ.
func ClaimingQualifyingService(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldClaimingQualifyingService, v))
}

// DeputationOfficePincode applies equality check predicate on the "DeputationOfficePincode" field. It's identical to DeputationOfficePincodeEQ.
func DeputationOfficePincode(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationOfficePincode, v))
}

// RecommendedStatus applies equality check predicate on the "RecommendedStatus" field. It's identical to RecommendedStatusEQ.
func RecommendedStatus(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldRecommendedStatus, v))
}

// ApplicationWdlDate applies equality check predicate on the "ApplicationWdlDate" field. It's identical to ApplicationWdlDateEQ.
func ApplicationWdlDate(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldApplicationWdlDate, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "UpdatedBy" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldUpdatedBy, v))
}

// ExamCenterHall applies equality check predicate on the "ExamCenterHall" field. It's identical to ExamCenterHallEQ.
func ExamCenterHall(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldExamCenterHall, v))
}

// HallName applies equality check predicate on the "HallName" field. It's identical to HallNameEQ.
func HallName(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldHallName, v))
}

// ApplicationNumberEQ applies the EQ predicate on the "ApplicationNumber" field.
func ApplicationNumberEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldApplicationNumber, v))
}

// ApplicationNumberNEQ applies the NEQ predicate on the "ApplicationNumber" field.
func ApplicationNumberNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldApplicationNumber, v))
}

// ApplicationNumberIn applies the In predicate on the "ApplicationNumber" field.
func ApplicationNumberIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldApplicationNumber, vs...))
}

// ApplicationNumberNotIn applies the NotIn predicate on the "ApplicationNumber" field.
func ApplicationNumberNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldApplicationNumber, vs...))
}

// ApplicationNumberGT applies the GT predicate on the "ApplicationNumber" field.
func ApplicationNumberGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldApplicationNumber, v))
}

// ApplicationNumberGTE applies the GTE predicate on the "ApplicationNumber" field.
func ApplicationNumberGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldApplicationNumber, v))
}

// ApplicationNumberLT applies the LT predicate on the "ApplicationNumber" field.
func ApplicationNumberLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldApplicationNumber, v))
}

// ApplicationNumberLTE applies the LTE predicate on the "ApplicationNumber" field.
func ApplicationNumberLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldApplicationNumber, v))
}

// ApplicationNumberContains applies the Contains predicate on the "ApplicationNumber" field.
func ApplicationNumberContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldApplicationNumber, v))
}

// ApplicationNumberHasPrefix applies the HasPrefix predicate on the "ApplicationNumber" field.
func ApplicationNumberHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldApplicationNumber, v))
}

// ApplicationNumberHasSuffix applies the HasSuffix predicate on the "ApplicationNumber" field.
func ApplicationNumberHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldApplicationNumber, v))
}

// ApplicationNumberIsNil applies the IsNil predicate on the "ApplicationNumber" field.
func ApplicationNumberIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldApplicationNumber))
}

// ApplicationNumberNotNil applies the NotNil predicate on the "ApplicationNumber" field.
func ApplicationNumberNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldApplicationNumber))
}

// ApplicationNumberEqualFold applies the EqualFold predicate on the "ApplicationNumber" field.
func ApplicationNumberEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldApplicationNumber, v))
}

// ApplicationNumberContainsFold applies the ContainsFold predicate on the "ApplicationNumber" field.
func ApplicationNumberContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldApplicationNumber, v))
}

// ApplnSubmittedDateEQ applies the EQ predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldApplnSubmittedDate, v))
}

// ApplnSubmittedDateNEQ applies the NEQ predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateNEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldApplnSubmittedDate, v))
}

// ApplnSubmittedDateIn applies the In predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldApplnSubmittedDate, vs...))
}

// ApplnSubmittedDateNotIn applies the NotIn predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateNotIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldApplnSubmittedDate, vs...))
}

// ApplnSubmittedDateGT applies the GT predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateGT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldApplnSubmittedDate, v))
}

// ApplnSubmittedDateGTE applies the GTE predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateGTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldApplnSubmittedDate, v))
}

// ApplnSubmittedDateLT applies the LT predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateLT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldApplnSubmittedDate, v))
}

// ApplnSubmittedDateLTE applies the LTE predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateLTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldApplnSubmittedDate, v))
}

// ApplnSubmittedDateIsNil applies the IsNil predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldApplnSubmittedDate))
}

// ApplnSubmittedDateNotNil applies the NotNil predicate on the "ApplnSubmittedDate" field.
func ApplnSubmittedDateNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldApplnSubmittedDate))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldExamCode))
}

// ExamShortNameEQ applies the EQ predicate on the "ExamShortName" field.
func ExamShortNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldExamShortName, v))
}

// ExamShortNameNEQ applies the NEQ predicate on the "ExamShortName" field.
func ExamShortNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldExamShortName, v))
}

// ExamShortNameIn applies the In predicate on the "ExamShortName" field.
func ExamShortNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldExamShortName, vs...))
}

// ExamShortNameNotIn applies the NotIn predicate on the "ExamShortName" field.
func ExamShortNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldExamShortName, vs...))
}

// ExamShortNameGT applies the GT predicate on the "ExamShortName" field.
func ExamShortNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldExamShortName, v))
}

// ExamShortNameGTE applies the GTE predicate on the "ExamShortName" field.
func ExamShortNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldExamShortName, v))
}

// ExamShortNameLT applies the LT predicate on the "ExamShortName" field.
func ExamShortNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldExamShortName, v))
}

// ExamShortNameLTE applies the LTE predicate on the "ExamShortName" field.
func ExamShortNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldExamShortName, v))
}

// ExamShortNameContains applies the Contains predicate on the "ExamShortName" field.
func ExamShortNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldExamShortName, v))
}

// ExamShortNameHasPrefix applies the HasPrefix predicate on the "ExamShortName" field.
func ExamShortNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldExamShortName, v))
}

// ExamShortNameHasSuffix applies the HasSuffix predicate on the "ExamShortName" field.
func ExamShortNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldExamShortName, v))
}

// ExamShortNameIsNil applies the IsNil predicate on the "ExamShortName" field.
func ExamShortNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldExamShortName))
}

// ExamShortNameNotNil applies the NotNil predicate on the "ExamShortName" field.
func ExamShortNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldExamShortName))
}

// ExamShortNameEqualFold applies the EqualFold predicate on the "ExamShortName" field.
func ExamShortNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldExamShortName, v))
}

// ExamShortNameContainsFold applies the ContainsFold predicate on the "ExamShortName" field.
func ExamShortNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldExamShortName, v))
}

// ExamNameEQ applies the EQ predicate on the "ExamName" field.
func ExamNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldExamName, v))
}

// ExamNameNEQ applies the NEQ predicate on the "ExamName" field.
func ExamNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldExamName, v))
}

// ExamNameIn applies the In predicate on the "ExamName" field.
func ExamNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldExamName, vs...))
}

// ExamNameNotIn applies the NotIn predicate on the "ExamName" field.
func ExamNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldExamName, vs...))
}

// ExamNameGT applies the GT predicate on the "ExamName" field.
func ExamNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldExamName, v))
}

// ExamNameGTE applies the GTE predicate on the "ExamName" field.
func ExamNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldExamName, v))
}

// ExamNameLT applies the LT predicate on the "ExamName" field.
func ExamNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldExamName, v))
}

// ExamNameLTE applies the LTE predicate on the "ExamName" field.
func ExamNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldExamName, v))
}

// ExamNameContains applies the Contains predicate on the "ExamName" field.
func ExamNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldExamName, v))
}

// ExamNameHasPrefix applies the HasPrefix predicate on the "ExamName" field.
func ExamNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldExamName, v))
}

// ExamNameHasSuffix applies the HasSuffix predicate on the "ExamName" field.
func ExamNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldExamName, v))
}

// ExamNameIsNil applies the IsNil predicate on the "ExamName" field.
func ExamNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldExamName))
}

// ExamNameNotNil applies the NotNil predicate on the "ExamName" field.
func ExamNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldExamName))
}

// ExamNameEqualFold applies the EqualFold predicate on the "ExamName" field.
func ExamNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldExamName, v))
}

// ExamNameContainsFold applies the ContainsFold predicate on the "ExamName" field.
func ExamNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldExamName, v))
}

// SmsExamShortNameEQ applies the EQ predicate on the "SmsExamShortName" field.
func SmsExamShortNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldSmsExamShortName, v))
}

// SmsExamShortNameNEQ applies the NEQ predicate on the "SmsExamShortName" field.
func SmsExamShortNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldSmsExamShortName, v))
}

// SmsExamShortNameIn applies the In predicate on the "SmsExamShortName" field.
func SmsExamShortNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldSmsExamShortName, vs...))
}

// SmsExamShortNameNotIn applies the NotIn predicate on the "SmsExamShortName" field.
func SmsExamShortNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldSmsExamShortName, vs...))
}

// SmsExamShortNameGT applies the GT predicate on the "SmsExamShortName" field.
func SmsExamShortNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldSmsExamShortName, v))
}

// SmsExamShortNameGTE applies the GTE predicate on the "SmsExamShortName" field.
func SmsExamShortNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldSmsExamShortName, v))
}

// SmsExamShortNameLT applies the LT predicate on the "SmsExamShortName" field.
func SmsExamShortNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldSmsExamShortName, v))
}

// SmsExamShortNameLTE applies the LTE predicate on the "SmsExamShortName" field.
func SmsExamShortNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldSmsExamShortName, v))
}

// SmsExamShortNameContains applies the Contains predicate on the "SmsExamShortName" field.
func SmsExamShortNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldSmsExamShortName, v))
}

// SmsExamShortNameHasPrefix applies the HasPrefix predicate on the "SmsExamShortName" field.
func SmsExamShortNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldSmsExamShortName, v))
}

// SmsExamShortNameHasSuffix applies the HasSuffix predicate on the "SmsExamShortName" field.
func SmsExamShortNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldSmsExamShortName, v))
}

// SmsExamShortNameIsNil applies the IsNil predicate on the "SmsExamShortName" field.
func SmsExamShortNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldSmsExamShortName))
}

// SmsExamShortNameNotNil applies the NotNil predicate on the "SmsExamShortName" field.
func SmsExamShortNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldSmsExamShortName))
}

// SmsExamShortNameEqualFold applies the EqualFold predicate on the "SmsExamShortName" field.
func SmsExamShortNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldSmsExamShortName, v))
}

// SmsExamShortNameContainsFold applies the ContainsFold predicate on the "SmsExamShortName" field.
func SmsExamShortNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldSmsExamShortName, v))
}

// ExamYearEQ applies the EQ predicate on the "ExamYear" field.
func ExamYearEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldExamYear, v))
}

// ExamYearNEQ applies the NEQ predicate on the "ExamYear" field.
func ExamYearNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldExamYear, v))
}

// ExamYearIn applies the In predicate on the "ExamYear" field.
func ExamYearIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldExamYear, vs...))
}

// ExamYearNotIn applies the NotIn predicate on the "ExamYear" field.
func ExamYearNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldExamYear, vs...))
}

// ExamYearGT applies the GT predicate on the "ExamYear" field.
func ExamYearGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldExamYear, v))
}

// ExamYearGTE applies the GTE predicate on the "ExamYear" field.
func ExamYearGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldExamYear, v))
}

// ExamYearLT applies the LT predicate on the "ExamYear" field.
func ExamYearLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldExamYear, v))
}

// ExamYearLTE applies the LTE predicate on the "ExamYear" field.
func ExamYearLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldExamYear, v))
}

// ExamYearContains applies the Contains predicate on the "ExamYear" field.
func ExamYearContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldExamYear, v))
}

// ExamYearHasPrefix applies the HasPrefix predicate on the "ExamYear" field.
func ExamYearHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldExamYear, v))
}

// ExamYearHasSuffix applies the HasSuffix predicate on the "ExamYear" field.
func ExamYearHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldExamYear, v))
}

// ExamYearIsNil applies the IsNil predicate on the "ExamYear" field.
func ExamYearIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldExamYear))
}

// ExamYearNotNil applies the NotNil predicate on the "ExamYear" field.
func ExamYearNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldExamYear))
}

// ExamYearEqualFold applies the EqualFold predicate on the "ExamYear" field.
func ExamYearEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldExamYear, v))
}

// ExamYearContainsFold applies the ContainsFold predicate on the "ExamYear" field.
func ExamYearContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldExamYear, v))
}

// UserIDEQ applies the EQ predicate on the "UserID" field.
func UserIDEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "UserID" field.
func UserIDNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "UserID" field.
func UserIDIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "UserID" field.
func UserIDNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "UserID" field.
func UserIDGT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "UserID" field.
func UserIDGTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "UserID" field.
func UserIDLT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "UserID" field.
func UserIDLTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "UserID" field.
func UserIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "UserID" field.
func UserIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldUserID))
}

// EmployeeIDEQ applies the EQ predicate on the "EmployeeID" field.
func EmployeeIDEQ(v int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "EmployeeID" field.
func EmployeeIDNEQ(v int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "EmployeeID" field.
func EmployeeIDIn(vs ...int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "EmployeeID" field.
func EmployeeIDNotIn(vs ...int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// EmployeeIDGT applies the GT predicate on the "EmployeeID" field.
func EmployeeIDGT(v int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldEmployeeID, v))
}

// EmployeeIDGTE applies the GTE predicate on the "EmployeeID" field.
func EmployeeIDGTE(v int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldEmployeeID, v))
}

// EmployeeIDLT applies the LT predicate on the "EmployeeID" field.
func EmployeeIDLT(v int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldEmployeeID, v))
}

// EmployeeIDLTE applies the LTE predicate on the "EmployeeID" field.
func EmployeeIDLTE(v int64) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldEmployeeID, v))
}

// EmployeeIDIsNil applies the IsNil predicate on the "EmployeeID" field.
func EmployeeIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldEmployeeID))
}

// EmployeeIDNotNil applies the NotNil predicate on the "EmployeeID" field.
func EmployeeIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldEmployeeID))
}

// EmployeeNameEQ applies the EQ predicate on the "EmployeeName" field.
func EmployeeNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEmployeeName, v))
}

// EmployeeNameNEQ applies the NEQ predicate on the "EmployeeName" field.
func EmployeeNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldEmployeeName, v))
}

// EmployeeNameIn applies the In predicate on the "EmployeeName" field.
func EmployeeNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldEmployeeName, vs...))
}

// EmployeeNameNotIn applies the NotIn predicate on the "EmployeeName" field.
func EmployeeNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldEmployeeName, vs...))
}

// EmployeeNameGT applies the GT predicate on the "EmployeeName" field.
func EmployeeNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldEmployeeName, v))
}

// EmployeeNameGTE applies the GTE predicate on the "EmployeeName" field.
func EmployeeNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldEmployeeName, v))
}

// EmployeeNameLT applies the LT predicate on the "EmployeeName" field.
func EmployeeNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldEmployeeName, v))
}

// EmployeeNameLTE applies the LTE predicate on the "EmployeeName" field.
func EmployeeNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldEmployeeName, v))
}

// EmployeeNameContains applies the Contains predicate on the "EmployeeName" field.
func EmployeeNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldEmployeeName, v))
}

// EmployeeNameHasPrefix applies the HasPrefix predicate on the "EmployeeName" field.
func EmployeeNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldEmployeeName, v))
}

// EmployeeNameHasSuffix applies the HasSuffix predicate on the "EmployeeName" field.
func EmployeeNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldEmployeeName, v))
}

// EmployeeNameIsNil applies the IsNil predicate on the "EmployeeName" field.
func EmployeeNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldEmployeeName))
}

// EmployeeNameNotNil applies the NotNil predicate on the "EmployeeName" field.
func EmployeeNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldEmployeeName))
}

// EmployeeNameEqualFold applies the EqualFold predicate on the "EmployeeName" field.
func EmployeeNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldEmployeeName, v))
}

// EmployeeNameContainsFold applies the ContainsFold predicate on the "EmployeeName" field.
func EmployeeNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldEmployeeName, v))
}

// DOBEQ applies the EQ predicate on the "DOB" field.
func DOBEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDOB, v))
}

// DOBNEQ applies the NEQ predicate on the "DOB" field.
func DOBNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDOB, v))
}

// DOBIn applies the In predicate on the "DOB" field.
func DOBIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDOB, vs...))
}

// DOBNotIn applies the NotIn predicate on the "DOB" field.
func DOBNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDOB, vs...))
}

// DOBGT applies the GT predicate on the "DOB" field.
func DOBGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDOB, v))
}

// DOBGTE applies the GTE predicate on the "DOB" field.
func DOBGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDOB, v))
}

// DOBLT applies the LT predicate on the "DOB" field.
func DOBLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDOB, v))
}

// DOBLTE applies the LTE predicate on the "DOB" field.
func DOBLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDOB, v))
}

// DOBContains applies the Contains predicate on the "DOB" field.
func DOBContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDOB, v))
}

// DOBHasPrefix applies the HasPrefix predicate on the "DOB" field.
func DOBHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDOB, v))
}

// DOBHasSuffix applies the HasSuffix predicate on the "DOB" field.
func DOBHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDOB, v))
}

// DOBIsNil applies the IsNil predicate on the "DOB" field.
func DOBIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDOB))
}

// DOBNotNil applies the NotNil predicate on the "DOB" field.
func DOBNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDOB))
}

// DOBEqualFold applies the EqualFold predicate on the "DOB" field.
func DOBEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDOB, v))
}

// DOBContainsFold applies the ContainsFold predicate on the "DOB" field.
func DOBContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDOB, v))
}

// GenderEQ applies the EQ predicate on the "Gender" field.
func GenderEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "Gender" field.
func GenderNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "Gender" field.
func GenderIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "Gender" field.
func GenderNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "Gender" field.
func GenderGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "Gender" field.
func GenderGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "Gender" field.
func GenderLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "Gender" field.
func GenderLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldGender, v))
}

// GenderContains applies the Contains predicate on the "Gender" field.
func GenderContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldGender, v))
}

// GenderHasPrefix applies the HasPrefix predicate on the "Gender" field.
func GenderHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldGender, v))
}

// GenderHasSuffix applies the HasSuffix predicate on the "Gender" field.
func GenderHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldGender, v))
}

// GenderIsNil applies the IsNil predicate on the "Gender" field.
func GenderIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "Gender" field.
func GenderNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldGender))
}

// GenderEqualFold applies the EqualFold predicate on the "Gender" field.
func GenderEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldGender, v))
}

// GenderContainsFold applies the ContainsFold predicate on the "Gender" field.
func GenderContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldGender, v))
}

// MobileNumberEQ applies the EQ predicate on the "MobileNumber" field.
func MobileNumberEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldMobileNumber, v))
}

// MobileNumberNEQ applies the NEQ predicate on the "MobileNumber" field.
func MobileNumberNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldMobileNumber, v))
}

// MobileNumberIn applies the In predicate on the "MobileNumber" field.
func MobileNumberIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldMobileNumber, vs...))
}

// MobileNumberNotIn applies the NotIn predicate on the "MobileNumber" field.
func MobileNumberNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldMobileNumber, vs...))
}

// MobileNumberGT applies the GT predicate on the "MobileNumber" field.
func MobileNumberGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldMobileNumber, v))
}

// MobileNumberGTE applies the GTE predicate on the "MobileNumber" field.
func MobileNumberGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldMobileNumber, v))
}

// MobileNumberLT applies the LT predicate on the "MobileNumber" field.
func MobileNumberLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldMobileNumber, v))
}

// MobileNumberLTE applies the LTE predicate on the "MobileNumber" field.
func MobileNumberLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldMobileNumber, v))
}

// MobileNumberContains applies the Contains predicate on the "MobileNumber" field.
func MobileNumberContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldMobileNumber, v))
}

// MobileNumberHasPrefix applies the HasPrefix predicate on the "MobileNumber" field.
func MobileNumberHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldMobileNumber, v))
}

// MobileNumberHasSuffix applies the HasSuffix predicate on the "MobileNumber" field.
func MobileNumberHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldMobileNumber, v))
}

// MobileNumberIsNil applies the IsNil predicate on the "MobileNumber" field.
func MobileNumberIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldMobileNumber))
}

// MobileNumberNotNil applies the NotNil predicate on the "MobileNumber" field.
func MobileNumberNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldMobileNumber))
}

// MobileNumberEqualFold applies the EqualFold predicate on the "MobileNumber" field.
func MobileNumberEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldMobileNumber, v))
}

// MobileNumberContainsFold applies the ContainsFold predicate on the "MobileNumber" field.
func MobileNumberContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldMobileNumber, v))
}

// EmailIDEQ applies the EQ predicate on the "EmailID" field.
func EmailIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEmailID, v))
}

// EmailIDNEQ applies the NEQ predicate on the "EmailID" field.
func EmailIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldEmailID, v))
}

// EmailIDIn applies the In predicate on the "EmailID" field.
func EmailIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldEmailID, vs...))
}

// EmailIDNotIn applies the NotIn predicate on the "EmailID" field.
func EmailIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldEmailID, vs...))
}

// EmailIDGT applies the GT predicate on the "EmailID" field.
func EmailIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldEmailID, v))
}

// EmailIDGTE applies the GTE predicate on the "EmailID" field.
func EmailIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldEmailID, v))
}

// EmailIDLT applies the LT predicate on the "EmailID" field.
func EmailIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldEmailID, v))
}

// EmailIDLTE applies the LTE predicate on the "EmailID" field.
func EmailIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldEmailID, v))
}

// EmailIDContains applies the Contains predicate on the "EmailID" field.
func EmailIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldEmailID, v))
}

// EmailIDHasPrefix applies the HasPrefix predicate on the "EmailID" field.
func EmailIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldEmailID, v))
}

// EmailIDHasSuffix applies the HasSuffix predicate on the "EmailID" field.
func EmailIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldEmailID, v))
}

// EmailIDIsNil applies the IsNil predicate on the "EmailID" field.
func EmailIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldEmailID))
}

// EmailIDNotNil applies the NotNil predicate on the "EmailID" field.
func EmailIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldEmailID))
}

// EmailIDEqualFold applies the EqualFold predicate on the "EmailID" field.
func EmailIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldEmailID, v))
}

// EmailIDContainsFold applies the ContainsFold predicate on the "EmailID" field.
func EmailIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldEmailID, v))
}

// CategoryCodeEQ applies the EQ predicate on the "CategoryCode" field.
func CategoryCodeEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCategoryCode, v))
}

// CategoryCodeNEQ applies the NEQ predicate on the "CategoryCode" field.
func CategoryCodeNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCategoryCode, v))
}

// CategoryCodeIn applies the In predicate on the "CategoryCode" field.
func CategoryCodeIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCategoryCode, vs...))
}

// CategoryCodeNotIn applies the NotIn predicate on the "CategoryCode" field.
func CategoryCodeNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCategoryCode, vs...))
}

// CategoryCodeGT applies the GT predicate on the "CategoryCode" field.
func CategoryCodeGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCategoryCode, v))
}

// CategoryCodeGTE applies the GTE predicate on the "CategoryCode" field.
func CategoryCodeGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCategoryCode, v))
}

// CategoryCodeLT applies the LT predicate on the "CategoryCode" field.
func CategoryCodeLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCategoryCode, v))
}

// CategoryCodeLTE applies the LTE predicate on the "CategoryCode" field.
func CategoryCodeLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCategoryCode, v))
}

// CategoryCodeContains applies the Contains predicate on the "CategoryCode" field.
func CategoryCodeContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldCategoryCode, v))
}

// CategoryCodeHasPrefix applies the HasPrefix predicate on the "CategoryCode" field.
func CategoryCodeHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldCategoryCode, v))
}

// CategoryCodeHasSuffix applies the HasSuffix predicate on the "CategoryCode" field.
func CategoryCodeHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldCategoryCode, v))
}

// CategoryCodeIsNil applies the IsNil predicate on the "CategoryCode" field.
func CategoryCodeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCategoryCode))
}

// CategoryCodeNotNil applies the NotNil predicate on the "CategoryCode" field.
func CategoryCodeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCategoryCode))
}

// CategoryCodeEqualFold applies the EqualFold predicate on the "CategoryCode" field.
func CategoryCodeEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldCategoryCode, v))
}

// CategoryCodeContainsFold applies the ContainsFold predicate on the "CategoryCode" field.
func CategoryCodeContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldCategoryCode, v))
}

// CategoryDescriptionEQ applies the EQ predicate on the "CategoryDescription" field.
func CategoryDescriptionEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCategoryDescription, v))
}

// CategoryDescriptionNEQ applies the NEQ predicate on the "CategoryDescription" field.
func CategoryDescriptionNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCategoryDescription, v))
}

// CategoryDescriptionIn applies the In predicate on the "CategoryDescription" field.
func CategoryDescriptionIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCategoryDescription, vs...))
}

// CategoryDescriptionNotIn applies the NotIn predicate on the "CategoryDescription" field.
func CategoryDescriptionNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCategoryDescription, vs...))
}

// CategoryDescriptionGT applies the GT predicate on the "CategoryDescription" field.
func CategoryDescriptionGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCategoryDescription, v))
}

// CategoryDescriptionGTE applies the GTE predicate on the "CategoryDescription" field.
func CategoryDescriptionGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCategoryDescription, v))
}

// CategoryDescriptionLT applies the LT predicate on the "CategoryDescription" field.
func CategoryDescriptionLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCategoryDescription, v))
}

// CategoryDescriptionLTE applies the LTE predicate on the "CategoryDescription" field.
func CategoryDescriptionLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCategoryDescription, v))
}

// CategoryDescriptionContains applies the Contains predicate on the "CategoryDescription" field.
func CategoryDescriptionContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldCategoryDescription, v))
}

// CategoryDescriptionHasPrefix applies the HasPrefix predicate on the "CategoryDescription" field.
func CategoryDescriptionHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldCategoryDescription, v))
}

// CategoryDescriptionHasSuffix applies the HasSuffix predicate on the "CategoryDescription" field.
func CategoryDescriptionHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldCategoryDescription, v))
}

// CategoryDescriptionIsNil applies the IsNil predicate on the "CategoryDescription" field.
func CategoryDescriptionIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCategoryDescription))
}

// CategoryDescriptionNotNil applies the NotNil predicate on the "CategoryDescription" field.
func CategoryDescriptionNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCategoryDescription))
}

// CategoryDescriptionEqualFold applies the EqualFold predicate on the "CategoryDescription" field.
func CategoryDescriptionEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldCategoryDescription, v))
}

// CategoryDescriptionContainsFold applies the ContainsFold predicate on the "CategoryDescription" field.
func CategoryDescriptionContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldCategoryDescription, v))
}

// DisabilityTypeIDEQ applies the EQ predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDNEQ applies the NEQ predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDIn applies the In predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDisabilityTypeID, vs...))
}

// DisabilityTypeIDNotIn applies the NotIn predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDisabilityTypeID, vs...))
}

// DisabilityTypeIDGT applies the GT predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDGTE applies the GTE predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDLT applies the LT predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDLTE applies the LTE predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDContains applies the Contains predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDHasPrefix applies the HasPrefix predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDHasSuffix applies the HasSuffix predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDIsNil applies the IsNil predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDisabilityTypeID))
}

// DisabilityTypeIDNotNil applies the NotNil predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDisabilityTypeID))
}

// DisabilityTypeIDEqualFold applies the EqualFold predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDContainsFold applies the ContainsFold predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDisabilityTypeID, v))
}

// DisabilityTypeCodeEQ applies the EQ predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDisabilityTypeCode, v))
}

// DisabilityTypeCodeNEQ applies the NEQ predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDisabilityTypeCode, v))
}

// DisabilityTypeCodeIn applies the In predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDisabilityTypeCode, vs...))
}

// DisabilityTypeCodeNotIn applies the NotIn predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDisabilityTypeCode, vs...))
}

// DisabilityTypeCodeGT applies the GT predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDisabilityTypeCode, v))
}

// DisabilityTypeCodeGTE applies the GTE predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDisabilityTypeCode, v))
}

// DisabilityTypeCodeLT applies the LT predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDisabilityTypeCode, v))
}

// DisabilityTypeCodeLTE applies the LTE predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDisabilityTypeCode, v))
}

// DisabilityTypeCodeContains applies the Contains predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDisabilityTypeCode, v))
}

// DisabilityTypeCodeHasPrefix applies the HasPrefix predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDisabilityTypeCode, v))
}

// DisabilityTypeCodeHasSuffix applies the HasSuffix predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDisabilityTypeCode, v))
}

// DisabilityTypeCodeIsNil applies the IsNil predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDisabilityTypeCode))
}

// DisabilityTypeCodeNotNil applies the NotNil predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDisabilityTypeCode))
}

// DisabilityTypeCodeEqualFold applies the EqualFold predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDisabilityTypeCode, v))
}

// DisabilityTypeCodeContainsFold applies the ContainsFold predicate on the "DisabilityTypeCode" field.
func DisabilityTypeCodeContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDisabilityTypeCode, v))
}

// DisabilityTypeDescriptionEQ applies the EQ predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDisabilityTypeDescription, v))
}

// DisabilityTypeDescriptionNEQ applies the NEQ predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDisabilityTypeDescription, v))
}

// DisabilityTypeDescriptionIn applies the In predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDisabilityTypeDescription, vs...))
}

// DisabilityTypeDescriptionNotIn applies the NotIn predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDisabilityTypeDescription, vs...))
}

// DisabilityTypeDescriptionGT applies the GT predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDisabilityTypeDescription, v))
}

// DisabilityTypeDescriptionGTE applies the GTE predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDisabilityTypeDescription, v))
}

// DisabilityTypeDescriptionLT applies the LT predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDisabilityTypeDescription, v))
}

// DisabilityTypeDescriptionLTE applies the LTE predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDisabilityTypeDescription, v))
}

// DisabilityTypeDescriptionContains applies the Contains predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDisabilityTypeDescription, v))
}

// DisabilityTypeDescriptionHasPrefix applies the HasPrefix predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDisabilityTypeDescription, v))
}

// DisabilityTypeDescriptionHasSuffix applies the HasSuffix predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDisabilityTypeDescription, v))
}

// DisabilityTypeDescriptionIsNil applies the IsNil predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDisabilityTypeDescription))
}

// DisabilityTypeDescriptionNotNil applies the NotNil predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDisabilityTypeDescription))
}

// DisabilityTypeDescriptionEqualFold applies the EqualFold predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDisabilityTypeDescription, v))
}

// DisabilityTypeDescriptionContainsFold applies the ContainsFold predicate on the "DisabilityTypeDescription" field.
func DisabilityTypeDescriptionContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDisabilityTypeDescription, v))
}

// DisabilityPercentageEQ applies the EQ predicate on the "DisabilityPercentage" field.
func DisabilityPercentageEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDisabilityPercentage, v))
}

// DisabilityPercentageNEQ applies the NEQ predicate on the "DisabilityPercentage" field.
func DisabilityPercentageNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDisabilityPercentage, v))
}

// DisabilityPercentageIn applies the In predicate on the "DisabilityPercentage" field.
func DisabilityPercentageIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDisabilityPercentage, vs...))
}

// DisabilityPercentageNotIn applies the NotIn predicate on the "DisabilityPercentage" field.
func DisabilityPercentageNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDisabilityPercentage, vs...))
}

// DisabilityPercentageGT applies the GT predicate on the "DisabilityPercentage" field.
func DisabilityPercentageGT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDisabilityPercentage, v))
}

// DisabilityPercentageGTE applies the GTE predicate on the "DisabilityPercentage" field.
func DisabilityPercentageGTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDisabilityPercentage, v))
}

// DisabilityPercentageLT applies the LT predicate on the "DisabilityPercentage" field.
func DisabilityPercentageLT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDisabilityPercentage, v))
}

// DisabilityPercentageLTE applies the LTE predicate on the "DisabilityPercentage" field.
func DisabilityPercentageLTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDisabilityPercentage, v))
}

// DisabilityPercentageIsNil applies the IsNil predicate on the "DisabilityPercentage" field.
func DisabilityPercentageIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDisabilityPercentage))
}

// DisabilityPercentageNotNil applies the NotNil predicate on the "DisabilityPercentage" field.
func DisabilityPercentageNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDisabilityPercentage))
}

// DCCSEQ applies the EQ predicate on the "DCCS" field.
func DCCSEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDCCS, v))
}

// DCCSNEQ applies the NEQ predicate on the "DCCS" field.
func DCCSNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDCCS, v))
}

// DCCSIn applies the In predicate on the "DCCS" field.
func DCCSIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDCCS, vs...))
}

// DCCSNotIn applies the NotIn predicate on the "DCCS" field.
func DCCSNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDCCS, vs...))
}

// DCCSGT applies the GT predicate on the "DCCS" field.
func DCCSGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDCCS, v))
}

// DCCSGTE applies the GTE predicate on the "DCCS" field.
func DCCSGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDCCS, v))
}

// DCCSLT applies the LT predicate on the "DCCS" field.
func DCCSLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDCCS, v))
}

// DCCSLTE applies the LTE predicate on the "DCCS" field.
func DCCSLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDCCS, v))
}

// DCCSContains applies the Contains predicate on the "DCCS" field.
func DCCSContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDCCS, v))
}

// DCCSHasPrefix applies the HasPrefix predicate on the "DCCS" field.
func DCCSHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDCCS, v))
}

// DCCSHasSuffix applies the HasSuffix predicate on the "DCCS" field.
func DCCSHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDCCS, v))
}

// DCCSIsNil applies the IsNil predicate on the "DCCS" field.
func DCCSIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDCCS))
}

// DCCSNotNil applies the NotNil predicate on the "DCCS" field.
func DCCSNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDCCS))
}

// DCCSEqualFold applies the EqualFold predicate on the "DCCS" field.
func DCCSEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDCCS, v))
}

// DCCSContainsFold applies the ContainsFold predicate on the "DCCS" field.
func DCCSContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDCCS, v))
}

// EntryPostCodeEQ applies the EQ predicate on the "EntryPostCode" field.
func EntryPostCodeEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEntryPostCode, v))
}

// EntryPostCodeNEQ applies the NEQ predicate on the "EntryPostCode" field.
func EntryPostCodeNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldEntryPostCode, v))
}

// EntryPostCodeIn applies the In predicate on the "EntryPostCode" field.
func EntryPostCodeIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldEntryPostCode, vs...))
}

// EntryPostCodeNotIn applies the NotIn predicate on the "EntryPostCode" field.
func EntryPostCodeNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldEntryPostCode, vs...))
}

// EntryPostCodeGT applies the GT predicate on the "EntryPostCode" field.
func EntryPostCodeGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldEntryPostCode, v))
}

// EntryPostCodeGTE applies the GTE predicate on the "EntryPostCode" field.
func EntryPostCodeGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldEntryPostCode, v))
}

// EntryPostCodeLT applies the LT predicate on the "EntryPostCode" field.
func EntryPostCodeLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldEntryPostCode, v))
}

// EntryPostCodeLTE applies the LTE predicate on the "EntryPostCode" field.
func EntryPostCodeLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldEntryPostCode, v))
}

// EntryPostCodeContains applies the Contains predicate on the "EntryPostCode" field.
func EntryPostCodeContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldEntryPostCode, v))
}

// EntryPostCodeHasPrefix applies the HasPrefix predicate on the "EntryPostCode" field.
func EntryPostCodeHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldEntryPostCode, v))
}

// EntryPostCodeHasSuffix applies the HasSuffix predicate on the "EntryPostCode" field.
func EntryPostCodeHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldEntryPostCode, v))
}

// EntryPostCodeIsNil applies the IsNil predicate on the "EntryPostCode" field.
func EntryPostCodeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldEntryPostCode))
}

// EntryPostCodeNotNil applies the NotNil predicate on the "EntryPostCode" field.
func EntryPostCodeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldEntryPostCode))
}

// EntryPostCodeEqualFold applies the EqualFold predicate on the "EntryPostCode" field.
func EntryPostCodeEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldEntryPostCode, v))
}

// EntryPostCodeContainsFold applies the ContainsFold predicate on the "EntryPostCode" field.
func EntryPostCodeContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldEntryPostCode, v))
}

// EntryPostDescriptionEQ applies the EQ predicate on the "EntryPostDescription" field.
func EntryPostDescriptionEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEntryPostDescription, v))
}

// EntryPostDescriptionNEQ applies the NEQ predicate on the "EntryPostDescription" field.
func EntryPostDescriptionNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldEntryPostDescription, v))
}

// EntryPostDescriptionIn applies the In predicate on the "EntryPostDescription" field.
func EntryPostDescriptionIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldEntryPostDescription, vs...))
}

// EntryPostDescriptionNotIn applies the NotIn predicate on the "EntryPostDescription" field.
func EntryPostDescriptionNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldEntryPostDescription, vs...))
}

// EntryPostDescriptionGT applies the GT predicate on the "EntryPostDescription" field.
func EntryPostDescriptionGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldEntryPostDescription, v))
}

// EntryPostDescriptionGTE applies the GTE predicate on the "EntryPostDescription" field.
func EntryPostDescriptionGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldEntryPostDescription, v))
}

// EntryPostDescriptionLT applies the LT predicate on the "EntryPostDescription" field.
func EntryPostDescriptionLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldEntryPostDescription, v))
}

// EntryPostDescriptionLTE applies the LTE predicate on the "EntryPostDescription" field.
func EntryPostDescriptionLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldEntryPostDescription, v))
}

// EntryPostDescriptionContains applies the Contains predicate on the "EntryPostDescription" field.
func EntryPostDescriptionContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldEntryPostDescription, v))
}

// EntryPostDescriptionHasPrefix applies the HasPrefix predicate on the "EntryPostDescription" field.
func EntryPostDescriptionHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldEntryPostDescription, v))
}

// EntryPostDescriptionHasSuffix applies the HasSuffix predicate on the "EntryPostDescription" field.
func EntryPostDescriptionHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldEntryPostDescription, v))
}

// EntryPostDescriptionIsNil applies the IsNil predicate on the "EntryPostDescription" field.
func EntryPostDescriptionIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldEntryPostDescription))
}

// EntryPostDescriptionNotNil applies the NotNil predicate on the "EntryPostDescription" field.
func EntryPostDescriptionNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldEntryPostDescription))
}

// EntryPostDescriptionEqualFold applies the EqualFold predicate on the "EntryPostDescription" field.
func EntryPostDescriptionEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldEntryPostDescription, v))
}

// EntryPostDescriptionContainsFold applies the ContainsFold predicate on the "EntryPostDescription" field.
func EntryPostDescriptionContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldEntryPostDescription, v))
}

// PresentPostCodeEQ applies the EQ predicate on the "PresentPostCode" field.
func PresentPostCodeEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldPresentPostCode, v))
}

// PresentPostCodeNEQ applies the NEQ predicate on the "PresentPostCode" field.
func PresentPostCodeNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldPresentPostCode, v))
}

// PresentPostCodeIn applies the In predicate on the "PresentPostCode" field.
func PresentPostCodeIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldPresentPostCode, vs...))
}

// PresentPostCodeNotIn applies the NotIn predicate on the "PresentPostCode" field.
func PresentPostCodeNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldPresentPostCode, vs...))
}

// PresentPostCodeGT applies the GT predicate on the "PresentPostCode" field.
func PresentPostCodeGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldPresentPostCode, v))
}

// PresentPostCodeGTE applies the GTE predicate on the "PresentPostCode" field.
func PresentPostCodeGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldPresentPostCode, v))
}

// PresentPostCodeLT applies the LT predicate on the "PresentPostCode" field.
func PresentPostCodeLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldPresentPostCode, v))
}

// PresentPostCodeLTE applies the LTE predicate on the "PresentPostCode" field.
func PresentPostCodeLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldPresentPostCode, v))
}

// PresentPostCodeContains applies the Contains predicate on the "PresentPostCode" field.
func PresentPostCodeContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldPresentPostCode, v))
}

// PresentPostCodeHasPrefix applies the HasPrefix predicate on the "PresentPostCode" field.
func PresentPostCodeHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldPresentPostCode, v))
}

// PresentPostCodeHasSuffix applies the HasSuffix predicate on the "PresentPostCode" field.
func PresentPostCodeHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldPresentPostCode, v))
}

// PresentPostCodeIsNil applies the IsNil predicate on the "PresentPostCode" field.
func PresentPostCodeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldPresentPostCode))
}

// PresentPostCodeNotNil applies the NotNil predicate on the "PresentPostCode" field.
func PresentPostCodeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldPresentPostCode))
}

// PresentPostCodeEqualFold applies the EqualFold predicate on the "PresentPostCode" field.
func PresentPostCodeEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldPresentPostCode, v))
}

// PresentPostCodeContainsFold applies the ContainsFold predicate on the "PresentPostCode" field.
func PresentPostCodeContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldPresentPostCode, v))
}

// PresentPostDescriptionEQ applies the EQ predicate on the "PresentPostDescription" field.
func PresentPostDescriptionEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldPresentPostDescription, v))
}

// PresentPostDescriptionNEQ applies the NEQ predicate on the "PresentPostDescription" field.
func PresentPostDescriptionNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldPresentPostDescription, v))
}

// PresentPostDescriptionIn applies the In predicate on the "PresentPostDescription" field.
func PresentPostDescriptionIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldPresentPostDescription, vs...))
}

// PresentPostDescriptionNotIn applies the NotIn predicate on the "PresentPostDescription" field.
func PresentPostDescriptionNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldPresentPostDescription, vs...))
}

// PresentPostDescriptionGT applies the GT predicate on the "PresentPostDescription" field.
func PresentPostDescriptionGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldPresentPostDescription, v))
}

// PresentPostDescriptionGTE applies the GTE predicate on the "PresentPostDescription" field.
func PresentPostDescriptionGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldPresentPostDescription, v))
}

// PresentPostDescriptionLT applies the LT predicate on the "PresentPostDescription" field.
func PresentPostDescriptionLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldPresentPostDescription, v))
}

// PresentPostDescriptionLTE applies the LTE predicate on the "PresentPostDescription" field.
func PresentPostDescriptionLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldPresentPostDescription, v))
}

// PresentPostDescriptionContains applies the Contains predicate on the "PresentPostDescription" field.
func PresentPostDescriptionContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldPresentPostDescription, v))
}

// PresentPostDescriptionHasPrefix applies the HasPrefix predicate on the "PresentPostDescription" field.
func PresentPostDescriptionHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldPresentPostDescription, v))
}

// PresentPostDescriptionHasSuffix applies the HasSuffix predicate on the "PresentPostDescription" field.
func PresentPostDescriptionHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldPresentPostDescription, v))
}

// PresentPostDescriptionIsNil applies the IsNil predicate on the "PresentPostDescription" field.
func PresentPostDescriptionIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldPresentPostDescription))
}

// PresentPostDescriptionNotNil applies the NotNil predicate on the "PresentPostDescription" field.
func PresentPostDescriptionNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldPresentPostDescription))
}

// PresentPostDescriptionEqualFold applies the EqualFold predicate on the "PresentPostDescription" field.
func PresentPostDescriptionEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldPresentPostDescription, v))
}

// PresentPostDescriptionContainsFold applies the ContainsFold predicate on the "PresentPostDescription" field.
func PresentPostDescriptionContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldPresentPostDescription, v))
}

// FeederPostCodeEQ applies the EQ predicate on the "FeederPostCode" field.
func FeederPostCodeEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldFeederPostCode, v))
}

// FeederPostCodeNEQ applies the NEQ predicate on the "FeederPostCode" field.
func FeederPostCodeNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldFeederPostCode, v))
}

// FeederPostCodeIn applies the In predicate on the "FeederPostCode" field.
func FeederPostCodeIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldFeederPostCode, vs...))
}

// FeederPostCodeNotIn applies the NotIn predicate on the "FeederPostCode" field.
func FeederPostCodeNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldFeederPostCode, vs...))
}

// FeederPostCodeGT applies the GT predicate on the "FeederPostCode" field.
func FeederPostCodeGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldFeederPostCode, v))
}

// FeederPostCodeGTE applies the GTE predicate on the "FeederPostCode" field.
func FeederPostCodeGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldFeederPostCode, v))
}

// FeederPostCodeLT applies the LT predicate on the "FeederPostCode" field.
func FeederPostCodeLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldFeederPostCode, v))
}

// FeederPostCodeLTE applies the LTE predicate on the "FeederPostCode" field.
func FeederPostCodeLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldFeederPostCode, v))
}

// FeederPostCodeContains applies the Contains predicate on the "FeederPostCode" field.
func FeederPostCodeContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldFeederPostCode, v))
}

// FeederPostCodeHasPrefix applies the HasPrefix predicate on the "FeederPostCode" field.
func FeederPostCodeHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldFeederPostCode, v))
}

// FeederPostCodeHasSuffix applies the HasSuffix predicate on the "FeederPostCode" field.
func FeederPostCodeHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldFeederPostCode, v))
}

// FeederPostCodeIsNil applies the IsNil predicate on the "FeederPostCode" field.
func FeederPostCodeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldFeederPostCode))
}

// FeederPostCodeNotNil applies the NotNil predicate on the "FeederPostCode" field.
func FeederPostCodeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldFeederPostCode))
}

// FeederPostCodeEqualFold applies the EqualFold predicate on the "FeederPostCode" field.
func FeederPostCodeEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldFeederPostCode, v))
}

// FeederPostCodeContainsFold applies the ContainsFold predicate on the "FeederPostCode" field.
func FeederPostCodeContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldFeederPostCode, v))
}

// FeederPostDescriptionEQ applies the EQ predicate on the "FeederPostDescription" field.
func FeederPostDescriptionEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldFeederPostDescription, v))
}

// FeederPostDescriptionNEQ applies the NEQ predicate on the "FeederPostDescription" field.
func FeederPostDescriptionNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldFeederPostDescription, v))
}

// FeederPostDescriptionIn applies the In predicate on the "FeederPostDescription" field.
func FeederPostDescriptionIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldFeederPostDescription, vs...))
}

// FeederPostDescriptionNotIn applies the NotIn predicate on the "FeederPostDescription" field.
func FeederPostDescriptionNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldFeederPostDescription, vs...))
}

// FeederPostDescriptionGT applies the GT predicate on the "FeederPostDescription" field.
func FeederPostDescriptionGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldFeederPostDescription, v))
}

// FeederPostDescriptionGTE applies the GTE predicate on the "FeederPostDescription" field.
func FeederPostDescriptionGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldFeederPostDescription, v))
}

// FeederPostDescriptionLT applies the LT predicate on the "FeederPostDescription" field.
func FeederPostDescriptionLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldFeederPostDescription, v))
}

// FeederPostDescriptionLTE applies the LTE predicate on the "FeederPostDescription" field.
func FeederPostDescriptionLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldFeederPostDescription, v))
}

// FeederPostDescriptionContains applies the Contains predicate on the "FeederPostDescription" field.
func FeederPostDescriptionContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldFeederPostDescription, v))
}

// FeederPostDescriptionHasPrefix applies the HasPrefix predicate on the "FeederPostDescription" field.
func FeederPostDescriptionHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldFeederPostDescription, v))
}

// FeederPostDescriptionHasSuffix applies the HasSuffix predicate on the "FeederPostDescription" field.
func FeederPostDescriptionHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldFeederPostDescription, v))
}

// FeederPostDescriptionIsNil applies the IsNil predicate on the "FeederPostDescription" field.
func FeederPostDescriptionIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldFeederPostDescription))
}

// FeederPostDescriptionNotNil applies the NotNil predicate on the "FeederPostDescription" field.
func FeederPostDescriptionNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldFeederPostDescription))
}

// FeederPostDescriptionEqualFold applies the EqualFold predicate on the "FeederPostDescription" field.
func FeederPostDescriptionEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldFeederPostDescription, v))
}

// FeederPostDescriptionContainsFold applies the ContainsFold predicate on the "FeederPostDescription" field.
func FeederPostDescriptionContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldFeederPostDescription, v))
}

// FeederPostJoiningDateEQ applies the EQ predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldFeederPostJoiningDate, v))
}

// FeederPostJoiningDateNEQ applies the NEQ predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldFeederPostJoiningDate, v))
}

// FeederPostJoiningDateIn applies the In predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldFeederPostJoiningDate, vs...))
}

// FeederPostJoiningDateNotIn applies the NotIn predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldFeederPostJoiningDate, vs...))
}

// FeederPostJoiningDateGT applies the GT predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldFeederPostJoiningDate, v))
}

// FeederPostJoiningDateGTE applies the GTE predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldFeederPostJoiningDate, v))
}

// FeederPostJoiningDateLT applies the LT predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldFeederPostJoiningDate, v))
}

// FeederPostJoiningDateLTE applies the LTE predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldFeederPostJoiningDate, v))
}

// FeederPostJoiningDateContains applies the Contains predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldFeederPostJoiningDate, v))
}

// FeederPostJoiningDateHasPrefix applies the HasPrefix predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldFeederPostJoiningDate, v))
}

// FeederPostJoiningDateHasSuffix applies the HasSuffix predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldFeederPostJoiningDate, v))
}

// FeederPostJoiningDateIsNil applies the IsNil predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldFeederPostJoiningDate))
}

// FeederPostJoiningDateNotNil applies the NotNil predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldFeederPostJoiningDate))
}

// FeederPostJoiningDateEqualFold applies the EqualFold predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldFeederPostJoiningDate, v))
}

// FeederPostJoiningDateContainsFold applies the ContainsFold predicate on the "FeederPostJoiningDate" field.
func FeederPostJoiningDateContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldFeederPostJoiningDate, v))
}

// DesignationIDEQ applies the EQ predicate on the "DesignationID" field.
func DesignationIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDesignationID, v))
}

// DesignationIDNEQ applies the NEQ predicate on the "DesignationID" field.
func DesignationIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDesignationID, v))
}

// DesignationIDIn applies the In predicate on the "DesignationID" field.
func DesignationIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDesignationID, vs...))
}

// DesignationIDNotIn applies the NotIn predicate on the "DesignationID" field.
func DesignationIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDesignationID, vs...))
}

// DesignationIDGT applies the GT predicate on the "DesignationID" field.
func DesignationIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDesignationID, v))
}

// DesignationIDGTE applies the GTE predicate on the "DesignationID" field.
func DesignationIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDesignationID, v))
}

// DesignationIDLT applies the LT predicate on the "DesignationID" field.
func DesignationIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDesignationID, v))
}

// DesignationIDLTE applies the LTE predicate on the "DesignationID" field.
func DesignationIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDesignationID, v))
}

// DesignationIDContains applies the Contains predicate on the "DesignationID" field.
func DesignationIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDesignationID, v))
}

// DesignationIDHasPrefix applies the HasPrefix predicate on the "DesignationID" field.
func DesignationIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDesignationID, v))
}

// DesignationIDHasSuffix applies the HasSuffix predicate on the "DesignationID" field.
func DesignationIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDesignationID, v))
}

// DesignationIDIsNil applies the IsNil predicate on the "DesignationID" field.
func DesignationIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDesignationID))
}

// DesignationIDNotNil applies the NotNil predicate on the "DesignationID" field.
func DesignationIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDesignationID))
}

// DesignationIDEqualFold applies the EqualFold predicate on the "DesignationID" field.
func DesignationIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDesignationID, v))
}

// DesignationIDContainsFold applies the ContainsFold predicate on the "DesignationID" field.
func DesignationIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDesignationID, v))
}

// PresentDesignationEQ applies the EQ predicate on the "PresentDesignation" field.
func PresentDesignationEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldPresentDesignation, v))
}

// PresentDesignationNEQ applies the NEQ predicate on the "PresentDesignation" field.
func PresentDesignationNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldPresentDesignation, v))
}

// PresentDesignationIn applies the In predicate on the "PresentDesignation" field.
func PresentDesignationIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldPresentDesignation, vs...))
}

// PresentDesignationNotIn applies the NotIn predicate on the "PresentDesignation" field.
func PresentDesignationNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldPresentDesignation, vs...))
}

// PresentDesignationGT applies the GT predicate on the "PresentDesignation" field.
func PresentDesignationGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldPresentDesignation, v))
}

// PresentDesignationGTE applies the GTE predicate on the "PresentDesignation" field.
func PresentDesignationGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldPresentDesignation, v))
}

// PresentDesignationLT applies the LT predicate on the "PresentDesignation" field.
func PresentDesignationLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldPresentDesignation, v))
}

// PresentDesignationLTE applies the LTE predicate on the "PresentDesignation" field.
func PresentDesignationLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldPresentDesignation, v))
}

// PresentDesignationContains applies the Contains predicate on the "PresentDesignation" field.
func PresentDesignationContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldPresentDesignation, v))
}

// PresentDesignationHasPrefix applies the HasPrefix predicate on the "PresentDesignation" field.
func PresentDesignationHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldPresentDesignation, v))
}

// PresentDesignationHasSuffix applies the HasSuffix predicate on the "PresentDesignation" field.
func PresentDesignationHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldPresentDesignation, v))
}

// PresentDesignationIsNil applies the IsNil predicate on the "PresentDesignation" field.
func PresentDesignationIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldPresentDesignation))
}

// PresentDesignationNotNil applies the NotNil predicate on the "PresentDesignation" field.
func PresentDesignationNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldPresentDesignation))
}

// PresentDesignationEqualFold applies the EqualFold predicate on the "PresentDesignation" field.
func PresentDesignationEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldPresentDesignation, v))
}

// PresentDesignationContainsFold applies the ContainsFold predicate on the "PresentDesignation" field.
func PresentDesignationContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldPresentDesignation, v))
}

// EducationCodeEQ applies the EQ predicate on the "EducationCode" field.
func EducationCodeEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEducationCode, v))
}

// EducationCodeNEQ applies the NEQ predicate on the "EducationCode" field.
func EducationCodeNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldEducationCode, v))
}

// EducationCodeIn applies the In predicate on the "EducationCode" field.
func EducationCodeIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldEducationCode, vs...))
}

// EducationCodeNotIn applies the NotIn predicate on the "EducationCode" field.
func EducationCodeNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldEducationCode, vs...))
}

// EducationCodeGT applies the GT predicate on the "EducationCode" field.
func EducationCodeGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldEducationCode, v))
}

// EducationCodeGTE applies the GTE predicate on the "EducationCode" field.
func EducationCodeGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldEducationCode, v))
}

// EducationCodeLT applies the LT predicate on the "EducationCode" field.
func EducationCodeLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldEducationCode, v))
}

// EducationCodeLTE applies the LTE predicate on the "EducationCode" field.
func EducationCodeLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldEducationCode, v))
}

// EducationCodeContains applies the Contains predicate on the "EducationCode" field.
func EducationCodeContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldEducationCode, v))
}

// EducationCodeHasPrefix applies the HasPrefix predicate on the "EducationCode" field.
func EducationCodeHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldEducationCode, v))
}

// EducationCodeHasSuffix applies the HasSuffix predicate on the "EducationCode" field.
func EducationCodeHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldEducationCode, v))
}

// EducationCodeIsNil applies the IsNil predicate on the "EducationCode" field.
func EducationCodeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldEducationCode))
}

// EducationCodeNotNil applies the NotNil predicate on the "EducationCode" field.
func EducationCodeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldEducationCode))
}

// EducationCodeEqualFold applies the EqualFold predicate on the "EducationCode" field.
func EducationCodeEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldEducationCode, v))
}

// EducationCodeContainsFold applies the ContainsFold predicate on the "EducationCode" field.
func EducationCodeContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldEducationCode, v))
}

// EducationDescriptionEQ applies the EQ predicate on the "EducationDescription" field.
func EducationDescriptionEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEducationDescription, v))
}

// EducationDescriptionNEQ applies the NEQ predicate on the "EducationDescription" field.
func EducationDescriptionNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldEducationDescription, v))
}

// EducationDescriptionIn applies the In predicate on the "EducationDescription" field.
func EducationDescriptionIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldEducationDescription, vs...))
}

// EducationDescriptionNotIn applies the NotIn predicate on the "EducationDescription" field.
func EducationDescriptionNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldEducationDescription, vs...))
}

// EducationDescriptionGT applies the GT predicate on the "EducationDescription" field.
func EducationDescriptionGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldEducationDescription, v))
}

// EducationDescriptionGTE applies the GTE predicate on the "EducationDescription" field.
func EducationDescriptionGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldEducationDescription, v))
}

// EducationDescriptionLT applies the LT predicate on the "EducationDescription" field.
func EducationDescriptionLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldEducationDescription, v))
}

// EducationDescriptionLTE applies the LTE predicate on the "EducationDescription" field.
func EducationDescriptionLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldEducationDescription, v))
}

// EducationDescriptionContains applies the Contains predicate on the "EducationDescription" field.
func EducationDescriptionContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldEducationDescription, v))
}

// EducationDescriptionHasPrefix applies the HasPrefix predicate on the "EducationDescription" field.
func EducationDescriptionHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldEducationDescription, v))
}

// EducationDescriptionHasSuffix applies the HasSuffix predicate on the "EducationDescription" field.
func EducationDescriptionHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldEducationDescription, v))
}

// EducationDescriptionIsNil applies the IsNil predicate on the "EducationDescription" field.
func EducationDescriptionIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldEducationDescription))
}

// EducationDescriptionNotNil applies the NotNil predicate on the "EducationDescription" field.
func EducationDescriptionNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldEducationDescription))
}

// EducationDescriptionEqualFold applies the EqualFold predicate on the "EducationDescription" field.
func EducationDescriptionEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldEducationDescription, v))
}

// EducationDescriptionContainsFold applies the ContainsFold predicate on the "EducationDescription" field.
func EducationDescriptionContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldEducationDescription, v))
}

// FacilityUniqueIDEQ applies the EQ predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldFacilityUniqueID, v))
}

// FacilityUniqueIDNEQ applies the NEQ predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldFacilityUniqueID, v))
}

// FacilityUniqueIDIn applies the In predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldFacilityUniqueID, vs...))
}

// FacilityUniqueIDNotIn applies the NotIn predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldFacilityUniqueID, vs...))
}

// FacilityUniqueIDGT applies the GT predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldFacilityUniqueID, v))
}

// FacilityUniqueIDGTE applies the GTE predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldFacilityUniqueID, v))
}

// FacilityUniqueIDLT applies the LT predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldFacilityUniqueID, v))
}

// FacilityUniqueIDLTE applies the LTE predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldFacilityUniqueID, v))
}

// FacilityUniqueIDContains applies the Contains predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldFacilityUniqueID, v))
}

// FacilityUniqueIDHasPrefix applies the HasPrefix predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldFacilityUniqueID, v))
}

// FacilityUniqueIDHasSuffix applies the HasSuffix predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldFacilityUniqueID, v))
}

// FacilityUniqueIDIsNil applies the IsNil predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldFacilityUniqueID))
}

// FacilityUniqueIDNotNil applies the NotNil predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldFacilityUniqueID))
}

// FacilityUniqueIDEqualFold applies the EqualFold predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldFacilityUniqueID, v))
}

// FacilityUniqueIDContainsFold applies the ContainsFold predicate on the "FacilityUniqueID" field.
func FacilityUniqueIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldFacilityUniqueID, v))
}

// WorkingOfficePincodeEQ applies the EQ predicate on the "WorkingOfficePincode" field.
func WorkingOfficePincodeEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficePincode, v))
}

// WorkingOfficePincodeNEQ applies the NEQ predicate on the "WorkingOfficePincode" field.
func WorkingOfficePincodeNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldWorkingOfficePincode, v))
}

// WorkingOfficePincodeIn applies the In predicate on the "WorkingOfficePincode" field.
func WorkingOfficePincodeIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldWorkingOfficePincode, vs...))
}

// WorkingOfficePincodeNotIn applies the NotIn predicate on the "WorkingOfficePincode" field.
func WorkingOfficePincodeNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldWorkingOfficePincode, vs...))
}

// WorkingOfficePincodeGT applies the GT predicate on the "WorkingOfficePincode" field.
func WorkingOfficePincodeGT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldWorkingOfficePincode, v))
}

// WorkingOfficePincodeGTE applies the GTE predicate on the "WorkingOfficePincode" field.
func WorkingOfficePincodeGTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldWorkingOfficePincode, v))
}

// WorkingOfficePincodeLT applies the LT predicate on the "WorkingOfficePincode" field.
func WorkingOfficePincodeLT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldWorkingOfficePincode, v))
}

// WorkingOfficePincodeLTE applies the LTE predicate on the "WorkingOfficePincode" field.
func WorkingOfficePincodeLTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldWorkingOfficePincode, v))
}

// WorkingOfficePincodeIsNil applies the IsNil predicate on the "WorkingOfficePincode" field.
func WorkingOfficePincodeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldWorkingOfficePincode))
}

// WorkingOfficePincodeNotNil applies the NotNil predicate on the "WorkingOfficePincode" field.
func WorkingOfficePincodeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldWorkingOfficePincode))
}

// WorkingOfficeFacilityIDEQ applies the EQ predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeFacilityID, v))
}

// WorkingOfficeFacilityIDNEQ applies the NEQ predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldWorkingOfficeFacilityID, v))
}

// WorkingOfficeFacilityIDIn applies the In predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldWorkingOfficeFacilityID, vs...))
}

// WorkingOfficeFacilityIDNotIn applies the NotIn predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldWorkingOfficeFacilityID, vs...))
}

// WorkingOfficeFacilityIDGT applies the GT predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldWorkingOfficeFacilityID, v))
}

// WorkingOfficeFacilityIDGTE applies the GTE predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldWorkingOfficeFacilityID, v))
}

// WorkingOfficeFacilityIDLT applies the LT predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldWorkingOfficeFacilityID, v))
}

// WorkingOfficeFacilityIDLTE applies the LTE predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldWorkingOfficeFacilityID, v))
}

// WorkingOfficeFacilityIDContains applies the Contains predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldWorkingOfficeFacilityID, v))
}

// WorkingOfficeFacilityIDHasPrefix applies the HasPrefix predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldWorkingOfficeFacilityID, v))
}

// WorkingOfficeFacilityIDHasSuffix applies the HasSuffix predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldWorkingOfficeFacilityID, v))
}

// WorkingOfficeFacilityIDIsNil applies the IsNil predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldWorkingOfficeFacilityID))
}

// WorkingOfficeFacilityIDNotNil applies the NotNil predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldWorkingOfficeFacilityID))
}

// WorkingOfficeFacilityIDEqualFold applies the EqualFold predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldWorkingOfficeFacilityID, v))
}

// WorkingOfficeFacilityIDContainsFold applies the ContainsFold predicate on the "WorkingOfficeFacilityID" field.
func WorkingOfficeFacilityIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldWorkingOfficeFacilityID, v))
}

// WorkingOfficeNameEQ applies the EQ predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeName, v))
}

// WorkingOfficeNameNEQ applies the NEQ predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldWorkingOfficeName, v))
}

// WorkingOfficeNameIn applies the In predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldWorkingOfficeName, vs...))
}

// WorkingOfficeNameNotIn applies the NotIn predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldWorkingOfficeName, vs...))
}

// WorkingOfficeNameGT applies the GT predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldWorkingOfficeName, v))
}

// WorkingOfficeNameGTE applies the GTE predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldWorkingOfficeName, v))
}

// WorkingOfficeNameLT applies the LT predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldWorkingOfficeName, v))
}

// WorkingOfficeNameLTE applies the LTE predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldWorkingOfficeName, v))
}

// WorkingOfficeNameContains applies the Contains predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldWorkingOfficeName, v))
}

// WorkingOfficeNameHasPrefix applies the HasPrefix predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldWorkingOfficeName, v))
}

// WorkingOfficeNameHasSuffix applies the HasSuffix predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldWorkingOfficeName, v))
}

// WorkingOfficeNameIsNil applies the IsNil predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldWorkingOfficeName))
}

// WorkingOfficeNameNotNil applies the NotNil predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldWorkingOfficeName))
}

// WorkingOfficeNameEqualFold applies the EqualFold predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldWorkingOfficeName, v))
}

// WorkingOfficeNameContainsFold applies the ContainsFold predicate on the "WorkingOfficeName" field.
func WorkingOfficeNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldWorkingOfficeName, v))
}

// WorkingOfficeCircleFacilityIDEQ applies the EQ predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeCircleFacilityID, v))
}

// WorkingOfficeCircleFacilityIDNEQ applies the NEQ predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldWorkingOfficeCircleFacilityID, v))
}

// WorkingOfficeCircleFacilityIDIn applies the In predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldWorkingOfficeCircleFacilityID, vs...))
}

// WorkingOfficeCircleFacilityIDNotIn applies the NotIn predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldWorkingOfficeCircleFacilityID, vs...))
}

// WorkingOfficeCircleFacilityIDGT applies the GT predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldWorkingOfficeCircleFacilityID, v))
}

// WorkingOfficeCircleFacilityIDGTE applies the GTE predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldWorkingOfficeCircleFacilityID, v))
}

// WorkingOfficeCircleFacilityIDLT applies the LT predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldWorkingOfficeCircleFacilityID, v))
}

// WorkingOfficeCircleFacilityIDLTE applies the LTE predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldWorkingOfficeCircleFacilityID, v))
}

// WorkingOfficeCircleFacilityIDContains applies the Contains predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldWorkingOfficeCircleFacilityID, v))
}

// WorkingOfficeCircleFacilityIDHasPrefix applies the HasPrefix predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldWorkingOfficeCircleFacilityID, v))
}

// WorkingOfficeCircleFacilityIDHasSuffix applies the HasSuffix predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldWorkingOfficeCircleFacilityID, v))
}

// WorkingOfficeCircleFacilityIDIsNil applies the IsNil predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldWorkingOfficeCircleFacilityID))
}

// WorkingOfficeCircleFacilityIDNotNil applies the NotNil predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldWorkingOfficeCircleFacilityID))
}

// WorkingOfficeCircleFacilityIDEqualFold applies the EqualFold predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldWorkingOfficeCircleFacilityID, v))
}

// WorkingOfficeCircleFacilityIDContainsFold applies the ContainsFold predicate on the "WorkingOfficeCircleFacilityID" field.
func WorkingOfficeCircleFacilityIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldWorkingOfficeCircleFacilityID, v))
}

// WorkingOfficeCircleNameEQ applies the EQ predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeCircleName, v))
}

// WorkingOfficeCircleNameNEQ applies the NEQ predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldWorkingOfficeCircleName, v))
}

// WorkingOfficeCircleNameIn applies the In predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldWorkingOfficeCircleName, vs...))
}

// WorkingOfficeCircleNameNotIn applies the NotIn predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldWorkingOfficeCircleName, vs...))
}

// WorkingOfficeCircleNameGT applies the GT predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldWorkingOfficeCircleName, v))
}

// WorkingOfficeCircleNameGTE applies the GTE predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldWorkingOfficeCircleName, v))
}

// WorkingOfficeCircleNameLT applies the LT predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldWorkingOfficeCircleName, v))
}

// WorkingOfficeCircleNameLTE applies the LTE predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldWorkingOfficeCircleName, v))
}

// WorkingOfficeCircleNameContains applies the Contains predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldWorkingOfficeCircleName, v))
}

// WorkingOfficeCircleNameHasPrefix applies the HasPrefix predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldWorkingOfficeCircleName, v))
}

// WorkingOfficeCircleNameHasSuffix applies the HasSuffix predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldWorkingOfficeCircleName, v))
}

// WorkingOfficeCircleNameIsNil applies the IsNil predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldWorkingOfficeCircleName))
}

// WorkingOfficeCircleNameNotNil applies the NotNil predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldWorkingOfficeCircleName))
}

// WorkingOfficeCircleNameEqualFold applies the EqualFold predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldWorkingOfficeCircleName, v))
}

// WorkingOfficeCircleNameContainsFold applies the ContainsFold predicate on the "WorkingOfficeCircleName" field.
func WorkingOfficeCircleNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldWorkingOfficeCircleName, v))
}

// WorkingOfficeRegionFacilityIDEQ applies the EQ predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeRegionFacilityID, v))
}

// WorkingOfficeRegionFacilityIDNEQ applies the NEQ predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldWorkingOfficeRegionFacilityID, v))
}

// WorkingOfficeRegionFacilityIDIn applies the In predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldWorkingOfficeRegionFacilityID, vs...))
}

// WorkingOfficeRegionFacilityIDNotIn applies the NotIn predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldWorkingOfficeRegionFacilityID, vs...))
}

// WorkingOfficeRegionFacilityIDGT applies the GT predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldWorkingOfficeRegionFacilityID, v))
}

// WorkingOfficeRegionFacilityIDGTE applies the GTE predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldWorkingOfficeRegionFacilityID, v))
}

// WorkingOfficeRegionFacilityIDLT applies the LT predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldWorkingOfficeRegionFacilityID, v))
}

// WorkingOfficeRegionFacilityIDLTE applies the LTE predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldWorkingOfficeRegionFacilityID, v))
}

// WorkingOfficeRegionFacilityIDContains applies the Contains predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldWorkingOfficeRegionFacilityID, v))
}

// WorkingOfficeRegionFacilityIDHasPrefix applies the HasPrefix predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldWorkingOfficeRegionFacilityID, v))
}

// WorkingOfficeRegionFacilityIDHasSuffix applies the HasSuffix predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldWorkingOfficeRegionFacilityID, v))
}

// WorkingOfficeRegionFacilityIDIsNil applies the IsNil predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldWorkingOfficeRegionFacilityID))
}

// WorkingOfficeRegionFacilityIDNotNil applies the NotNil predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldWorkingOfficeRegionFacilityID))
}

// WorkingOfficeRegionFacilityIDEqualFold applies the EqualFold predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldWorkingOfficeRegionFacilityID, v))
}

// WorkingOfficeRegionFacilityIDContainsFold applies the ContainsFold predicate on the "WorkingOfficeRegionFacilityID" field.
func WorkingOfficeRegionFacilityIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldWorkingOfficeRegionFacilityID, v))
}

// WorkingOfficeRegionNameEQ applies the EQ predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeRegionName, v))
}

// WorkingOfficeRegionNameNEQ applies the NEQ predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldWorkingOfficeRegionName, v))
}

// WorkingOfficeRegionNameIn applies the In predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldWorkingOfficeRegionName, vs...))
}

// WorkingOfficeRegionNameNotIn applies the NotIn predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldWorkingOfficeRegionName, vs...))
}

// WorkingOfficeRegionNameGT applies the GT predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldWorkingOfficeRegionName, v))
}

// WorkingOfficeRegionNameGTE applies the GTE predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldWorkingOfficeRegionName, v))
}

// WorkingOfficeRegionNameLT applies the LT predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldWorkingOfficeRegionName, v))
}

// WorkingOfficeRegionNameLTE applies the LTE predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldWorkingOfficeRegionName, v))
}

// WorkingOfficeRegionNameContains applies the Contains predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldWorkingOfficeRegionName, v))
}

// WorkingOfficeRegionNameHasPrefix applies the HasPrefix predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldWorkingOfficeRegionName, v))
}

// WorkingOfficeRegionNameHasSuffix applies the HasSuffix predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldWorkingOfficeRegionName, v))
}

// WorkingOfficeRegionNameIsNil applies the IsNil predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldWorkingOfficeRegionName))
}

// WorkingOfficeRegionNameNotNil applies the NotNil predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldWorkingOfficeRegionName))
}

// WorkingOfficeRegionNameEqualFold applies the EqualFold predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldWorkingOfficeRegionName, v))
}

// WorkingOfficeRegionNameContainsFold applies the ContainsFold predicate on the "WorkingOfficeRegionName" field.
func WorkingOfficeRegionNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldWorkingOfficeRegionName, v))
}

// WorkingOfficeDivisionFacilityIDEQ applies the EQ predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeDivisionFacilityID, v))
}

// WorkingOfficeDivisionFacilityIDNEQ applies the NEQ predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldWorkingOfficeDivisionFacilityID, v))
}

// WorkingOfficeDivisionFacilityIDIn applies the In predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldWorkingOfficeDivisionFacilityID, vs...))
}

// WorkingOfficeDivisionFacilityIDNotIn applies the NotIn predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldWorkingOfficeDivisionFacilityID, vs...))
}

// WorkingOfficeDivisionFacilityIDGT applies the GT predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldWorkingOfficeDivisionFacilityID, v))
}

// WorkingOfficeDivisionFacilityIDGTE applies the GTE predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldWorkingOfficeDivisionFacilityID, v))
}

// WorkingOfficeDivisionFacilityIDLT applies the LT predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldWorkingOfficeDivisionFacilityID, v))
}

// WorkingOfficeDivisionFacilityIDLTE applies the LTE predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldWorkingOfficeDivisionFacilityID, v))
}

// WorkingOfficeDivisionFacilityIDContains applies the Contains predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldWorkingOfficeDivisionFacilityID, v))
}

// WorkingOfficeDivisionFacilityIDHasPrefix applies the HasPrefix predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldWorkingOfficeDivisionFacilityID, v))
}

// WorkingOfficeDivisionFacilityIDHasSuffix applies the HasSuffix predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldWorkingOfficeDivisionFacilityID, v))
}

// WorkingOfficeDivisionFacilityIDIsNil applies the IsNil predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldWorkingOfficeDivisionFacilityID))
}

// WorkingOfficeDivisionFacilityIDNotNil applies the NotNil predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldWorkingOfficeDivisionFacilityID))
}

// WorkingOfficeDivisionFacilityIDEqualFold applies the EqualFold predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldWorkingOfficeDivisionFacilityID, v))
}

// WorkingOfficeDivisionFacilityIDContainsFold applies the ContainsFold predicate on the "WorkingOfficeDivisionFacilityID" field.
func WorkingOfficeDivisionFacilityIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldWorkingOfficeDivisionFacilityID, v))
}

// WorkingOfficeDivisionNameEQ applies the EQ predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldWorkingOfficeDivisionName, v))
}

// WorkingOfficeDivisionNameNEQ applies the NEQ predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldWorkingOfficeDivisionName, v))
}

// WorkingOfficeDivisionNameIn applies the In predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldWorkingOfficeDivisionName, vs...))
}

// WorkingOfficeDivisionNameNotIn applies the NotIn predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldWorkingOfficeDivisionName, vs...))
}

// WorkingOfficeDivisionNameGT applies the GT predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldWorkingOfficeDivisionName, v))
}

// WorkingOfficeDivisionNameGTE applies the GTE predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldWorkingOfficeDivisionName, v))
}

// WorkingOfficeDivisionNameLT applies the LT predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldWorkingOfficeDivisionName, v))
}

// WorkingOfficeDivisionNameLTE applies the LTE predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldWorkingOfficeDivisionName, v))
}

// WorkingOfficeDivisionNameContains applies the Contains predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldWorkingOfficeDivisionName, v))
}

// WorkingOfficeDivisionNameHasPrefix applies the HasPrefix predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldWorkingOfficeDivisionName, v))
}

// WorkingOfficeDivisionNameHasSuffix applies the HasSuffix predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldWorkingOfficeDivisionName, v))
}

// WorkingOfficeDivisionNameIsNil applies the IsNil predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldWorkingOfficeDivisionName))
}

// WorkingOfficeDivisionNameNotNil applies the NotNil predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldWorkingOfficeDivisionName))
}

// WorkingOfficeDivisionNameEqualFold applies the EqualFold predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldWorkingOfficeDivisionName, v))
}

// WorkingOfficeDivisionNameContainsFold applies the ContainsFold predicate on the "WorkingOfficeDivisionName" field.
func WorkingOfficeDivisionNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldWorkingOfficeDivisionName, v))
}

// ReportingOfficeFacilityIDEQ applies the EQ predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldReportingOfficeFacilityID, v))
}

// ReportingOfficeFacilityIDNEQ applies the NEQ predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldReportingOfficeFacilityID, v))
}

// ReportingOfficeFacilityIDIn applies the In predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldReportingOfficeFacilityID, vs...))
}

// ReportingOfficeFacilityIDNotIn applies the NotIn predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldReportingOfficeFacilityID, vs...))
}

// ReportingOfficeFacilityIDGT applies the GT predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldReportingOfficeFacilityID, v))
}

// ReportingOfficeFacilityIDGTE applies the GTE predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldReportingOfficeFacilityID, v))
}

// ReportingOfficeFacilityIDLT applies the LT predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldReportingOfficeFacilityID, v))
}

// ReportingOfficeFacilityIDLTE applies the LTE predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldReportingOfficeFacilityID, v))
}

// ReportingOfficeFacilityIDContains applies the Contains predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldReportingOfficeFacilityID, v))
}

// ReportingOfficeFacilityIDHasPrefix applies the HasPrefix predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldReportingOfficeFacilityID, v))
}

// ReportingOfficeFacilityIDHasSuffix applies the HasSuffix predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldReportingOfficeFacilityID, v))
}

// ReportingOfficeFacilityIDIsNil applies the IsNil predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldReportingOfficeFacilityID))
}

// ReportingOfficeFacilityIDNotNil applies the NotNil predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldReportingOfficeFacilityID))
}

// ReportingOfficeFacilityIDEqualFold applies the EqualFold predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldReportingOfficeFacilityID, v))
}

// ReportingOfficeFacilityIDContainsFold applies the ContainsFold predicate on the "ReportingOfficeFacilityID" field.
func ReportingOfficeFacilityIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldReportingOfficeFacilityID, v))
}

// ReportingOfficeNameEQ applies the EQ predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldReportingOfficeName, v))
}

// ReportingOfficeNameNEQ applies the NEQ predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldReportingOfficeName, v))
}

// ReportingOfficeNameIn applies the In predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldReportingOfficeName, vs...))
}

// ReportingOfficeNameNotIn applies the NotIn predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldReportingOfficeName, vs...))
}

// ReportingOfficeNameGT applies the GT predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldReportingOfficeName, v))
}

// ReportingOfficeNameGTE applies the GTE predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldReportingOfficeName, v))
}

// ReportingOfficeNameLT applies the LT predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldReportingOfficeName, v))
}

// ReportingOfficeNameLTE applies the LTE predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldReportingOfficeName, v))
}

// ReportingOfficeNameContains applies the Contains predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldReportingOfficeName, v))
}

// ReportingOfficeNameHasPrefix applies the HasPrefix predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldReportingOfficeName, v))
}

// ReportingOfficeNameHasSuffix applies the HasSuffix predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldReportingOfficeName, v))
}

// ReportingOfficeNameIsNil applies the IsNil predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldReportingOfficeName))
}

// ReportingOfficeNameNotNil applies the NotNil predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldReportingOfficeName))
}

// ReportingOfficeNameEqualFold applies the EqualFold predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldReportingOfficeName, v))
}

// ReportingOfficeNameContainsFold applies the ContainsFold predicate on the "ReportingOfficeName" field.
func ReportingOfficeNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldReportingOfficeName, v))
}

// LienControllingOfficeIDEQ applies the EQ predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldLienControllingOfficeID, v))
}

// LienControllingOfficeIDNEQ applies the NEQ predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldLienControllingOfficeID, v))
}

// LienControllingOfficeIDIn applies the In predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldLienControllingOfficeID, vs...))
}

// LienControllingOfficeIDNotIn applies the NotIn predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldLienControllingOfficeID, vs...))
}

// LienControllingOfficeIDGT applies the GT predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldLienControllingOfficeID, v))
}

// LienControllingOfficeIDGTE applies the GTE predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldLienControllingOfficeID, v))
}

// LienControllingOfficeIDLT applies the LT predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldLienControllingOfficeID, v))
}

// LienControllingOfficeIDLTE applies the LTE predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldLienControllingOfficeID, v))
}

// LienControllingOfficeIDContains applies the Contains predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldLienControllingOfficeID, v))
}

// LienControllingOfficeIDHasPrefix applies the HasPrefix predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldLienControllingOfficeID, v))
}

// LienControllingOfficeIDHasSuffix applies the HasSuffix predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldLienControllingOfficeID, v))
}

// LienControllingOfficeIDIsNil applies the IsNil predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldLienControllingOfficeID))
}

// LienControllingOfficeIDNotNil applies the NotNil predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldLienControllingOfficeID))
}

// LienControllingOfficeIDEqualFold applies the EqualFold predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldLienControllingOfficeID, v))
}

// LienControllingOfficeIDContainsFold applies the ContainsFold predicate on the "LienControllingOfficeID" field.
func LienControllingOfficeIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldLienControllingOfficeID, v))
}

// LienControllingOfficeNameEQ applies the EQ predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldLienControllingOfficeName, v))
}

// LienControllingOfficeNameNEQ applies the NEQ predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldLienControllingOfficeName, v))
}

// LienControllingOfficeNameIn applies the In predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldLienControllingOfficeName, vs...))
}

// LienControllingOfficeNameNotIn applies the NotIn predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldLienControllingOfficeName, vs...))
}

// LienControllingOfficeNameGT applies the GT predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldLienControllingOfficeName, v))
}

// LienControllingOfficeNameGTE applies the GTE predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldLienControllingOfficeName, v))
}

// LienControllingOfficeNameLT applies the LT predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldLienControllingOfficeName, v))
}

// LienControllingOfficeNameLTE applies the LTE predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldLienControllingOfficeName, v))
}

// LienControllingOfficeNameContains applies the Contains predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldLienControllingOfficeName, v))
}

// LienControllingOfficeNameHasPrefix applies the HasPrefix predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldLienControllingOfficeName, v))
}

// LienControllingOfficeNameHasSuffix applies the HasSuffix predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldLienControllingOfficeName, v))
}

// LienControllingOfficeNameIsNil applies the IsNil predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldLienControllingOfficeName))
}

// LienControllingOfficeNameNotNil applies the NotNil predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldLienControllingOfficeName))
}

// LienControllingOfficeNameEqualFold applies the EqualFold predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldLienControllingOfficeName, v))
}

// LienControllingOfficeNameContainsFold applies the ContainsFold predicate on the "LienControllingOfficeName" field.
func LienControllingOfficeNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldLienControllingOfficeName, v))
}

// InDeputationEQ applies the EQ predicate on the "InDeputation" field.
func InDeputationEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldInDeputation, v))
}

// InDeputationNEQ applies the NEQ predicate on the "InDeputation" field.
func InDeputationNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldInDeputation, v))
}

// InDeputationIn applies the In predicate on the "InDeputation" field.
func InDeputationIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldInDeputation, vs...))
}

// InDeputationNotIn applies the NotIn predicate on the "InDeputation" field.
func InDeputationNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldInDeputation, vs...))
}

// InDeputationGT applies the GT predicate on the "InDeputation" field.
func InDeputationGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldInDeputation, v))
}

// InDeputationGTE applies the GTE predicate on the "InDeputation" field.
func InDeputationGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldInDeputation, v))
}

// InDeputationLT applies the LT predicate on the "InDeputation" field.
func InDeputationLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldInDeputation, v))
}

// InDeputationLTE applies the LTE predicate on the "InDeputation" field.
func InDeputationLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldInDeputation, v))
}

// InDeputationContains applies the Contains predicate on the "InDeputation" field.
func InDeputationContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldInDeputation, v))
}

// InDeputationHasPrefix applies the HasPrefix predicate on the "InDeputation" field.
func InDeputationHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldInDeputation, v))
}

// InDeputationHasSuffix applies the HasSuffix predicate on the "InDeputation" field.
func InDeputationHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldInDeputation, v))
}

// InDeputationIsNil applies the IsNil predicate on the "InDeputation" field.
func InDeputationIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldInDeputation))
}

// InDeputationNotNil applies the NotNil predicate on the "InDeputation" field.
func InDeputationNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldInDeputation))
}

// InDeputationEqualFold applies the EqualFold predicate on the "InDeputation" field.
func InDeputationEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldInDeputation, v))
}

// InDeputationContainsFold applies the ContainsFold predicate on the "InDeputation" field.
func InDeputationContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldInDeputation, v))
}

// DeputationTypeEQ applies the EQ predicate on the "DeputationType" field.
func DeputationTypeEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationType, v))
}

// DeputationTypeNEQ applies the NEQ predicate on the "DeputationType" field.
func DeputationTypeNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDeputationType, v))
}

// DeputationTypeIn applies the In predicate on the "DeputationType" field.
func DeputationTypeIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDeputationType, vs...))
}

// DeputationTypeNotIn applies the NotIn predicate on the "DeputationType" field.
func DeputationTypeNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDeputationType, vs...))
}

// DeputationTypeGT applies the GT predicate on the "DeputationType" field.
func DeputationTypeGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDeputationType, v))
}

// DeputationTypeGTE applies the GTE predicate on the "DeputationType" field.
func DeputationTypeGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDeputationType, v))
}

// DeputationTypeLT applies the LT predicate on the "DeputationType" field.
func DeputationTypeLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDeputationType, v))
}

// DeputationTypeLTE applies the LTE predicate on the "DeputationType" field.
func DeputationTypeLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDeputationType, v))
}

// DeputationTypeContains applies the Contains predicate on the "DeputationType" field.
func DeputationTypeContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDeputationType, v))
}

// DeputationTypeHasPrefix applies the HasPrefix predicate on the "DeputationType" field.
func DeputationTypeHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDeputationType, v))
}

// DeputationTypeHasSuffix applies the HasSuffix predicate on the "DeputationType" field.
func DeputationTypeHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDeputationType, v))
}

// DeputationTypeIsNil applies the IsNil predicate on the "DeputationType" field.
func DeputationTypeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDeputationType))
}

// DeputationTypeNotNil applies the NotNil predicate on the "DeputationType" field.
func DeputationTypeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDeputationType))
}

// DeputationTypeEqualFold applies the EqualFold predicate on the "DeputationType" field.
func DeputationTypeEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDeputationType, v))
}

// DeputationTypeContainsFold applies the ContainsFold predicate on the "DeputationType" field.
func DeputationTypeContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDeputationType, v))
}

// DeputationOfficeUniqueIdEQ applies the EQ predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationOfficeUniqueId, v))
}

// DeputationOfficeUniqueIdNEQ applies the NEQ predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDeputationOfficeUniqueId, v))
}

// DeputationOfficeUniqueIdIn applies the In predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDeputationOfficeUniqueId, vs...))
}

// DeputationOfficeUniqueIdNotIn applies the NotIn predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDeputationOfficeUniqueId, vs...))
}

// DeputationOfficeUniqueIdGT applies the GT predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDeputationOfficeUniqueId, v))
}

// DeputationOfficeUniqueIdGTE applies the GTE predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDeputationOfficeUniqueId, v))
}

// DeputationOfficeUniqueIdLT applies the LT predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDeputationOfficeUniqueId, v))
}

// DeputationOfficeUniqueIdLTE applies the LTE predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDeputationOfficeUniqueId, v))
}

// DeputationOfficeUniqueIdContains applies the Contains predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDeputationOfficeUniqueId, v))
}

// DeputationOfficeUniqueIdHasPrefix applies the HasPrefix predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDeputationOfficeUniqueId, v))
}

// DeputationOfficeUniqueIdHasSuffix applies the HasSuffix predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDeputationOfficeUniqueId, v))
}

// DeputationOfficeUniqueIdIsNil applies the IsNil predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDeputationOfficeUniqueId))
}

// DeputationOfficeUniqueIdNotNil applies the NotNil predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDeputationOfficeUniqueId))
}

// DeputationOfficeUniqueIdEqualFold applies the EqualFold predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDeputationOfficeUniqueId, v))
}

// DeputationOfficeUniqueIdContainsFold applies the ContainsFold predicate on the "DeputationOfficeUniqueId" field.
func DeputationOfficeUniqueIdContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDeputationOfficeUniqueId, v))
}

// DeputationOfficeFacilityIDEQ applies the EQ predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationOfficeFacilityID, v))
}

// DeputationOfficeFacilityIDNEQ applies the NEQ predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDeputationOfficeFacilityID, v))
}

// DeputationOfficeFacilityIDIn applies the In predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDeputationOfficeFacilityID, vs...))
}

// DeputationOfficeFacilityIDNotIn applies the NotIn predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDeputationOfficeFacilityID, vs...))
}

// DeputationOfficeFacilityIDGT applies the GT predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDeputationOfficeFacilityID, v))
}

// DeputationOfficeFacilityIDGTE applies the GTE predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDeputationOfficeFacilityID, v))
}

// DeputationOfficeFacilityIDLT applies the LT predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDeputationOfficeFacilityID, v))
}

// DeputationOfficeFacilityIDLTE applies the LTE predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDeputationOfficeFacilityID, v))
}

// DeputationOfficeFacilityIDContains applies the Contains predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDeputationOfficeFacilityID, v))
}

// DeputationOfficeFacilityIDHasPrefix applies the HasPrefix predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDeputationOfficeFacilityID, v))
}

// DeputationOfficeFacilityIDHasSuffix applies the HasSuffix predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDeputationOfficeFacilityID, v))
}

// DeputationOfficeFacilityIDIsNil applies the IsNil predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDeputationOfficeFacilityID))
}

// DeputationOfficeFacilityIDNotNil applies the NotNil predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDeputationOfficeFacilityID))
}

// DeputationOfficeFacilityIDEqualFold applies the EqualFold predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDeputationOfficeFacilityID, v))
}

// DeputationOfficeFacilityIDContainsFold applies the ContainsFold predicate on the "DeputationOfficeFacilityID" field.
func DeputationOfficeFacilityIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDeputationOfficeFacilityID, v))
}

// DeputationOfficeNameEQ applies the EQ predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationOfficeName, v))
}

// DeputationOfficeNameNEQ applies the NEQ predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDeputationOfficeName, v))
}

// DeputationOfficeNameIn applies the In predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDeputationOfficeName, vs...))
}

// DeputationOfficeNameNotIn applies the NotIn predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDeputationOfficeName, vs...))
}

// DeputationOfficeNameGT applies the GT predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDeputationOfficeName, v))
}

// DeputationOfficeNameGTE applies the GTE predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDeputationOfficeName, v))
}

// DeputationOfficeNameLT applies the LT predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDeputationOfficeName, v))
}

// DeputationOfficeNameLTE applies the LTE predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDeputationOfficeName, v))
}

// DeputationOfficeNameContains applies the Contains predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDeputationOfficeName, v))
}

// DeputationOfficeNameHasPrefix applies the HasPrefix predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDeputationOfficeName, v))
}

// DeputationOfficeNameHasSuffix applies the HasSuffix predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDeputationOfficeName, v))
}

// DeputationOfficeNameIsNil applies the IsNil predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDeputationOfficeName))
}

// DeputationOfficeNameNotNil applies the NotNil predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDeputationOfficeName))
}

// DeputationOfficeNameEqualFold applies the EqualFold predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDeputationOfficeName, v))
}

// DeputationOfficeNameContainsFold applies the ContainsFold predicate on the "DeputationOfficeName" field.
func DeputationOfficeNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDeputationOfficeName, v))
}

// DeputationControllingOfficeIDEQ applies the EQ predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationControllingOfficeID, v))
}

// DeputationControllingOfficeIDNEQ applies the NEQ predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDeputationControllingOfficeID, v))
}

// DeputationControllingOfficeIDIn applies the In predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDeputationControllingOfficeID, vs...))
}

// DeputationControllingOfficeIDNotIn applies the NotIn predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDeputationControllingOfficeID, vs...))
}

// DeputationControllingOfficeIDGT applies the GT predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDeputationControllingOfficeID, v))
}

// DeputationControllingOfficeIDGTE applies the GTE predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDeputationControllingOfficeID, v))
}

// DeputationControllingOfficeIDLT applies the LT predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDeputationControllingOfficeID, v))
}

// DeputationControllingOfficeIDLTE applies the LTE predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDeputationControllingOfficeID, v))
}

// DeputationControllingOfficeIDContains applies the Contains predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDeputationControllingOfficeID, v))
}

// DeputationControllingOfficeIDHasPrefix applies the HasPrefix predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDeputationControllingOfficeID, v))
}

// DeputationControllingOfficeIDHasSuffix applies the HasSuffix predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDeputationControllingOfficeID, v))
}

// DeputationControllingOfficeIDIsNil applies the IsNil predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDeputationControllingOfficeID))
}

// DeputationControllingOfficeIDNotNil applies the NotNil predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDeputationControllingOfficeID))
}

// DeputationControllingOfficeIDEqualFold applies the EqualFold predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDeputationControllingOfficeID, v))
}

// DeputationControllingOfficeIDContainsFold applies the ContainsFold predicate on the "DeputationControllingOfficeID" field.
func DeputationControllingOfficeIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDeputationControllingOfficeID, v))
}

// DeputationControllingOfficeNameEQ applies the EQ predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationControllingOfficeName, v))
}

// DeputationControllingOfficeNameNEQ applies the NEQ predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDeputationControllingOfficeName, v))
}

// DeputationControllingOfficeNameIn applies the In predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDeputationControllingOfficeName, vs...))
}

// DeputationControllingOfficeNameNotIn applies the NotIn predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDeputationControllingOfficeName, vs...))
}

// DeputationControllingOfficeNameGT applies the GT predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDeputationControllingOfficeName, v))
}

// DeputationControllingOfficeNameGTE applies the GTE predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDeputationControllingOfficeName, v))
}

// DeputationControllingOfficeNameLT applies the LT predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDeputationControllingOfficeName, v))
}

// DeputationControllingOfficeNameLTE applies the LTE predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDeputationControllingOfficeName, v))
}

// DeputationControllingOfficeNameContains applies the Contains predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDeputationControllingOfficeName, v))
}

// DeputationControllingOfficeNameHasPrefix applies the HasPrefix predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDeputationControllingOfficeName, v))
}

// DeputationControllingOfficeNameHasSuffix applies the HasSuffix predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDeputationControllingOfficeName, v))
}

// DeputationControllingOfficeNameIsNil applies the IsNil predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDeputationControllingOfficeName))
}

// DeputationControllingOfficeNameNotNil applies the NotNil predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDeputationControllingOfficeName))
}

// DeputationControllingOfficeNameEqualFold applies the EqualFold predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDeputationControllingOfficeName, v))
}

// DeputationControllingOfficeNameContainsFold applies the ContainsFold predicate on the "DeputationControllingOfficeName" field.
func DeputationControllingOfficeNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDeputationControllingOfficeName, v))
}

// ControllingOfficeFacilityIDEQ applies the EQ predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldControllingOfficeFacilityID, v))
}

// ControllingOfficeFacilityIDNEQ applies the NEQ predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldControllingOfficeFacilityID, v))
}

// ControllingOfficeFacilityIDIn applies the In predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldControllingOfficeFacilityID, vs...))
}

// ControllingOfficeFacilityIDNotIn applies the NotIn predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldControllingOfficeFacilityID, vs...))
}

// ControllingOfficeFacilityIDGT applies the GT predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldControllingOfficeFacilityID, v))
}

// ControllingOfficeFacilityIDGTE applies the GTE predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldControllingOfficeFacilityID, v))
}

// ControllingOfficeFacilityIDLT applies the LT predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldControllingOfficeFacilityID, v))
}

// ControllingOfficeFacilityIDLTE applies the LTE predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldControllingOfficeFacilityID, v))
}

// ControllingOfficeFacilityIDContains applies the Contains predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldControllingOfficeFacilityID, v))
}

// ControllingOfficeFacilityIDHasPrefix applies the HasPrefix predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldControllingOfficeFacilityID, v))
}

// ControllingOfficeFacilityIDHasSuffix applies the HasSuffix predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldControllingOfficeFacilityID, v))
}

// ControllingOfficeFacilityIDIsNil applies the IsNil predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldControllingOfficeFacilityID))
}

// ControllingOfficeFacilityIDNotNil applies the NotNil predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldControllingOfficeFacilityID))
}

// ControllingOfficeFacilityIDEqualFold applies the EqualFold predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldControllingOfficeFacilityID, v))
}

// ControllingOfficeFacilityIDContainsFold applies the ContainsFold predicate on the "ControllingOfficeFacilityID" field.
func ControllingOfficeFacilityIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldControllingOfficeFacilityID, v))
}

// ControllingOfficeNameEQ applies the EQ predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldControllingOfficeName, v))
}

// ControllingOfficeNameNEQ applies the NEQ predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldControllingOfficeName, v))
}

// ControllingOfficeNameIn applies the In predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldControllingOfficeName, vs...))
}

// ControllingOfficeNameNotIn applies the NotIn predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldControllingOfficeName, vs...))
}

// ControllingOfficeNameGT applies the GT predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldControllingOfficeName, v))
}

// ControllingOfficeNameGTE applies the GTE predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldControllingOfficeName, v))
}

// ControllingOfficeNameLT applies the LT predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldControllingOfficeName, v))
}

// ControllingOfficeNameLTE applies the LTE predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldControllingOfficeName, v))
}

// ControllingOfficeNameContains applies the Contains predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldControllingOfficeName, v))
}

// ControllingOfficeNameHasPrefix applies the HasPrefix predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldControllingOfficeName, v))
}

// ControllingOfficeNameHasSuffix applies the HasSuffix predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldControllingOfficeName, v))
}

// ControllingOfficeNameIsNil applies the IsNil predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldControllingOfficeName))
}

// ControllingOfficeNameNotNil applies the NotNil predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldControllingOfficeName))
}

// ControllingOfficeNameEqualFold applies the EqualFold predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldControllingOfficeName, v))
}

// ControllingOfficeNameContainsFold applies the ContainsFold predicate on the "ControllingOfficeName" field.
func ControllingOfficeNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldControllingOfficeName, v))
}

// NodalOfficeFacilityIDEQ applies the EQ predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDNEQ applies the NEQ predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDIn applies the In predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldNodalOfficeFacilityID, vs...))
}

// NodalOfficeFacilityIDNotIn applies the NotIn predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldNodalOfficeFacilityID, vs...))
}

// NodalOfficeFacilityIDGT applies the GT predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDGTE applies the GTE predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDLT applies the LT predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDLTE applies the LTE predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDContains applies the Contains predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDHasPrefix applies the HasPrefix predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDHasSuffix applies the HasSuffix predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDIsNil applies the IsNil predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldNodalOfficeFacilityID))
}

// NodalOfficeFacilityIDNotNil applies the NotNil predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldNodalOfficeFacilityID))
}

// NodalOfficeFacilityIDEqualFold applies the EqualFold predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDContainsFold applies the ContainsFold predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeNameEQ applies the EQ predicate on the "NodalOfficeName" field.
func NodalOfficeNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNodalOfficeName, v))
}

// NodalOfficeNameNEQ applies the NEQ predicate on the "NodalOfficeName" field.
func NodalOfficeNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldNodalOfficeName, v))
}

// NodalOfficeNameIn applies the In predicate on the "NodalOfficeName" field.
func NodalOfficeNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldNodalOfficeName, vs...))
}

// NodalOfficeNameNotIn applies the NotIn predicate on the "NodalOfficeName" field.
func NodalOfficeNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldNodalOfficeName, vs...))
}

// NodalOfficeNameGT applies the GT predicate on the "NodalOfficeName" field.
func NodalOfficeNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldNodalOfficeName, v))
}

// NodalOfficeNameGTE applies the GTE predicate on the "NodalOfficeName" field.
func NodalOfficeNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldNodalOfficeName, v))
}

// NodalOfficeNameLT applies the LT predicate on the "NodalOfficeName" field.
func NodalOfficeNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldNodalOfficeName, v))
}

// NodalOfficeNameLTE applies the LTE predicate on the "NodalOfficeName" field.
func NodalOfficeNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldNodalOfficeName, v))
}

// NodalOfficeNameContains applies the Contains predicate on the "NodalOfficeName" field.
func NodalOfficeNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldNodalOfficeName, v))
}

// NodalOfficeNameHasPrefix applies the HasPrefix predicate on the "NodalOfficeName" field.
func NodalOfficeNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldNodalOfficeName, v))
}

// NodalOfficeNameHasSuffix applies the HasSuffix predicate on the "NodalOfficeName" field.
func NodalOfficeNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldNodalOfficeName, v))
}

// NodalOfficeNameIsNil applies the IsNil predicate on the "NodalOfficeName" field.
func NodalOfficeNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldNodalOfficeName))
}

// NodalOfficeNameNotNil applies the NotNil predicate on the "NodalOfficeName" field.
func NodalOfficeNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldNodalOfficeName))
}

// NodalOfficeNameEqualFold applies the EqualFold predicate on the "NodalOfficeName" field.
func NodalOfficeNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldNodalOfficeName, v))
}

// NodalOfficeNameContainsFold applies the ContainsFold predicate on the "NodalOfficeName" field.
func NodalOfficeNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldNodalOfficeName, v))
}

// ExamCityCenterCodeEQ applies the EQ predicate on the "ExamCityCenterCode" field.
func ExamCityCenterCodeEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldExamCityCenterCode, v))
}

// ExamCityCenterCodeNEQ applies the NEQ predicate on the "ExamCityCenterCode" field.
func ExamCityCenterCodeNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldExamCityCenterCode, v))
}

// ExamCityCenterCodeIn applies the In predicate on the "ExamCityCenterCode" field.
func ExamCityCenterCodeIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldExamCityCenterCode, vs...))
}

// ExamCityCenterCodeNotIn applies the NotIn predicate on the "ExamCityCenterCode" field.
func ExamCityCenterCodeNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldExamCityCenterCode, vs...))
}

// ExamCityCenterCodeIsNil applies the IsNil predicate on the "ExamCityCenterCode" field.
func ExamCityCenterCodeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldExamCityCenterCode))
}

// ExamCityCenterCodeNotNil applies the NotNil predicate on the "ExamCityCenterCode" field.
func ExamCityCenterCodeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldExamCityCenterCode))
}

// CenterFacilityIdEQ applies the EQ predicate on the "CenterFacilityId" field.
func CenterFacilityIdEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCenterFacilityId, v))
}

// CenterFacilityIdNEQ applies the NEQ predicate on the "CenterFacilityId" field.
func CenterFacilityIdNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCenterFacilityId, v))
}

// CenterFacilityIdIn applies the In predicate on the "CenterFacilityId" field.
func CenterFacilityIdIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCenterFacilityId, vs...))
}

// CenterFacilityIdNotIn applies the NotIn predicate on the "CenterFacilityId" field.
func CenterFacilityIdNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCenterFacilityId, vs...))
}

// CenterFacilityIdGT applies the GT predicate on the "CenterFacilityId" field.
func CenterFacilityIdGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCenterFacilityId, v))
}

// CenterFacilityIdGTE applies the GTE predicate on the "CenterFacilityId" field.
func CenterFacilityIdGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCenterFacilityId, v))
}

// CenterFacilityIdLT applies the LT predicate on the "CenterFacilityId" field.
func CenterFacilityIdLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCenterFacilityId, v))
}

// CenterFacilityIdLTE applies the LTE predicate on the "CenterFacilityId" field.
func CenterFacilityIdLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCenterFacilityId, v))
}

// CenterFacilityIdContains applies the Contains predicate on the "CenterFacilityId" field.
func CenterFacilityIdContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldCenterFacilityId, v))
}

// CenterFacilityIdHasPrefix applies the HasPrefix predicate on the "CenterFacilityId" field.
func CenterFacilityIdHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldCenterFacilityId, v))
}

// CenterFacilityIdHasSuffix applies the HasSuffix predicate on the "CenterFacilityId" field.
func CenterFacilityIdHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldCenterFacilityId, v))
}

// CenterFacilityIdIsNil applies the IsNil predicate on the "CenterFacilityId" field.
func CenterFacilityIdIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCenterFacilityId))
}

// CenterFacilityIdNotNil applies the NotNil predicate on the "CenterFacilityId" field.
func CenterFacilityIdNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCenterFacilityId))
}

// CenterFacilityIdEqualFold applies the EqualFold predicate on the "CenterFacilityId" field.
func CenterFacilityIdEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldCenterFacilityId, v))
}

// CenterFacilityIdContainsFold applies the ContainsFold predicate on the "CenterFacilityId" field.
func CenterFacilityIdContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldCenterFacilityId, v))
}

// CentrePreferenceEQ applies the EQ predicate on the "CentrePreference" field.
func CentrePreferenceEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCentrePreference, v))
}

// CentrePreferenceNEQ applies the NEQ predicate on the "CentrePreference" field.
func CentrePreferenceNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCentrePreference, v))
}

// CentrePreferenceIn applies the In predicate on the "CentrePreference" field.
func CentrePreferenceIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCentrePreference, vs...))
}

// CentrePreferenceNotIn applies the NotIn predicate on the "CentrePreference" field.
func CentrePreferenceNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCentrePreference, vs...))
}

// CentrePreferenceGT applies the GT predicate on the "CentrePreference" field.
func CentrePreferenceGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCentrePreference, v))
}

// CentrePreferenceGTE applies the GTE predicate on the "CentrePreference" field.
func CentrePreferenceGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCentrePreference, v))
}

// CentrePreferenceLT applies the LT predicate on the "CentrePreference" field.
func CentrePreferenceLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCentrePreference, v))
}

// CentrePreferenceLTE applies the LTE predicate on the "CentrePreference" field.
func CentrePreferenceLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCentrePreference, v))
}

// CentrePreferenceContains applies the Contains predicate on the "CentrePreference" field.
func CentrePreferenceContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldCentrePreference, v))
}

// CentrePreferenceHasPrefix applies the HasPrefix predicate on the "CentrePreference" field.
func CentrePreferenceHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldCentrePreference, v))
}

// CentrePreferenceHasSuffix applies the HasSuffix predicate on the "CentrePreference" field.
func CentrePreferenceHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldCentrePreference, v))
}

// CentrePreferenceIsNil applies the IsNil predicate on the "CentrePreference" field.
func CentrePreferenceIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCentrePreference))
}

// CentrePreferenceNotNil applies the NotNil predicate on the "CentrePreference" field.
func CentrePreferenceNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCentrePreference))
}

// CentrePreferenceEqualFold applies the EqualFold predicate on the "CentrePreference" field.
func CentrePreferenceEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldCentrePreference, v))
}

// CentrePreferenceContainsFold applies the ContainsFold predicate on the "CentrePreference" field.
func CentrePreferenceContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldCentrePreference, v))
}

// SignatureEQ applies the EQ predicate on the "Signature" field.
func SignatureEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldSignature, v))
}

// SignatureNEQ applies the NEQ predicate on the "Signature" field.
func SignatureNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldSignature, v))
}

// SignatureIn applies the In predicate on the "Signature" field.
func SignatureIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldSignature, vs...))
}

// SignatureNotIn applies the NotIn predicate on the "Signature" field.
func SignatureNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldSignature, vs...))
}

// SignatureGT applies the GT predicate on the "Signature" field.
func SignatureGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldSignature, v))
}

// SignatureGTE applies the GTE predicate on the "Signature" field.
func SignatureGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldSignature, v))
}

// SignatureLT applies the LT predicate on the "Signature" field.
func SignatureLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldSignature, v))
}

// SignatureLTE applies the LTE predicate on the "Signature" field.
func SignatureLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldSignature, v))
}

// SignatureContains applies the Contains predicate on the "Signature" field.
func SignatureContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldSignature, v))
}

// SignatureHasPrefix applies the HasPrefix predicate on the "Signature" field.
func SignatureHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldSignature, v))
}

// SignatureHasSuffix applies the HasSuffix predicate on the "Signature" field.
func SignatureHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldSignature, v))
}

// SignatureIsNil applies the IsNil predicate on the "Signature" field.
func SignatureIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldSignature))
}

// SignatureNotNil applies the NotNil predicate on the "Signature" field.
func SignatureNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldSignature))
}

// SignatureEqualFold applies the EqualFold predicate on the "Signature" field.
func SignatureEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldSignature, v))
}

// SignatureContainsFold applies the ContainsFold predicate on the "Signature" field.
func SignatureContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldSignature, v))
}

// PhotoEQ applies the EQ predicate on the "Photo" field.
func PhotoEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldPhoto, v))
}

// PhotoNEQ applies the NEQ predicate on the "Photo" field.
func PhotoNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldPhoto, v))
}

// PhotoIn applies the In predicate on the "Photo" field.
func PhotoIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldPhoto, vs...))
}

// PhotoNotIn applies the NotIn predicate on the "Photo" field.
func PhotoNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldPhoto, vs...))
}

// PhotoGT applies the GT predicate on the "Photo" field.
func PhotoGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldPhoto, v))
}

// PhotoGTE applies the GTE predicate on the "Photo" field.
func PhotoGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldPhoto, v))
}

// PhotoLT applies the LT predicate on the "Photo" field.
func PhotoLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldPhoto, v))
}

// PhotoLTE applies the LTE predicate on the "Photo" field.
func PhotoLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldPhoto, v))
}

// PhotoContains applies the Contains predicate on the "Photo" field.
func PhotoContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldPhoto, v))
}

// PhotoHasPrefix applies the HasPrefix predicate on the "Photo" field.
func PhotoHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldPhoto, v))
}

// PhotoHasSuffix applies the HasSuffix predicate on the "Photo" field.
func PhotoHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldPhoto, v))
}

// PhotoIsNil applies the IsNil predicate on the "Photo" field.
func PhotoIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldPhoto))
}

// PhotoNotNil applies the NotNil predicate on the "Photo" field.
func PhotoNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldPhoto))
}

// PhotoEqualFold applies the EqualFold predicate on the "Photo" field.
func PhotoEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldPhoto, v))
}

// PhotoContainsFold applies the ContainsFold predicate on the "Photo" field.
func PhotoContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldPhoto, v))
}

// CandidatePhotoEQ applies the EQ predicate on the "CandidatePhoto" field.
func CandidatePhotoEQ(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCandidatePhoto, v))
}

// CandidatePhotoNEQ applies the NEQ predicate on the "CandidatePhoto" field.
func CandidatePhotoNEQ(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCandidatePhoto, v))
}

// CandidatePhotoIn applies the In predicate on the "CandidatePhoto" field.
func CandidatePhotoIn(vs ...[]byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCandidatePhoto, vs...))
}

// CandidatePhotoNotIn applies the NotIn predicate on the "CandidatePhoto" field.
func CandidatePhotoNotIn(vs ...[]byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCandidatePhoto, vs...))
}

// CandidatePhotoGT applies the GT predicate on the "CandidatePhoto" field.
func CandidatePhotoGT(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCandidatePhoto, v))
}

// CandidatePhotoGTE applies the GTE predicate on the "CandidatePhoto" field.
func CandidatePhotoGTE(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCandidatePhoto, v))
}

// CandidatePhotoLT applies the LT predicate on the "CandidatePhoto" field.
func CandidatePhotoLT(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCandidatePhoto, v))
}

// CandidatePhotoLTE applies the LTE predicate on the "CandidatePhoto" field.
func CandidatePhotoLTE(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCandidatePhoto, v))
}

// CandidatePhotoIsNil applies the IsNil predicate on the "CandidatePhoto" field.
func CandidatePhotoIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCandidatePhoto))
}

// CandidatePhotoNotNil applies the NotNil predicate on the "CandidatePhoto" field.
func CandidatePhotoNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCandidatePhoto))
}

// CandidateSignatureEQ applies the EQ predicate on the "CandidateSignature" field.
func CandidateSignatureEQ(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCandidateSignature, v))
}

// CandidateSignatureNEQ applies the NEQ predicate on the "CandidateSignature" field.
func CandidateSignatureNEQ(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCandidateSignature, v))
}

// CandidateSignatureIn applies the In predicate on the "CandidateSignature" field.
func CandidateSignatureIn(vs ...[]byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCandidateSignature, vs...))
}

// CandidateSignatureNotIn applies the NotIn predicate on the "CandidateSignature" field.
func CandidateSignatureNotIn(vs ...[]byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCandidateSignature, vs...))
}

// CandidateSignatureGT applies the GT predicate on the "CandidateSignature" field.
func CandidateSignatureGT(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCandidateSignature, v))
}

// CandidateSignatureGTE applies the GTE predicate on the "CandidateSignature" field.
func CandidateSignatureGTE(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCandidateSignature, v))
}

// CandidateSignatureLT applies the LT predicate on the "CandidateSignature" field.
func CandidateSignatureLT(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCandidateSignature, v))
}

// CandidateSignatureLTE applies the LTE predicate on the "CandidateSignature" field.
func CandidateSignatureLTE(v []byte) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCandidateSignature, v))
}

// CandidateSignatureIsNil applies the IsNil predicate on the "CandidateSignature" field.
func CandidateSignatureIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCandidateSignature))
}

// CandidateSignatureNotNil applies the NotNil predicate on the "CandidateSignature" field.
func CandidateSignatureNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCandidateSignature))
}

// SignaturePathEQ applies the EQ predicate on the "SignaturePath" field.
func SignaturePathEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldSignaturePath, v))
}

// SignaturePathNEQ applies the NEQ predicate on the "SignaturePath" field.
func SignaturePathNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldSignaturePath, v))
}

// SignaturePathIn applies the In predicate on the "SignaturePath" field.
func SignaturePathIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldSignaturePath, vs...))
}

// SignaturePathNotIn applies the NotIn predicate on the "SignaturePath" field.
func SignaturePathNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldSignaturePath, vs...))
}

// SignaturePathGT applies the GT predicate on the "SignaturePath" field.
func SignaturePathGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldSignaturePath, v))
}

// SignaturePathGTE applies the GTE predicate on the "SignaturePath" field.
func SignaturePathGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldSignaturePath, v))
}

// SignaturePathLT applies the LT predicate on the "SignaturePath" field.
func SignaturePathLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldSignaturePath, v))
}

// SignaturePathLTE applies the LTE predicate on the "SignaturePath" field.
func SignaturePathLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldSignaturePath, v))
}

// SignaturePathContains applies the Contains predicate on the "SignaturePath" field.
func SignaturePathContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldSignaturePath, v))
}

// SignaturePathHasPrefix applies the HasPrefix predicate on the "SignaturePath" field.
func SignaturePathHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldSignaturePath, v))
}

// SignaturePathHasSuffix applies the HasSuffix predicate on the "SignaturePath" field.
func SignaturePathHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldSignaturePath, v))
}

// SignaturePathIsNil applies the IsNil predicate on the "SignaturePath" field.
func SignaturePathIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldSignaturePath))
}

// SignaturePathNotNil applies the NotNil predicate on the "SignaturePath" field.
func SignaturePathNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldSignaturePath))
}

// SignaturePathEqualFold applies the EqualFold predicate on the "SignaturePath" field.
func SignaturePathEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldSignaturePath, v))
}

// SignaturePathContainsFold applies the ContainsFold predicate on the "SignaturePath" field.
func SignaturePathContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldSignaturePath, v))
}

// PhotoPathEQ applies the EQ predicate on the "PhotoPath" field.
func PhotoPathEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldPhotoPath, v))
}

// PhotoPathNEQ applies the NEQ predicate on the "PhotoPath" field.
func PhotoPathNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldPhotoPath, v))
}

// PhotoPathIn applies the In predicate on the "PhotoPath" field.
func PhotoPathIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldPhotoPath, vs...))
}

// PhotoPathNotIn applies the NotIn predicate on the "PhotoPath" field.
func PhotoPathNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldPhotoPath, vs...))
}

// PhotoPathGT applies the GT predicate on the "PhotoPath" field.
func PhotoPathGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldPhotoPath, v))
}

// PhotoPathGTE applies the GTE predicate on the "PhotoPath" field.
func PhotoPathGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldPhotoPath, v))
}

// PhotoPathLT applies the LT predicate on the "PhotoPath" field.
func PhotoPathLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldPhotoPath, v))
}

// PhotoPathLTE applies the LTE predicate on the "PhotoPath" field.
func PhotoPathLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldPhotoPath, v))
}

// PhotoPathContains applies the Contains predicate on the "PhotoPath" field.
func PhotoPathContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldPhotoPath, v))
}

// PhotoPathHasPrefix applies the HasPrefix predicate on the "PhotoPath" field.
func PhotoPathHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldPhotoPath, v))
}

// PhotoPathHasSuffix applies the HasSuffix predicate on the "PhotoPath" field.
func PhotoPathHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldPhotoPath, v))
}

// PhotoPathIsNil applies the IsNil predicate on the "PhotoPath" field.
func PhotoPathIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldPhotoPath))
}

// PhotoPathNotNil applies the NotNil predicate on the "PhotoPath" field.
func PhotoPathNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldPhotoPath))
}

// PhotoPathEqualFold applies the EqualFold predicate on the "PhotoPath" field.
func PhotoPathEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldPhotoPath, v))
}

// PhotoPathContainsFold applies the ContainsFold predicate on the "PhotoPath" field.
func PhotoPathContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldPhotoPath, v))
}

// TempHallTicketEQ applies the EQ predicate on the "TempHallTicket" field.
func TempHallTicketEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldTempHallTicket, v))
}

// TempHallTicketNEQ applies the NEQ predicate on the "TempHallTicket" field.
func TempHallTicketNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldTempHallTicket, v))
}

// TempHallTicketIn applies the In predicate on the "TempHallTicket" field.
func TempHallTicketIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldTempHallTicket, vs...))
}

// TempHallTicketNotIn applies the NotIn predicate on the "TempHallTicket" field.
func TempHallTicketNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldTempHallTicket, vs...))
}

// TempHallTicketGT applies the GT predicate on the "TempHallTicket" field.
func TempHallTicketGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldTempHallTicket, v))
}

// TempHallTicketGTE applies the GTE predicate on the "TempHallTicket" field.
func TempHallTicketGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldTempHallTicket, v))
}

// TempHallTicketLT applies the LT predicate on the "TempHallTicket" field.
func TempHallTicketLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldTempHallTicket, v))
}

// TempHallTicketLTE applies the LTE predicate on the "TempHallTicket" field.
func TempHallTicketLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldTempHallTicket, v))
}

// TempHallTicketContains applies the Contains predicate on the "TempHallTicket" field.
func TempHallTicketContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldTempHallTicket, v))
}

// TempHallTicketHasPrefix applies the HasPrefix predicate on the "TempHallTicket" field.
func TempHallTicketHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldTempHallTicket, v))
}

// TempHallTicketHasSuffix applies the HasSuffix predicate on the "TempHallTicket" field.
func TempHallTicketHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldTempHallTicket, v))
}

// TempHallTicketIsNil applies the IsNil predicate on the "TempHallTicket" field.
func TempHallTicketIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldTempHallTicket))
}

// TempHallTicketNotNil applies the NotNil predicate on the "TempHallTicket" field.
func TempHallTicketNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldTempHallTicket))
}

// TempHallTicketEqualFold applies the EqualFold predicate on the "TempHallTicket" field.
func TempHallTicketEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldTempHallTicket, v))
}

// TempHallTicketContainsFold applies the ContainsFold predicate on the "TempHallTicket" field.
func TempHallTicketContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldTempHallTicket, v))
}

// CandidateRemarksEQ applies the EQ predicate on the "CandidateRemarks" field.
func CandidateRemarksEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCandidateRemarks, v))
}

// CandidateRemarksNEQ applies the NEQ predicate on the "CandidateRemarks" field.
func CandidateRemarksNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCandidateRemarks, v))
}

// CandidateRemarksIn applies the In predicate on the "CandidateRemarks" field.
func CandidateRemarksIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCandidateRemarks, vs...))
}

// CandidateRemarksNotIn applies the NotIn predicate on the "CandidateRemarks" field.
func CandidateRemarksNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCandidateRemarks, vs...))
}

// CandidateRemarksGT applies the GT predicate on the "CandidateRemarks" field.
func CandidateRemarksGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCandidateRemarks, v))
}

// CandidateRemarksGTE applies the GTE predicate on the "CandidateRemarks" field.
func CandidateRemarksGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCandidateRemarks, v))
}

// CandidateRemarksLT applies the LT predicate on the "CandidateRemarks" field.
func CandidateRemarksLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCandidateRemarks, v))
}

// CandidateRemarksLTE applies the LTE predicate on the "CandidateRemarks" field.
func CandidateRemarksLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCandidateRemarks, v))
}

// CandidateRemarksContains applies the Contains predicate on the "CandidateRemarks" field.
func CandidateRemarksContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldCandidateRemarks, v))
}

// CandidateRemarksHasPrefix applies the HasPrefix predicate on the "CandidateRemarks" field.
func CandidateRemarksHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldCandidateRemarks, v))
}

// CandidateRemarksHasSuffix applies the HasSuffix predicate on the "CandidateRemarks" field.
func CandidateRemarksHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldCandidateRemarks, v))
}

// CandidateRemarksIsNil applies the IsNil predicate on the "CandidateRemarks" field.
func CandidateRemarksIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCandidateRemarks))
}

// CandidateRemarksNotNil applies the NotNil predicate on the "CandidateRemarks" field.
func CandidateRemarksNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCandidateRemarks))
}

// CandidateRemarksEqualFold applies the EqualFold predicate on the "CandidateRemarks" field.
func CandidateRemarksEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldCandidateRemarks, v))
}

// CandidateRemarksContainsFold applies the ContainsFold predicate on the "CandidateRemarks" field.
func CandidateRemarksContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldCandidateRemarks, v))
}

// VAGeneralRemarksEQ applies the EQ predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVAGeneralRemarks, v))
}

// VAGeneralRemarksNEQ applies the NEQ predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldVAGeneralRemarks, v))
}

// VAGeneralRemarksIn applies the In predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldVAGeneralRemarks, vs...))
}

// VAGeneralRemarksNotIn applies the NotIn predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldVAGeneralRemarks, vs...))
}

// VAGeneralRemarksGT applies the GT predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldVAGeneralRemarks, v))
}

// VAGeneralRemarksGTE applies the GTE predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldVAGeneralRemarks, v))
}

// VAGeneralRemarksLT applies the LT predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldVAGeneralRemarks, v))
}

// VAGeneralRemarksLTE applies the LTE predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldVAGeneralRemarks, v))
}

// VAGeneralRemarksContains applies the Contains predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldVAGeneralRemarks, v))
}

// VAGeneralRemarksHasPrefix applies the HasPrefix predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldVAGeneralRemarks, v))
}

// VAGeneralRemarksHasSuffix applies the HasSuffix predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldVAGeneralRemarks, v))
}

// VAGeneralRemarksIsNil applies the IsNil predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldVAGeneralRemarks))
}

// VAGeneralRemarksNotNil applies the NotNil predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldVAGeneralRemarks))
}

// VAGeneralRemarksEqualFold applies the EqualFold predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldVAGeneralRemarks, v))
}

// VAGeneralRemarksContainsFold applies the ContainsFold predicate on the "VAGeneralRemarks" field.
func VAGeneralRemarksContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldVAGeneralRemarks, v))
}

// CAGeneralRemarksEQ applies the EQ predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCAGeneralRemarks, v))
}

// CAGeneralRemarksNEQ applies the NEQ predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCAGeneralRemarks, v))
}

// CAGeneralRemarksIn applies the In predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCAGeneralRemarks, vs...))
}

// CAGeneralRemarksNotIn applies the NotIn predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCAGeneralRemarks, vs...))
}

// CAGeneralRemarksGT applies the GT predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCAGeneralRemarks, v))
}

// CAGeneralRemarksGTE applies the GTE predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCAGeneralRemarks, v))
}

// CAGeneralRemarksLT applies the LT predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCAGeneralRemarks, v))
}

// CAGeneralRemarksLTE applies the LTE predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCAGeneralRemarks, v))
}

// CAGeneralRemarksContains applies the Contains predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldCAGeneralRemarks, v))
}

// CAGeneralRemarksHasPrefix applies the HasPrefix predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldCAGeneralRemarks, v))
}

// CAGeneralRemarksHasSuffix applies the HasSuffix predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldCAGeneralRemarks, v))
}

// CAGeneralRemarksIsNil applies the IsNil predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCAGeneralRemarks))
}

// CAGeneralRemarksNotNil applies the NotNil predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCAGeneralRemarks))
}

// CAGeneralRemarksEqualFold applies the EqualFold predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldCAGeneralRemarks, v))
}

// CAGeneralRemarksContainsFold applies the ContainsFold predicate on the "CAGeneralRemarks" field.
func CAGeneralRemarksContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldCAGeneralRemarks, v))
}

// NAGeneralRemarksEQ applies the EQ predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNAGeneralRemarks, v))
}

// NAGeneralRemarksNEQ applies the NEQ predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldNAGeneralRemarks, v))
}

// NAGeneralRemarksIn applies the In predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldNAGeneralRemarks, vs...))
}

// NAGeneralRemarksNotIn applies the NotIn predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldNAGeneralRemarks, vs...))
}

// NAGeneralRemarksGT applies the GT predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldNAGeneralRemarks, v))
}

// NAGeneralRemarksGTE applies the GTE predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldNAGeneralRemarks, v))
}

// NAGeneralRemarksLT applies the LT predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldNAGeneralRemarks, v))
}

// NAGeneralRemarksLTE applies the LTE predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldNAGeneralRemarks, v))
}

// NAGeneralRemarksContains applies the Contains predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldNAGeneralRemarks, v))
}

// NAGeneralRemarksHasPrefix applies the HasPrefix predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldNAGeneralRemarks, v))
}

// NAGeneralRemarksHasSuffix applies the HasSuffix predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldNAGeneralRemarks, v))
}

// NAGeneralRemarksIsNil applies the IsNil predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldNAGeneralRemarks))
}

// NAGeneralRemarksNotNil applies the NotNil predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldNAGeneralRemarks))
}

// NAGeneralRemarksEqualFold applies the EqualFold predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldNAGeneralRemarks, v))
}

// NAGeneralRemarksContainsFold applies the ContainsFold predicate on the "NAGeneralRemarks" field.
func NAGeneralRemarksContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldNAGeneralRemarks, v))
}

// ApplicationStatusEQ applies the EQ predicate on the "ApplicationStatus" field.
func ApplicationStatusEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldApplicationStatus, v))
}

// ApplicationStatusNEQ applies the NEQ predicate on the "ApplicationStatus" field.
func ApplicationStatusNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldApplicationStatus, v))
}

// ApplicationStatusIn applies the In predicate on the "ApplicationStatus" field.
func ApplicationStatusIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldApplicationStatus, vs...))
}

// ApplicationStatusNotIn applies the NotIn predicate on the "ApplicationStatus" field.
func ApplicationStatusNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldApplicationStatus, vs...))
}

// ApplicationStatusGT applies the GT predicate on the "ApplicationStatus" field.
func ApplicationStatusGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldApplicationStatus, v))
}

// ApplicationStatusGTE applies the GTE predicate on the "ApplicationStatus" field.
func ApplicationStatusGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldApplicationStatus, v))
}

// ApplicationStatusLT applies the LT predicate on the "ApplicationStatus" field.
func ApplicationStatusLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldApplicationStatus, v))
}

// ApplicationStatusLTE applies the LTE predicate on the "ApplicationStatus" field.
func ApplicationStatusLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldApplicationStatus, v))
}

// ApplicationStatusContains applies the Contains predicate on the "ApplicationStatus" field.
func ApplicationStatusContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldApplicationStatus, v))
}

// ApplicationStatusHasPrefix applies the HasPrefix predicate on the "ApplicationStatus" field.
func ApplicationStatusHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldApplicationStatus, v))
}

// ApplicationStatusHasSuffix applies the HasSuffix predicate on the "ApplicationStatus" field.
func ApplicationStatusHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldApplicationStatus, v))
}

// ApplicationStatusIsNil applies the IsNil predicate on the "ApplicationStatus" field.
func ApplicationStatusIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldApplicationStatus))
}

// ApplicationStatusNotNil applies the NotNil predicate on the "ApplicationStatus" field.
func ApplicationStatusNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldApplicationStatus))
}

// ApplicationStatusEqualFold applies the EqualFold predicate on the "ApplicationStatus" field.
func ApplicationStatusEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldApplicationStatus, v))
}

// ApplicationStatusContainsFold applies the ContainsFold predicate on the "ApplicationStatus" field.
func ApplicationStatusContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldApplicationStatus, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "Status" field.
func StatusIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "Status" field.
func StatusNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldStatus, v))
}

// VAUserIdEQ applies the EQ predicate on the "VA_UserId" field.
func VAUserIdEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVAUserId, v))
}

// VAUserIdNEQ applies the NEQ predicate on the "VA_UserId" field.
func VAUserIdNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldVAUserId, v))
}

// VAUserIdIn applies the In predicate on the "VA_UserId" field.
func VAUserIdIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldVAUserId, vs...))
}

// VAUserIdNotIn applies the NotIn predicate on the "VA_UserId" field.
func VAUserIdNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldVAUserId, vs...))
}

// VAUserIdGT applies the GT predicate on the "VA_UserId" field.
func VAUserIdGT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldVAUserId, v))
}

// VAUserIdGTE applies the GTE predicate on the "VA_UserId" field.
func VAUserIdGTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldVAUserId, v))
}

// VAUserIdLT applies the LT predicate on the "VA_UserId" field.
func VAUserIdLT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldVAUserId, v))
}

// VAUserIdLTE applies the LTE predicate on the "VA_UserId" field.
func VAUserIdLTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldVAUserId, v))
}

// VAUserIdIsNil applies the IsNil predicate on the "VA_UserId" field.
func VAUserIdIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldVAUserId))
}

// VAUserIdNotNil applies the NotNil predicate on the "VA_UserId" field.
func VAUserIdNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldVAUserId))
}

// VAUserNameEQ applies the EQ predicate on the "VA_UserName" field.
func VAUserNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVAUserName, v))
}

// VAUserNameNEQ applies the NEQ predicate on the "VA_UserName" field.
func VAUserNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldVAUserName, v))
}

// VAUserNameIn applies the In predicate on the "VA_UserName" field.
func VAUserNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldVAUserName, vs...))
}

// VAUserNameNotIn applies the NotIn predicate on the "VA_UserName" field.
func VAUserNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldVAUserName, vs...))
}

// VAUserNameGT applies the GT predicate on the "VA_UserName" field.
func VAUserNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldVAUserName, v))
}

// VAUserNameGTE applies the GTE predicate on the "VA_UserName" field.
func VAUserNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldVAUserName, v))
}

// VAUserNameLT applies the LT predicate on the "VA_UserName" field.
func VAUserNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldVAUserName, v))
}

// VAUserNameLTE applies the LTE predicate on the "VA_UserName" field.
func VAUserNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldVAUserName, v))
}

// VAUserNameContains applies the Contains predicate on the "VA_UserName" field.
func VAUserNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldVAUserName, v))
}

// VAUserNameHasPrefix applies the HasPrefix predicate on the "VA_UserName" field.
func VAUserNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldVAUserName, v))
}

// VAUserNameHasSuffix applies the HasSuffix predicate on the "VA_UserName" field.
func VAUserNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldVAUserName, v))
}

// VAUserNameIsNil applies the IsNil predicate on the "VA_UserName" field.
func VAUserNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldVAUserName))
}

// VAUserNameNotNil applies the NotNil predicate on the "VA_UserName" field.
func VAUserNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldVAUserName))
}

// VAUserNameEqualFold applies the EqualFold predicate on the "VA_UserName" field.
func VAUserNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldVAUserName, v))
}

// VAUserNameContainsFold applies the ContainsFold predicate on the "VA_UserName" field.
func VAUserNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldVAUserName, v))
}

// VAEmployeeIDEQ applies the EQ predicate on the "VA_EmployeeID" field.
func VAEmployeeIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVAEmployeeID, v))
}

// VAEmployeeIDNEQ applies the NEQ predicate on the "VA_EmployeeID" field.
func VAEmployeeIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldVAEmployeeID, v))
}

// VAEmployeeIDIn applies the In predicate on the "VA_EmployeeID" field.
func VAEmployeeIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldVAEmployeeID, vs...))
}

// VAEmployeeIDNotIn applies the NotIn predicate on the "VA_EmployeeID" field.
func VAEmployeeIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldVAEmployeeID, vs...))
}

// VAEmployeeIDGT applies the GT predicate on the "VA_EmployeeID" field.
func VAEmployeeIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldVAEmployeeID, v))
}

// VAEmployeeIDGTE applies the GTE predicate on the "VA_EmployeeID" field.
func VAEmployeeIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldVAEmployeeID, v))
}

// VAEmployeeIDLT applies the LT predicate on the "VA_EmployeeID" field.
func VAEmployeeIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldVAEmployeeID, v))
}

// VAEmployeeIDLTE applies the LTE predicate on the "VA_EmployeeID" field.
func VAEmployeeIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldVAEmployeeID, v))
}

// VAEmployeeIDContains applies the Contains predicate on the "VA_EmployeeID" field.
func VAEmployeeIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldVAEmployeeID, v))
}

// VAEmployeeIDHasPrefix applies the HasPrefix predicate on the "VA_EmployeeID" field.
func VAEmployeeIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldVAEmployeeID, v))
}

// VAEmployeeIDHasSuffix applies the HasSuffix predicate on the "VA_EmployeeID" field.
func VAEmployeeIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldVAEmployeeID, v))
}

// VAEmployeeIDIsNil applies the IsNil predicate on the "VA_EmployeeID" field.
func VAEmployeeIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldVAEmployeeID))
}

// VAEmployeeIDNotNil applies the NotNil predicate on the "VA_EmployeeID" field.
func VAEmployeeIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldVAEmployeeID))
}

// VAEmployeeIDEqualFold applies the EqualFold predicate on the "VA_EmployeeID" field.
func VAEmployeeIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldVAEmployeeID, v))
}

// VAEmployeeIDContainsFold applies the ContainsFold predicate on the "VA_EmployeeID" field.
func VAEmployeeIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldVAEmployeeID, v))
}

// VAEmployeeDesignationEQ applies the EQ predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVAEmployeeDesignation, v))
}

// VAEmployeeDesignationNEQ applies the NEQ predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldVAEmployeeDesignation, v))
}

// VAEmployeeDesignationIn applies the In predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldVAEmployeeDesignation, vs...))
}

// VAEmployeeDesignationNotIn applies the NotIn predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldVAEmployeeDesignation, vs...))
}

// VAEmployeeDesignationGT applies the GT predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldVAEmployeeDesignation, v))
}

// VAEmployeeDesignationGTE applies the GTE predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldVAEmployeeDesignation, v))
}

// VAEmployeeDesignationLT applies the LT predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldVAEmployeeDesignation, v))
}

// VAEmployeeDesignationLTE applies the LTE predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldVAEmployeeDesignation, v))
}

// VAEmployeeDesignationContains applies the Contains predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldVAEmployeeDesignation, v))
}

// VAEmployeeDesignationHasPrefix applies the HasPrefix predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldVAEmployeeDesignation, v))
}

// VAEmployeeDesignationHasSuffix applies the HasSuffix predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldVAEmployeeDesignation, v))
}

// VAEmployeeDesignationIsNil applies the IsNil predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldVAEmployeeDesignation))
}

// VAEmployeeDesignationNotNil applies the NotNil predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldVAEmployeeDesignation))
}

// VAEmployeeDesignationEqualFold applies the EqualFold predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldVAEmployeeDesignation, v))
}

// VAEmployeeDesignationContainsFold applies the ContainsFold predicate on the "VA_EmployeeDesignation" field.
func VAEmployeeDesignationContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldVAEmployeeDesignation, v))
}

// VARemarksEQ applies the EQ predicate on the "VA_Remarks" field.
func VARemarksEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVARemarks, v))
}

// VARemarksNEQ applies the NEQ predicate on the "VA_Remarks" field.
func VARemarksNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldVARemarks, v))
}

// VARemarksIn applies the In predicate on the "VA_Remarks" field.
func VARemarksIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldVARemarks, vs...))
}

// VARemarksNotIn applies the NotIn predicate on the "VA_Remarks" field.
func VARemarksNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldVARemarks, vs...))
}

// VARemarksGT applies the GT predicate on the "VA_Remarks" field.
func VARemarksGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldVARemarks, v))
}

// VARemarksGTE applies the GTE predicate on the "VA_Remarks" field.
func VARemarksGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldVARemarks, v))
}

// VARemarksLT applies the LT predicate on the "VA_Remarks" field.
func VARemarksLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldVARemarks, v))
}

// VARemarksLTE applies the LTE predicate on the "VA_Remarks" field.
func VARemarksLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldVARemarks, v))
}

// VARemarksContains applies the Contains predicate on the "VA_Remarks" field.
func VARemarksContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldVARemarks, v))
}

// VARemarksHasPrefix applies the HasPrefix predicate on the "VA_Remarks" field.
func VARemarksHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldVARemarks, v))
}

// VARemarksHasSuffix applies the HasSuffix predicate on the "VA_Remarks" field.
func VARemarksHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldVARemarks, v))
}

// VARemarksIsNil applies the IsNil predicate on the "VA_Remarks" field.
func VARemarksIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldVARemarks))
}

// VARemarksNotNil applies the NotNil predicate on the "VA_Remarks" field.
func VARemarksNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldVARemarks))
}

// VARemarksEqualFold applies the EqualFold predicate on the "VA_Remarks" field.
func VARemarksEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldVARemarks, v))
}

// VARemarksContainsFold applies the ContainsFold predicate on the "VA_Remarks" field.
func VARemarksContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldVARemarks, v))
}

// VADateEQ applies the EQ predicate on the "VA_Date" field.
func VADateEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldVADate, v))
}

// VADateNEQ applies the NEQ predicate on the "VA_Date" field.
func VADateNEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldVADate, v))
}

// VADateIn applies the In predicate on the "VA_Date" field.
func VADateIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldVADate, vs...))
}

// VADateNotIn applies the NotIn predicate on the "VA_Date" field.
func VADateNotIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldVADate, vs...))
}

// VADateGT applies the GT predicate on the "VA_Date" field.
func VADateGT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldVADate, v))
}

// VADateGTE applies the GTE predicate on the "VA_Date" field.
func VADateGTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldVADate, v))
}

// VADateLT applies the LT predicate on the "VA_Date" field.
func VADateLT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldVADate, v))
}

// VADateLTE applies the LTE predicate on the "VA_Date" field.
func VADateLTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldVADate, v))
}

// VADateIsNil applies the IsNil predicate on the "VA_Date" field.
func VADateIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldVADate))
}

// VADateNotNil applies the NotNil predicate on the "VA_Date" field.
func VADateNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldVADate))
}

// CAUserIdEQ applies the EQ predicate on the "CA_UserId" field.
func CAUserIdEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCAUserId, v))
}

// CAUserIdNEQ applies the NEQ predicate on the "CA_UserId" field.
func CAUserIdNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCAUserId, v))
}

// CAUserIdIn applies the In predicate on the "CA_UserId" field.
func CAUserIdIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCAUserId, vs...))
}

// CAUserIdNotIn applies the NotIn predicate on the "CA_UserId" field.
func CAUserIdNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCAUserId, vs...))
}

// CAUserIdGT applies the GT predicate on the "CA_UserId" field.
func CAUserIdGT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCAUserId, v))
}

// CAUserIdGTE applies the GTE predicate on the "CA_UserId" field.
func CAUserIdGTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCAUserId, v))
}

// CAUserIdLT applies the LT predicate on the "CA_UserId" field.
func CAUserIdLT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCAUserId, v))
}

// CAUserIdLTE applies the LTE predicate on the "CA_UserId" field.
func CAUserIdLTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCAUserId, v))
}

// CAUserIdIsNil applies the IsNil predicate on the "CA_UserId" field.
func CAUserIdIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCAUserId))
}

// CAUserIdNotNil applies the NotNil predicate on the "CA_UserId" field.
func CAUserIdNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCAUserId))
}

// CAUserNameEQ applies the EQ predicate on the "CA_UserName" field.
func CAUserNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCAUserName, v))
}

// CAUserNameNEQ applies the NEQ predicate on the "CA_UserName" field.
func CAUserNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCAUserName, v))
}

// CAUserNameIn applies the In predicate on the "CA_UserName" field.
func CAUserNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCAUserName, vs...))
}

// CAUserNameNotIn applies the NotIn predicate on the "CA_UserName" field.
func CAUserNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCAUserName, vs...))
}

// CAUserNameGT applies the GT predicate on the "CA_UserName" field.
func CAUserNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCAUserName, v))
}

// CAUserNameGTE applies the GTE predicate on the "CA_UserName" field.
func CAUserNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCAUserName, v))
}

// CAUserNameLT applies the LT predicate on the "CA_UserName" field.
func CAUserNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCAUserName, v))
}

// CAUserNameLTE applies the LTE predicate on the "CA_UserName" field.
func CAUserNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCAUserName, v))
}

// CAUserNameContains applies the Contains predicate on the "CA_UserName" field.
func CAUserNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldCAUserName, v))
}

// CAUserNameHasPrefix applies the HasPrefix predicate on the "CA_UserName" field.
func CAUserNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldCAUserName, v))
}

// CAUserNameHasSuffix applies the HasSuffix predicate on the "CA_UserName" field.
func CAUserNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldCAUserName, v))
}

// CAUserNameIsNil applies the IsNil predicate on the "CA_UserName" field.
func CAUserNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCAUserName))
}

// CAUserNameNotNil applies the NotNil predicate on the "CA_UserName" field.
func CAUserNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCAUserName))
}

// CAUserNameEqualFold applies the EqualFold predicate on the "CA_UserName" field.
func CAUserNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldCAUserName, v))
}

// CAUserNameContainsFold applies the ContainsFold predicate on the "CA_UserName" field.
func CAUserNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldCAUserName, v))
}

// CAEmployeeIDEQ applies the EQ predicate on the "CA_EmployeeID" field.
func CAEmployeeIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCAEmployeeID, v))
}

// CAEmployeeIDNEQ applies the NEQ predicate on the "CA_EmployeeID" field.
func CAEmployeeIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCAEmployeeID, v))
}

// CAEmployeeIDIn applies the In predicate on the "CA_EmployeeID" field.
func CAEmployeeIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCAEmployeeID, vs...))
}

// CAEmployeeIDNotIn applies the NotIn predicate on the "CA_EmployeeID" field.
func CAEmployeeIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCAEmployeeID, vs...))
}

// CAEmployeeIDGT applies the GT predicate on the "CA_EmployeeID" field.
func CAEmployeeIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCAEmployeeID, v))
}

// CAEmployeeIDGTE applies the GTE predicate on the "CA_EmployeeID" field.
func CAEmployeeIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCAEmployeeID, v))
}

// CAEmployeeIDLT applies the LT predicate on the "CA_EmployeeID" field.
func CAEmployeeIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCAEmployeeID, v))
}

// CAEmployeeIDLTE applies the LTE predicate on the "CA_EmployeeID" field.
func CAEmployeeIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCAEmployeeID, v))
}

// CAEmployeeIDContains applies the Contains predicate on the "CA_EmployeeID" field.
func CAEmployeeIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldCAEmployeeID, v))
}

// CAEmployeeIDHasPrefix applies the HasPrefix predicate on the "CA_EmployeeID" field.
func CAEmployeeIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldCAEmployeeID, v))
}

// CAEmployeeIDHasSuffix applies the HasSuffix predicate on the "CA_EmployeeID" field.
func CAEmployeeIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldCAEmployeeID, v))
}

// CAEmployeeIDIsNil applies the IsNil predicate on the "CA_EmployeeID" field.
func CAEmployeeIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCAEmployeeID))
}

// CAEmployeeIDNotNil applies the NotNil predicate on the "CA_EmployeeID" field.
func CAEmployeeIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCAEmployeeID))
}

// CAEmployeeIDEqualFold applies the EqualFold predicate on the "CA_EmployeeID" field.
func CAEmployeeIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldCAEmployeeID, v))
}

// CAEmployeeIDContainsFold applies the ContainsFold predicate on the "CA_EmployeeID" field.
func CAEmployeeIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldCAEmployeeID, v))
}

// CAEmployeeDesignationEQ applies the EQ predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCAEmployeeDesignation, v))
}

// CAEmployeeDesignationNEQ applies the NEQ predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCAEmployeeDesignation, v))
}

// CAEmployeeDesignationIn applies the In predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCAEmployeeDesignation, vs...))
}

// CAEmployeeDesignationNotIn applies the NotIn predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCAEmployeeDesignation, vs...))
}

// CAEmployeeDesignationGT applies the GT predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCAEmployeeDesignation, v))
}

// CAEmployeeDesignationGTE applies the GTE predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCAEmployeeDesignation, v))
}

// CAEmployeeDesignationLT applies the LT predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCAEmployeeDesignation, v))
}

// CAEmployeeDesignationLTE applies the LTE predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCAEmployeeDesignation, v))
}

// CAEmployeeDesignationContains applies the Contains predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldCAEmployeeDesignation, v))
}

// CAEmployeeDesignationHasPrefix applies the HasPrefix predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldCAEmployeeDesignation, v))
}

// CAEmployeeDesignationHasSuffix applies the HasSuffix predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldCAEmployeeDesignation, v))
}

// CAEmployeeDesignationIsNil applies the IsNil predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCAEmployeeDesignation))
}

// CAEmployeeDesignationNotNil applies the NotNil predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCAEmployeeDesignation))
}

// CAEmployeeDesignationEqualFold applies the EqualFold predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldCAEmployeeDesignation, v))
}

// CAEmployeeDesignationContainsFold applies the ContainsFold predicate on the "CA_EmployeeDesignation" field.
func CAEmployeeDesignationContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldCAEmployeeDesignation, v))
}

// CARemarksEQ applies the EQ predicate on the "CA_Remarks" field.
func CARemarksEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCARemarks, v))
}

// CARemarksNEQ applies the NEQ predicate on the "CA_Remarks" field.
func CARemarksNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCARemarks, v))
}

// CARemarksIn applies the In predicate on the "CA_Remarks" field.
func CARemarksIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCARemarks, vs...))
}

// CARemarksNotIn applies the NotIn predicate on the "CA_Remarks" field.
func CARemarksNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCARemarks, vs...))
}

// CARemarksGT applies the GT predicate on the "CA_Remarks" field.
func CARemarksGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCARemarks, v))
}

// CARemarksGTE applies the GTE predicate on the "CA_Remarks" field.
func CARemarksGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCARemarks, v))
}

// CARemarksLT applies the LT predicate on the "CA_Remarks" field.
func CARemarksLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCARemarks, v))
}

// CARemarksLTE applies the LTE predicate on the "CA_Remarks" field.
func CARemarksLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCARemarks, v))
}

// CARemarksContains applies the Contains predicate on the "CA_Remarks" field.
func CARemarksContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldCARemarks, v))
}

// CARemarksHasPrefix applies the HasPrefix predicate on the "CA_Remarks" field.
func CARemarksHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldCARemarks, v))
}

// CARemarksHasSuffix applies the HasSuffix predicate on the "CA_Remarks" field.
func CARemarksHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldCARemarks, v))
}

// CARemarksIsNil applies the IsNil predicate on the "CA_Remarks" field.
func CARemarksIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCARemarks))
}

// CARemarksNotNil applies the NotNil predicate on the "CA_Remarks" field.
func CARemarksNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCARemarks))
}

// CARemarksEqualFold applies the EqualFold predicate on the "CA_Remarks" field.
func CARemarksEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldCARemarks, v))
}

// CARemarksContainsFold applies the ContainsFold predicate on the "CA_Remarks" field.
func CARemarksContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldCARemarks, v))
}

// CADateEQ applies the EQ predicate on the "CA_Date" field.
func CADateEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCADate, v))
}

// CADateNEQ applies the NEQ predicate on the "CA_Date" field.
func CADateNEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCADate, v))
}

// CADateIn applies the In predicate on the "CA_Date" field.
func CADateIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCADate, vs...))
}

// CADateNotIn applies the NotIn predicate on the "CA_Date" field.
func CADateNotIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCADate, vs...))
}

// CADateGT applies the GT predicate on the "CA_Date" field.
func CADateGT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCADate, v))
}

// CADateGTE applies the GTE predicate on the "CA_Date" field.
func CADateGTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCADate, v))
}

// CADateLT applies the LT predicate on the "CA_Date" field.
func CADateLT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCADate, v))
}

// CADateLTE applies the LTE predicate on the "CA_Date" field.
func CADateLTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCADate, v))
}

// CADateIsNil applies the IsNil predicate on the "CA_Date" field.
func CADateIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCADate))
}

// CADateNotNil applies the NotNil predicate on the "CA_Date" field.
func CADateNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCADate))
}

// NAUserIdEQ applies the EQ predicate on the "NA_UserId" field.
func NAUserIdEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNAUserId, v))
}

// NAUserIdNEQ applies the NEQ predicate on the "NA_UserId" field.
func NAUserIdNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldNAUserId, v))
}

// NAUserIdIn applies the In predicate on the "NA_UserId" field.
func NAUserIdIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldNAUserId, vs...))
}

// NAUserIdNotIn applies the NotIn predicate on the "NA_UserId" field.
func NAUserIdNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldNAUserId, vs...))
}

// NAUserIdGT applies the GT predicate on the "NA_UserId" field.
func NAUserIdGT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldNAUserId, v))
}

// NAUserIdGTE applies the GTE predicate on the "NA_UserId" field.
func NAUserIdGTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldNAUserId, v))
}

// NAUserIdLT applies the LT predicate on the "NA_UserId" field.
func NAUserIdLT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldNAUserId, v))
}

// NAUserIdLTE applies the LTE predicate on the "NA_UserId" field.
func NAUserIdLTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldNAUserId, v))
}

// NAUserIdIsNil applies the IsNil predicate on the "NA_UserId" field.
func NAUserIdIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldNAUserId))
}

// NAUserIdNotNil applies the NotNil predicate on the "NA_UserId" field.
func NAUserIdNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldNAUserId))
}

// NAUserNameEQ applies the EQ predicate on the "NA_UserName" field.
func NAUserNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNAUserName, v))
}

// NAUserNameNEQ applies the NEQ predicate on the "NA_UserName" field.
func NAUserNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldNAUserName, v))
}

// NAUserNameIn applies the In predicate on the "NA_UserName" field.
func NAUserNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldNAUserName, vs...))
}

// NAUserNameNotIn applies the NotIn predicate on the "NA_UserName" field.
func NAUserNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldNAUserName, vs...))
}

// NAUserNameGT applies the GT predicate on the "NA_UserName" field.
func NAUserNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldNAUserName, v))
}

// NAUserNameGTE applies the GTE predicate on the "NA_UserName" field.
func NAUserNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldNAUserName, v))
}

// NAUserNameLT applies the LT predicate on the "NA_UserName" field.
func NAUserNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldNAUserName, v))
}

// NAUserNameLTE applies the LTE predicate on the "NA_UserName" field.
func NAUserNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldNAUserName, v))
}

// NAUserNameContains applies the Contains predicate on the "NA_UserName" field.
func NAUserNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldNAUserName, v))
}

// NAUserNameHasPrefix applies the HasPrefix predicate on the "NA_UserName" field.
func NAUserNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldNAUserName, v))
}

// NAUserNameHasSuffix applies the HasSuffix predicate on the "NA_UserName" field.
func NAUserNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldNAUserName, v))
}

// NAUserNameIsNil applies the IsNil predicate on the "NA_UserName" field.
func NAUserNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldNAUserName))
}

// NAUserNameNotNil applies the NotNil predicate on the "NA_UserName" field.
func NAUserNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldNAUserName))
}

// NAUserNameEqualFold applies the EqualFold predicate on the "NA_UserName" field.
func NAUserNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldNAUserName, v))
}

// NAUserNameContainsFold applies the ContainsFold predicate on the "NA_UserName" field.
func NAUserNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldNAUserName, v))
}

// NAEmployeeIDEQ applies the EQ predicate on the "NA_EmployeeID" field.
func NAEmployeeIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNAEmployeeID, v))
}

// NAEmployeeIDNEQ applies the NEQ predicate on the "NA_EmployeeID" field.
func NAEmployeeIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldNAEmployeeID, v))
}

// NAEmployeeIDIn applies the In predicate on the "NA_EmployeeID" field.
func NAEmployeeIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldNAEmployeeID, vs...))
}

// NAEmployeeIDNotIn applies the NotIn predicate on the "NA_EmployeeID" field.
func NAEmployeeIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldNAEmployeeID, vs...))
}

// NAEmployeeIDGT applies the GT predicate on the "NA_EmployeeID" field.
func NAEmployeeIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldNAEmployeeID, v))
}

// NAEmployeeIDGTE applies the GTE predicate on the "NA_EmployeeID" field.
func NAEmployeeIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldNAEmployeeID, v))
}

// NAEmployeeIDLT applies the LT predicate on the "NA_EmployeeID" field.
func NAEmployeeIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldNAEmployeeID, v))
}

// NAEmployeeIDLTE applies the LTE predicate on the "NA_EmployeeID" field.
func NAEmployeeIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldNAEmployeeID, v))
}

// NAEmployeeIDContains applies the Contains predicate on the "NA_EmployeeID" field.
func NAEmployeeIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldNAEmployeeID, v))
}

// NAEmployeeIDHasPrefix applies the HasPrefix predicate on the "NA_EmployeeID" field.
func NAEmployeeIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldNAEmployeeID, v))
}

// NAEmployeeIDHasSuffix applies the HasSuffix predicate on the "NA_EmployeeID" field.
func NAEmployeeIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldNAEmployeeID, v))
}

// NAEmployeeIDIsNil applies the IsNil predicate on the "NA_EmployeeID" field.
func NAEmployeeIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldNAEmployeeID))
}

// NAEmployeeIDNotNil applies the NotNil predicate on the "NA_EmployeeID" field.
func NAEmployeeIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldNAEmployeeID))
}

// NAEmployeeIDEqualFold applies the EqualFold predicate on the "NA_EmployeeID" field.
func NAEmployeeIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldNAEmployeeID, v))
}

// NAEmployeeIDContainsFold applies the ContainsFold predicate on the "NA_EmployeeID" field.
func NAEmployeeIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldNAEmployeeID, v))
}

// NAEmployeeDesignationEQ applies the EQ predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNAEmployeeDesignation, v))
}

// NAEmployeeDesignationNEQ applies the NEQ predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldNAEmployeeDesignation, v))
}

// NAEmployeeDesignationIn applies the In predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldNAEmployeeDesignation, vs...))
}

// NAEmployeeDesignationNotIn applies the NotIn predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldNAEmployeeDesignation, vs...))
}

// NAEmployeeDesignationGT applies the GT predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldNAEmployeeDesignation, v))
}

// NAEmployeeDesignationGTE applies the GTE predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldNAEmployeeDesignation, v))
}

// NAEmployeeDesignationLT applies the LT predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldNAEmployeeDesignation, v))
}

// NAEmployeeDesignationLTE applies the LTE predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldNAEmployeeDesignation, v))
}

// NAEmployeeDesignationContains applies the Contains predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldNAEmployeeDesignation, v))
}

// NAEmployeeDesignationHasPrefix applies the HasPrefix predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldNAEmployeeDesignation, v))
}

// NAEmployeeDesignationHasSuffix applies the HasSuffix predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldNAEmployeeDesignation, v))
}

// NAEmployeeDesignationIsNil applies the IsNil predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldNAEmployeeDesignation))
}

// NAEmployeeDesignationNotNil applies the NotNil predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldNAEmployeeDesignation))
}

// NAEmployeeDesignationEqualFold applies the EqualFold predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldNAEmployeeDesignation, v))
}

// NAEmployeeDesignationContainsFold applies the ContainsFold predicate on the "NA_EmployeeDesignation" field.
func NAEmployeeDesignationContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldNAEmployeeDesignation, v))
}

// NARemarksEQ applies the EQ predicate on the "NA_Remarks" field.
func NARemarksEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNARemarks, v))
}

// NARemarksNEQ applies the NEQ predicate on the "NA_Remarks" field.
func NARemarksNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldNARemarks, v))
}

// NARemarksIn applies the In predicate on the "NA_Remarks" field.
func NARemarksIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldNARemarks, vs...))
}

// NARemarksNotIn applies the NotIn predicate on the "NA_Remarks" field.
func NARemarksNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldNARemarks, vs...))
}

// NARemarksGT applies the GT predicate on the "NA_Remarks" field.
func NARemarksGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldNARemarks, v))
}

// NARemarksGTE applies the GTE predicate on the "NA_Remarks" field.
func NARemarksGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldNARemarks, v))
}

// NARemarksLT applies the LT predicate on the "NA_Remarks" field.
func NARemarksLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldNARemarks, v))
}

// NARemarksLTE applies the LTE predicate on the "NA_Remarks" field.
func NARemarksLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldNARemarks, v))
}

// NARemarksContains applies the Contains predicate on the "NA_Remarks" field.
func NARemarksContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldNARemarks, v))
}

// NARemarksHasPrefix applies the HasPrefix predicate on the "NA_Remarks" field.
func NARemarksHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldNARemarks, v))
}

// NARemarksHasSuffix applies the HasSuffix predicate on the "NA_Remarks" field.
func NARemarksHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldNARemarks, v))
}

// NARemarksIsNil applies the IsNil predicate on the "NA_Remarks" field.
func NARemarksIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldNARemarks))
}

// NARemarksNotNil applies the NotNil predicate on the "NA_Remarks" field.
func NARemarksNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldNARemarks))
}

// NARemarksEqualFold applies the EqualFold predicate on the "NA_Remarks" field.
func NARemarksEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldNARemarks, v))
}

// NARemarksContainsFold applies the ContainsFold predicate on the "NA_Remarks" field.
func NARemarksContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldNARemarks, v))
}

// NADateEQ applies the EQ predicate on the "NA_Date" field.
func NADateEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldNADate, v))
}

// NADateNEQ applies the NEQ predicate on the "NA_Date" field.
func NADateNEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldNADate, v))
}

// NADateIn applies the In predicate on the "NA_Date" field.
func NADateIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldNADate, vs...))
}

// NADateNotIn applies the NotIn predicate on the "NA_Date" field.
func NADateNotIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldNADate, vs...))
}

// NADateGT applies the GT predicate on the "NA_Date" field.
func NADateGT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldNADate, v))
}

// NADateGTE applies the GTE predicate on the "NA_Date" field.
func NADateGTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldNADate, v))
}

// NADateLT applies the LT predicate on the "NA_Date" field.
func NADateLT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldNADate, v))
}

// NADateLTE applies the LTE predicate on the "NA_Date" field.
func NADateLTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldNADate, v))
}

// NADateIsNil applies the IsNil predicate on the "NA_Date" field.
func NADateIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldNADate))
}

// NADateNotNil applies the NotNil predicate on the "NA_Date" field.
func NADateNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldNADate))
}

// AppliactionRemarksEQ applies the EQ predicate on the "AppliactionRemarks" field.
func AppliactionRemarksEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldAppliactionRemarks, v))
}

// AppliactionRemarksNEQ applies the NEQ predicate on the "AppliactionRemarks" field.
func AppliactionRemarksNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldAppliactionRemarks, v))
}

// AppliactionRemarksIn applies the In predicate on the "AppliactionRemarks" field.
func AppliactionRemarksIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldAppliactionRemarks, vs...))
}

// AppliactionRemarksNotIn applies the NotIn predicate on the "AppliactionRemarks" field.
func AppliactionRemarksNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldAppliactionRemarks, vs...))
}

// AppliactionRemarksGT applies the GT predicate on the "AppliactionRemarks" field.
func AppliactionRemarksGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldAppliactionRemarks, v))
}

// AppliactionRemarksGTE applies the GTE predicate on the "AppliactionRemarks" field.
func AppliactionRemarksGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldAppliactionRemarks, v))
}

// AppliactionRemarksLT applies the LT predicate on the "AppliactionRemarks" field.
func AppliactionRemarksLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldAppliactionRemarks, v))
}

// AppliactionRemarksLTE applies the LTE predicate on the "AppliactionRemarks" field.
func AppliactionRemarksLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldAppliactionRemarks, v))
}

// AppliactionRemarksContains applies the Contains predicate on the "AppliactionRemarks" field.
func AppliactionRemarksContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldAppliactionRemarks, v))
}

// AppliactionRemarksHasPrefix applies the HasPrefix predicate on the "AppliactionRemarks" field.
func AppliactionRemarksHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldAppliactionRemarks, v))
}

// AppliactionRemarksHasSuffix applies the HasSuffix predicate on the "AppliactionRemarks" field.
func AppliactionRemarksHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldAppliactionRemarks, v))
}

// AppliactionRemarksIsNil applies the IsNil predicate on the "AppliactionRemarks" field.
func AppliactionRemarksIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldAppliactionRemarks))
}

// AppliactionRemarksNotNil applies the NotNil predicate on the "AppliactionRemarks" field.
func AppliactionRemarksNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldAppliactionRemarks))
}

// AppliactionRemarksEqualFold applies the EqualFold predicate on the "AppliactionRemarks" field.
func AppliactionRemarksEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldAppliactionRemarks, v))
}

// AppliactionRemarksContainsFold applies the ContainsFold predicate on the "AppliactionRemarks" field.
func AppliactionRemarksContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldAppliactionRemarks, v))
}

// CadrePreferencesIsNil applies the IsNil predicate on the "CadrePreferences" field.
func CadrePreferencesIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCadrePreferences))
}

// CadrePreferencesNotNil applies the NotNil predicate on the "CadrePreferences" field.
func CadrePreferencesNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCadrePreferences))
}

// CAPreviousRemarksEQ applies the EQ predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCAPreviousRemarks, v))
}

// CAPreviousRemarksNEQ applies the NEQ predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCAPreviousRemarks, v))
}

// CAPreviousRemarksIn applies the In predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCAPreviousRemarks, vs...))
}

// CAPreviousRemarksNotIn applies the NotIn predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCAPreviousRemarks, vs...))
}

// CAPreviousRemarksGT applies the GT predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCAPreviousRemarks, v))
}

// CAPreviousRemarksGTE applies the GTE predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCAPreviousRemarks, v))
}

// CAPreviousRemarksLT applies the LT predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCAPreviousRemarks, v))
}

// CAPreviousRemarksLTE applies the LTE predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCAPreviousRemarks, v))
}

// CAPreviousRemarksContains applies the Contains predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldCAPreviousRemarks, v))
}

// CAPreviousRemarksHasPrefix applies the HasPrefix predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldCAPreviousRemarks, v))
}

// CAPreviousRemarksHasSuffix applies the HasSuffix predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldCAPreviousRemarks, v))
}

// CAPreviousRemarksIsNil applies the IsNil predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCAPreviousRemarks))
}

// CAPreviousRemarksNotNil applies the NotNil predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCAPreviousRemarks))
}

// CAPreviousRemarksEqualFold applies the EqualFold predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldCAPreviousRemarks, v))
}

// CAPreviousRemarksContainsFold applies the ContainsFold predicate on the "CAPreviousRemarks" field.
func CAPreviousRemarksContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldCAPreviousRemarks, v))
}

// PunishmentStatusEQ applies the EQ predicate on the "PunishmentStatus" field.
func PunishmentStatusEQ(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldPunishmentStatus, v))
}

// PunishmentStatusNEQ applies the NEQ predicate on the "PunishmentStatus" field.
func PunishmentStatusNEQ(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldPunishmentStatus, v))
}

// PunishmentStatusIsNil applies the IsNil predicate on the "PunishmentStatus" field.
func PunishmentStatusIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldPunishmentStatus))
}

// PunishmentStatusNotNil applies the NotNil predicate on the "PunishmentStatus" field.
func PunishmentStatusNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldPunishmentStatus))
}

// DisciplinaryCaseStatusEQ applies the EQ predicate on the "DisciplinaryCaseStatus" field.
func DisciplinaryCaseStatusEQ(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDisciplinaryCaseStatus, v))
}

// DisciplinaryCaseStatusNEQ applies the NEQ predicate on the "DisciplinaryCaseStatus" field.
func DisciplinaryCaseStatusNEQ(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDisciplinaryCaseStatus, v))
}

// DisciplinaryCaseStatusIsNil applies the IsNil predicate on the "DisciplinaryCaseStatus" field.
func DisciplinaryCaseStatusIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDisciplinaryCaseStatus))
}

// DisciplinaryCaseStatusNotNil applies the NotNil predicate on the "DisciplinaryCaseStatus" field.
func DisciplinaryCaseStatusNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDisciplinaryCaseStatus))
}

// GenerateHallTicketFlagEQ applies the EQ predicate on the "GenerateHallTicketFlag" field.
func GenerateHallTicketFlagEQ(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldGenerateHallTicketFlag, v))
}

// GenerateHallTicketFlagNEQ applies the NEQ predicate on the "GenerateHallTicketFlag" field.
func GenerateHallTicketFlagNEQ(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldGenerateHallTicketFlag, v))
}

// GenerateHallTicketFlagIsNil applies the IsNil predicate on the "GenerateHallTicketFlag" field.
func GenerateHallTicketFlagIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldGenerateHallTicketFlag))
}

// GenerateHallTicketFlagNotNil applies the NotNil predicate on the "GenerateHallTicketFlag" field.
func GenerateHallTicketFlagNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldGenerateHallTicketFlag))
}

// HallTicketNumberEQ applies the EQ predicate on the "HallTicketNumber" field.
func HallTicketNumberEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldHallTicketNumber, v))
}

// HallTicketNumberNEQ applies the NEQ predicate on the "HallTicketNumber" field.
func HallTicketNumberNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldHallTicketNumber, v))
}

// HallTicketNumberIn applies the In predicate on the "HallTicketNumber" field.
func HallTicketNumberIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldHallTicketNumber, vs...))
}

// HallTicketNumberNotIn applies the NotIn predicate on the "HallTicketNumber" field.
func HallTicketNumberNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldHallTicketNumber, vs...))
}

// HallTicketNumberGT applies the GT predicate on the "HallTicketNumber" field.
func HallTicketNumberGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldHallTicketNumber, v))
}

// HallTicketNumberGTE applies the GTE predicate on the "HallTicketNumber" field.
func HallTicketNumberGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldHallTicketNumber, v))
}

// HallTicketNumberLT applies the LT predicate on the "HallTicketNumber" field.
func HallTicketNumberLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldHallTicketNumber, v))
}

// HallTicketNumberLTE applies the LTE predicate on the "HallTicketNumber" field.
func HallTicketNumberLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldHallTicketNumber, v))
}

// HallTicketNumberContains applies the Contains predicate on the "HallTicketNumber" field.
func HallTicketNumberContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldHallTicketNumber, v))
}

// HallTicketNumberHasPrefix applies the HasPrefix predicate on the "HallTicketNumber" field.
func HallTicketNumberHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldHallTicketNumber, v))
}

// HallTicketNumberHasSuffix applies the HasSuffix predicate on the "HallTicketNumber" field.
func HallTicketNumberHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldHallTicketNumber, v))
}

// HallTicketNumberIsNil applies the IsNil predicate on the "HallTicketNumber" field.
func HallTicketNumberIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldHallTicketNumber))
}

// HallTicketNumberNotNil applies the NotNil predicate on the "HallTicketNumber" field.
func HallTicketNumberNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldHallTicketNumber))
}

// HallTicketNumberEqualFold applies the EqualFold predicate on the "HallTicketNumber" field.
func HallTicketNumberEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldHallTicketNumber, v))
}

// HallTicketNumberContainsFold applies the ContainsFold predicate on the "HallTicketNumber" field.
func HallTicketNumberContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldHallTicketNumber, v))
}

// HallTicketGeneratedFlagEQ applies the EQ predicate on the "HallTicketGeneratedFlag" field.
func HallTicketGeneratedFlagEQ(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldHallTicketGeneratedFlag, v))
}

// HallTicketGeneratedFlagNEQ applies the NEQ predicate on the "HallTicketGeneratedFlag" field.
func HallTicketGeneratedFlagNEQ(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldHallTicketGeneratedFlag, v))
}

// HallTicketGeneratedFlagIsNil applies the IsNil predicate on the "HallTicketGeneratedFlag" field.
func HallTicketGeneratedFlagIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldHallTicketGeneratedFlag))
}

// HallTicketGeneratedFlagNotNil applies the NotNil predicate on the "HallTicketGeneratedFlag" field.
func HallTicketGeneratedFlagNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldHallTicketGeneratedFlag))
}

// GenerateHallTicketFlagByNOEQ applies the EQ predicate on the "GenerateHallTicketFlagByNO" field.
func GenerateHallTicketFlagByNOEQ(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldGenerateHallTicketFlagByNO, v))
}

// GenerateHallTicketFlagByNONEQ applies the NEQ predicate on the "GenerateHallTicketFlagByNO" field.
func GenerateHallTicketFlagByNONEQ(v bool) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldGenerateHallTicketFlagByNO, v))
}

// GenerateHallTicketFlagByNOIsNil applies the IsNil predicate on the "GenerateHallTicketFlagByNO" field.
func GenerateHallTicketFlagByNOIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldGenerateHallTicketFlagByNO))
}

// GenerateHallTicketFlagByNONotNil applies the NotNil predicate on the "GenerateHallTicketFlagByNO" field.
func GenerateHallTicketFlagByNONotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldGenerateHallTicketFlagByNO))
}

// HallTicketGeneratedDateEQ applies the EQ predicate on the "HallTicketGeneratedDate" field.
func HallTicketGeneratedDateEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldHallTicketGeneratedDate, v))
}

// HallTicketGeneratedDateNEQ applies the NEQ predicate on the "HallTicketGeneratedDate" field.
func HallTicketGeneratedDateNEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldHallTicketGeneratedDate, v))
}

// HallTicketGeneratedDateIn applies the In predicate on the "HallTicketGeneratedDate" field.
func HallTicketGeneratedDateIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldHallTicketGeneratedDate, vs...))
}

// HallTicketGeneratedDateNotIn applies the NotIn predicate on the "HallTicketGeneratedDate" field.
func HallTicketGeneratedDateNotIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldHallTicketGeneratedDate, vs...))
}

// HallTicketGeneratedDateGT applies the GT predicate on the "HallTicketGeneratedDate" field.
func HallTicketGeneratedDateGT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldHallTicketGeneratedDate, v))
}

// HallTicketGeneratedDateGTE applies the GTE predicate on the "HallTicketGeneratedDate" field.
func HallTicketGeneratedDateGTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldHallTicketGeneratedDate, v))
}

// HallTicketGeneratedDateLT applies the LT predicate on the "HallTicketGeneratedDate" field.
func HallTicketGeneratedDateLT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldHallTicketGeneratedDate, v))
}

// HallTicketGeneratedDateLTE applies the LTE predicate on the "HallTicketGeneratedDate" field.
func HallTicketGeneratedDateLTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldHallTicketGeneratedDate, v))
}

// HallTicketGeneratedDateIsNil applies the IsNil predicate on the "HallTicketGeneratedDate" field.
func HallTicketGeneratedDateIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldHallTicketGeneratedDate))
}

// HallTicketGeneratedDateNotNil applies the NotNil predicate on the "HallTicketGeneratedDate" field.
func HallTicketGeneratedDateNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldHallTicketGeneratedDate))
}

// TemporaryHallTicketEQ applies the EQ predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldTemporaryHallTicket, v))
}

// TemporaryHallTicketNEQ applies the NEQ predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldTemporaryHallTicket, v))
}

// TemporaryHallTicketIn applies the In predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldTemporaryHallTicket, vs...))
}

// TemporaryHallTicketNotIn applies the NotIn predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldTemporaryHallTicket, vs...))
}

// TemporaryHallTicketGT applies the GT predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldTemporaryHallTicket, v))
}

// TemporaryHallTicketGTE applies the GTE predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldTemporaryHallTicket, v))
}

// TemporaryHallTicketLT applies the LT predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldTemporaryHallTicket, v))
}

// TemporaryHallTicketLTE applies the LTE predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldTemporaryHallTicket, v))
}

// TemporaryHallTicketContains applies the Contains predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldTemporaryHallTicket, v))
}

// TemporaryHallTicketHasPrefix applies the HasPrefix predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldTemporaryHallTicket, v))
}

// TemporaryHallTicketHasSuffix applies the HasSuffix predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldTemporaryHallTicket, v))
}

// TemporaryHallTicketIsNil applies the IsNil predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldTemporaryHallTicket))
}

// TemporaryHallTicketNotNil applies the NotNil predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldTemporaryHallTicket))
}

// TemporaryHallTicketEqualFold applies the EqualFold predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldTemporaryHallTicket, v))
}

// TemporaryHallTicketContainsFold applies the ContainsFold predicate on the "TemporaryHallTicket" field.
func TemporaryHallTicketContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldTemporaryHallTicket, v))
}

// OptionUsedEQ applies the EQ predicate on the "OptionUsed" field.
func OptionUsedEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldOptionUsed, v))
}

// OptionUsedNEQ applies the NEQ predicate on the "OptionUsed" field.
func OptionUsedNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldOptionUsed, v))
}

// OptionUsedIn applies the In predicate on the "OptionUsed" field.
func OptionUsedIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldOptionUsed, vs...))
}

// OptionUsedNotIn applies the NotIn predicate on the "OptionUsed" field.
func OptionUsedNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldOptionUsed, vs...))
}

// OptionUsedGT applies the GT predicate on the "OptionUsed" field.
func OptionUsedGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldOptionUsed, v))
}

// OptionUsedGTE applies the GTE predicate on the "OptionUsed" field.
func OptionUsedGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldOptionUsed, v))
}

// OptionUsedLT applies the LT predicate on the "OptionUsed" field.
func OptionUsedLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldOptionUsed, v))
}

// OptionUsedLTE applies the LTE predicate on the "OptionUsed" field.
func OptionUsedLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldOptionUsed, v))
}

// OptionUsedContains applies the Contains predicate on the "OptionUsed" field.
func OptionUsedContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldOptionUsed, v))
}

// OptionUsedHasPrefix applies the HasPrefix predicate on the "OptionUsed" field.
func OptionUsedHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldOptionUsed, v))
}

// OptionUsedHasSuffix applies the HasSuffix predicate on the "OptionUsed" field.
func OptionUsedHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldOptionUsed, v))
}

// OptionUsedIsNil applies the IsNil predicate on the "OptionUsed" field.
func OptionUsedIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldOptionUsed))
}

// OptionUsedNotNil applies the NotNil predicate on the "OptionUsed" field.
func OptionUsedNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldOptionUsed))
}

// OptionUsedEqualFold applies the EqualFold predicate on the "OptionUsed" field.
func OptionUsedEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldOptionUsed, v))
}

// OptionUsedContainsFold applies the ContainsFold predicate on the "OptionUsed" field.
func OptionUsedContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldOptionUsed, v))
}

// RemarksEQ applies the EQ predicate on the "Remarks" field.
func RemarksEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldRemarks, v))
}

// RemarksNEQ applies the NEQ predicate on the "Remarks" field.
func RemarksNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldRemarks, v))
}

// RemarksIn applies the In predicate on the "Remarks" field.
func RemarksIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldRemarks, vs...))
}

// RemarksNotIn applies the NotIn predicate on the "Remarks" field.
func RemarksNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldRemarks, vs...))
}

// RemarksGT applies the GT predicate on the "Remarks" field.
func RemarksGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldRemarks, v))
}

// RemarksGTE applies the GTE predicate on the "Remarks" field.
func RemarksGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldRemarks, v))
}

// RemarksLT applies the LT predicate on the "Remarks" field.
func RemarksLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldRemarks, v))
}

// RemarksLTE applies the LTE predicate on the "Remarks" field.
func RemarksLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldRemarks, v))
}

// RemarksContains applies the Contains predicate on the "Remarks" field.
func RemarksContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldRemarks, v))
}

// RemarksHasPrefix applies the HasPrefix predicate on the "Remarks" field.
func RemarksHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldRemarks, v))
}

// RemarksHasSuffix applies the HasSuffix predicate on the "Remarks" field.
func RemarksHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldRemarks, v))
}

// RemarksIsNil applies the IsNil predicate on the "Remarks" field.
func RemarksIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldRemarks))
}

// RemarksNotNil applies the NotNil predicate on the "Remarks" field.
func RemarksNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldRemarks))
}

// RemarksEqualFold applies the EqualFold predicate on the "Remarks" field.
func RemarksEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldRemarks, v))
}

// RemarksContainsFold applies the ContainsFold predicate on the "Remarks" field.
func RemarksContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldRemarks, v))
}

// CadreEQ applies the EQ predicate on the "Cadre" field.
func CadreEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCadre, v))
}

// CadreNEQ applies the NEQ predicate on the "Cadre" field.
func CadreNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCadre, v))
}

// CadreIn applies the In predicate on the "Cadre" field.
func CadreIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCadre, vs...))
}

// CadreNotIn applies the NotIn predicate on the "Cadre" field.
func CadreNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCadre, vs...))
}

// CadreGT applies the GT predicate on the "Cadre" field.
func CadreGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCadre, v))
}

// CadreGTE applies the GTE predicate on the "Cadre" field.
func CadreGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCadre, v))
}

// CadreLT applies the LT predicate on the "Cadre" field.
func CadreLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCadre, v))
}

// CadreLTE applies the LTE predicate on the "Cadre" field.
func CadreLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCadre, v))
}

// CadreContains applies the Contains predicate on the "Cadre" field.
func CadreContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldCadre, v))
}

// CadreHasPrefix applies the HasPrefix predicate on the "Cadre" field.
func CadreHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldCadre, v))
}

// CadreHasSuffix applies the HasSuffix predicate on the "Cadre" field.
func CadreHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldCadre, v))
}

// CadreIsNil applies the IsNil predicate on the "Cadre" field.
func CadreIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCadre))
}

// CadreNotNil applies the NotNil predicate on the "Cadre" field.
func CadreNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCadre))
}

// CadreEqualFold applies the EqualFold predicate on the "Cadre" field.
func CadreEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldCadre, v))
}

// CadreContainsFold applies the ContainsFold predicate on the "Cadre" field.
func CadreContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldCadre, v))
}

// EmployeePostEQ applies the EQ predicate on the "EmployeePost" field.
func EmployeePostEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldEmployeePost, v))
}

// EmployeePostNEQ applies the NEQ predicate on the "EmployeePost" field.
func EmployeePostNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldEmployeePost, v))
}

// EmployeePostIn applies the In predicate on the "EmployeePost" field.
func EmployeePostIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldEmployeePost, vs...))
}

// EmployeePostNotIn applies the NotIn predicate on the "EmployeePost" field.
func EmployeePostNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldEmployeePost, vs...))
}

// EmployeePostGT applies the GT predicate on the "EmployeePost" field.
func EmployeePostGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldEmployeePost, v))
}

// EmployeePostGTE applies the GTE predicate on the "EmployeePost" field.
func EmployeePostGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldEmployeePost, v))
}

// EmployeePostLT applies the LT predicate on the "EmployeePost" field.
func EmployeePostLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldEmployeePost, v))
}

// EmployeePostLTE applies the LTE predicate on the "EmployeePost" field.
func EmployeePostLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldEmployeePost, v))
}

// EmployeePostContains applies the Contains predicate on the "EmployeePost" field.
func EmployeePostContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldEmployeePost, v))
}

// EmployeePostHasPrefix applies the HasPrefix predicate on the "EmployeePost" field.
func EmployeePostHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldEmployeePost, v))
}

// EmployeePostHasSuffix applies the HasSuffix predicate on the "EmployeePost" field.
func EmployeePostHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldEmployeePost, v))
}

// EmployeePostIsNil applies the IsNil predicate on the "EmployeePost" field.
func EmployeePostIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldEmployeePost))
}

// EmployeePostNotNil applies the NotNil predicate on the "EmployeePost" field.
func EmployeePostNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldEmployeePost))
}

// EmployeePostEqualFold applies the EqualFold predicate on the "EmployeePost" field.
func EmployeePostEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldEmployeePost, v))
}

// EmployeePostContainsFold applies the ContainsFold predicate on the "EmployeePost" field.
func EmployeePostContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldEmployeePost, v))
}

// DOJInEligiblePostEQ applies the EQ predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDOJInEligiblePost, v))
}

// DOJInEligiblePostNEQ applies the NEQ predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDOJInEligiblePost, v))
}

// DOJInEligiblePostIn applies the In predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDOJInEligiblePost, vs...))
}

// DOJInEligiblePostNotIn applies the NotIn predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDOJInEligiblePost, vs...))
}

// DOJInEligiblePostGT applies the GT predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDOJInEligiblePost, v))
}

// DOJInEligiblePostGTE applies the GTE predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDOJInEligiblePost, v))
}

// DOJInEligiblePostLT applies the LT predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDOJInEligiblePost, v))
}

// DOJInEligiblePostLTE applies the LTE predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDOJInEligiblePost, v))
}

// DOJInEligiblePostContains applies the Contains predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDOJInEligiblePost, v))
}

// DOJInEligiblePostHasPrefix applies the HasPrefix predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDOJInEligiblePost, v))
}

// DOJInEligiblePostHasSuffix applies the HasSuffix predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDOJInEligiblePost, v))
}

// DOJInEligiblePostIsNil applies the IsNil predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDOJInEligiblePost))
}

// DOJInEligiblePostNotNil applies the NotNil predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDOJInEligiblePost))
}

// DOJInEligiblePostEqualFold applies the EqualFold predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDOJInEligiblePost, v))
}

// DOJInEligiblePostContainsFold applies the ContainsFold predicate on the "DOJInEligiblePost" field.
func DOJInEligiblePostContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDOJInEligiblePost, v))
}

// DivisionPreferencesIsNil applies the IsNil predicate on the "DivisionPreferences" field.
func DivisionPreferencesIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDivisionPreferences))
}

// DivisionPreferencesNotNil applies the NotNil predicate on the "DivisionPreferences" field.
func DivisionPreferencesNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDivisionPreferences))
}

// RoleUserCodeEQ applies the EQ predicate on the "RoleUserCode" field.
func RoleUserCodeEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldRoleUserCode, v))
}

// RoleUserCodeNEQ applies the NEQ predicate on the "RoleUserCode" field.
func RoleUserCodeNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldRoleUserCode, v))
}

// RoleUserCodeIn applies the In predicate on the "RoleUserCode" field.
func RoleUserCodeIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldRoleUserCode, vs...))
}

// RoleUserCodeNotIn applies the NotIn predicate on the "RoleUserCode" field.
func RoleUserCodeNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldRoleUserCode, vs...))
}

// RoleUserCodeIsNil applies the IsNil predicate on the "RoleUserCode" field.
func RoleUserCodeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldRoleUserCode))
}

// RoleUserCodeNotNil applies the NotNil predicate on the "RoleUserCode" field.
func RoleUserCodeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldRoleUserCode))
}

// IpAddressEQ applies the EQ predicate on the "IpAddress" field.
func IpAddressEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldIpAddress, v))
}

// IpAddressNEQ applies the NEQ predicate on the "IpAddress" field.
func IpAddressNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldIpAddress, v))
}

// IpAddressIn applies the In predicate on the "IpAddress" field.
func IpAddressIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldIpAddress, vs...))
}

// IpAddressNotIn applies the NotIn predicate on the "IpAddress" field.
func IpAddressNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldIpAddress, vs...))
}

// IpAddressGT applies the GT predicate on the "IpAddress" field.
func IpAddressGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldIpAddress, v))
}

// IpAddressGTE applies the GTE predicate on the "IpAddress" field.
func IpAddressGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldIpAddress, v))
}

// IpAddressLT applies the LT predicate on the "IpAddress" field.
func IpAddressLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldIpAddress, v))
}

// IpAddressLTE applies the LTE predicate on the "IpAddress" field.
func IpAddressLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldIpAddress, v))
}

// IpAddressContains applies the Contains predicate on the "IpAddress" field.
func IpAddressContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldIpAddress, v))
}

// IpAddressHasPrefix applies the HasPrefix predicate on the "IpAddress" field.
func IpAddressHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldIpAddress, v))
}

// IpAddressHasSuffix applies the HasSuffix predicate on the "IpAddress" field.
func IpAddressHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldIpAddress, v))
}

// IpAddressIsNil applies the IsNil predicate on the "IpAddress" field.
func IpAddressIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldIpAddress))
}

// IpAddressNotNil applies the NotNil predicate on the "IpAddress" field.
func IpAddressNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldIpAddress))
}

// IpAddressEqualFold applies the EqualFold predicate on the "IpAddress" field.
func IpAddressEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldIpAddress, v))
}

// IpAddressContainsFold applies the ContainsFold predicate on the "IpAddress" field.
func IpAddressContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldIpAddress, v))
}

// LatitudeLongitudeEQ applies the EQ predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldLatitudeLongitude, v))
}

// LatitudeLongitudeNEQ applies the NEQ predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldLatitudeLongitude, v))
}

// LatitudeLongitudeIn applies the In predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldLatitudeLongitude, vs...))
}

// LatitudeLongitudeNotIn applies the NotIn predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldLatitudeLongitude, vs...))
}

// LatitudeLongitudeGT applies the GT predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldLatitudeLongitude, v))
}

// LatitudeLongitudeGTE applies the GTE predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldLatitudeLongitude, v))
}

// LatitudeLongitudeLT applies the LT predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldLatitudeLongitude, v))
}

// LatitudeLongitudeLTE applies the LTE predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldLatitudeLongitude, v))
}

// LatitudeLongitudeContains applies the Contains predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldLatitudeLongitude, v))
}

// LatitudeLongitudeHasPrefix applies the HasPrefix predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldLatitudeLongitude, v))
}

// LatitudeLongitudeHasSuffix applies the HasSuffix predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldLatitudeLongitude, v))
}

// LatitudeLongitudeIsNil applies the IsNil predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldLatitudeLongitude))
}

// LatitudeLongitudeNotNil applies the NotNil predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldLatitudeLongitude))
}

// LatitudeLongitudeEqualFold applies the EqualFold predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldLatitudeLongitude, v))
}

// LatitudeLongitudeContainsFold applies the ContainsFold predicate on the "LatitudeLongitude" field.
func LatitudeLongitudeContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldLatitudeLongitude, v))
}

// CircleSIDEQ applies the EQ predicate on the "CircleSID" field.
func CircleSIDEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCircleSID, v))
}

// CircleSIDNEQ applies the NEQ predicate on the "CircleSID" field.
func CircleSIDNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCircleSID, v))
}

// CircleSIDIn applies the In predicate on the "CircleSID" field.
func CircleSIDIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCircleSID, vs...))
}

// CircleSIDNotIn applies the NotIn predicate on the "CircleSID" field.
func CircleSIDNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCircleSID, vs...))
}

// CircleSIDIsNil applies the IsNil predicate on the "CircleSID" field.
func CircleSIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCircleSID))
}

// CircleSIDNotNil applies the NotNil predicate on the "CircleSID" field.
func CircleSIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCircleSID))
}

// FacilityNameEQ applies the EQ predicate on the "FacilityName" field.
func FacilityNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldFacilityName, v))
}

// FacilityNameNEQ applies the NEQ predicate on the "FacilityName" field.
func FacilityNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldFacilityName, v))
}

// FacilityNameIn applies the In predicate on the "FacilityName" field.
func FacilityNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldFacilityName, vs...))
}

// FacilityNameNotIn applies the NotIn predicate on the "FacilityName" field.
func FacilityNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldFacilityName, vs...))
}

// FacilityNameGT applies the GT predicate on the "FacilityName" field.
func FacilityNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldFacilityName, v))
}

// FacilityNameGTE applies the GTE predicate on the "FacilityName" field.
func FacilityNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldFacilityName, v))
}

// FacilityNameLT applies the LT predicate on the "FacilityName" field.
func FacilityNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldFacilityName, v))
}

// FacilityNameLTE applies the LTE predicate on the "FacilityName" field.
func FacilityNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldFacilityName, v))
}

// FacilityNameContains applies the Contains predicate on the "FacilityName" field.
func FacilityNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldFacilityName, v))
}

// FacilityNameHasPrefix applies the HasPrefix predicate on the "FacilityName" field.
func FacilityNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldFacilityName, v))
}

// FacilityNameHasSuffix applies the HasSuffix predicate on the "FacilityName" field.
func FacilityNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldFacilityName, v))
}

// FacilityNameIsNil applies the IsNil predicate on the "FacilityName" field.
func FacilityNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldFacilityName))
}

// FacilityNameNotNil applies the NotNil predicate on the "FacilityName" field.
func FacilityNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldFacilityName))
}

// FacilityNameEqualFold applies the EqualFold predicate on the "FacilityName" field.
func FacilityNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldFacilityName, v))
}

// FacilityNameContainsFold applies the ContainsFold predicate on the "FacilityName" field.
func FacilityNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldFacilityName, v))
}

// ServiceLengthIsNil applies the IsNil predicate on the "ServiceLength" field.
func ServiceLengthIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldServiceLength))
}

// ServiceLengthNotNil applies the NotNil predicate on the "ServiceLength" field.
func ServiceLengthNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldServiceLength))
}

// NonQualifyingServiceIsNil applies the IsNil predicate on the "NonQualifyingService" field.
func NonQualifyingServiceIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldNonQualifyingService))
}

// NonQualifyingServiceNotNil applies the NotNil predicate on the "NonQualifyingService" field.
func NonQualifyingServiceNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldNonQualifyingService))
}

// DCInPresentCadreEQ applies the EQ predicate on the "DCInPresentCadre" field.
func DCInPresentCadreEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDCInPresentCadre, v))
}

// DCInPresentCadreNEQ applies the NEQ predicate on the "DCInPresentCadre" field.
func DCInPresentCadreNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDCInPresentCadre, v))
}

// DCInPresentCadreIn applies the In predicate on the "DCInPresentCadre" field.
func DCInPresentCadreIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDCInPresentCadre, vs...))
}

// DCInPresentCadreNotIn applies the NotIn predicate on the "DCInPresentCadre" field.
func DCInPresentCadreNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDCInPresentCadre, vs...))
}

// DCInPresentCadreGT applies the GT predicate on the "DCInPresentCadre" field.
func DCInPresentCadreGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDCInPresentCadre, v))
}

// DCInPresentCadreGTE applies the GTE predicate on the "DCInPresentCadre" field.
func DCInPresentCadreGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDCInPresentCadre, v))
}

// DCInPresentCadreLT applies the LT predicate on the "DCInPresentCadre" field.
func DCInPresentCadreLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDCInPresentCadre, v))
}

// DCInPresentCadreLTE applies the LTE predicate on the "DCInPresentCadre" field.
func DCInPresentCadreLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDCInPresentCadre, v))
}

// DCInPresentCadreContains applies the Contains predicate on the "DCInPresentCadre" field.
func DCInPresentCadreContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDCInPresentCadre, v))
}

// DCInPresentCadreHasPrefix applies the HasPrefix predicate on the "DCInPresentCadre" field.
func DCInPresentCadreHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDCInPresentCadre, v))
}

// DCInPresentCadreHasSuffix applies the HasSuffix predicate on the "DCInPresentCadre" field.
func DCInPresentCadreHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDCInPresentCadre, v))
}

// DCInPresentCadreIsNil applies the IsNil predicate on the "DCInPresentCadre" field.
func DCInPresentCadreIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDCInPresentCadre))
}

// DCInPresentCadreNotNil applies the NotNil predicate on the "DCInPresentCadre" field.
func DCInPresentCadreNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDCInPresentCadre))
}

// DCInPresentCadreEqualFold applies the EqualFold predicate on the "DCInPresentCadre" field.
func DCInPresentCadreEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDCInPresentCadre, v))
}

// DCInPresentCadreContainsFold applies the ContainsFold predicate on the "DCInPresentCadre" field.
func DCInPresentCadreContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDCInPresentCadre, v))
}

// ReportingOfficeIDEQ applies the EQ predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldReportingOfficeID, v))
}

// ReportingOfficeIDNEQ applies the NEQ predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldReportingOfficeID, v))
}

// ReportingOfficeIDIn applies the In predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldReportingOfficeID, vs...))
}

// ReportingOfficeIDNotIn applies the NotIn predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldReportingOfficeID, vs...))
}

// ReportingOfficeIDGT applies the GT predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldReportingOfficeID, v))
}

// ReportingOfficeIDGTE applies the GTE predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldReportingOfficeID, v))
}

// ReportingOfficeIDLT applies the LT predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldReportingOfficeID, v))
}

// ReportingOfficeIDLTE applies the LTE predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldReportingOfficeID, v))
}

// ReportingOfficeIDContains applies the Contains predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldReportingOfficeID, v))
}

// ReportingOfficeIDHasPrefix applies the HasPrefix predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldReportingOfficeID, v))
}

// ReportingOfficeIDHasSuffix applies the HasSuffix predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldReportingOfficeID, v))
}

// ReportingOfficeIDIsNil applies the IsNil predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldReportingOfficeID))
}

// ReportingOfficeIDNotNil applies the NotNil predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldReportingOfficeID))
}

// ReportingOfficeIDEqualFold applies the EqualFold predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldReportingOfficeID, v))
}

// ReportingOfficeIDContainsFold applies the ContainsFold predicate on the "ReportingOfficeID" field.
func ReportingOfficeIDContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldReportingOfficeID, v))
}

// CircleIDEQ applies the EQ predicate on the "CircleID" field.
func CircleIDEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCircleID, v))
}

// CircleIDNEQ applies the NEQ predicate on the "CircleID" field.
func CircleIDNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCircleID, v))
}

// CircleIDIn applies the In predicate on the "CircleID" field.
func CircleIDIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCircleID, vs...))
}

// CircleIDNotIn applies the NotIn predicate on the "CircleID" field.
func CircleIDNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCircleID, vs...))
}

// CircleIDGT applies the GT predicate on the "CircleID" field.
func CircleIDGT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCircleID, v))
}

// CircleIDGTE applies the GTE predicate on the "CircleID" field.
func CircleIDGTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCircleID, v))
}

// CircleIDLT applies the LT predicate on the "CircleID" field.
func CircleIDLT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCircleID, v))
}

// CircleIDLTE applies the LTE predicate on the "CircleID" field.
func CircleIDLTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCircleID, v))
}

// CircleIDIsNil applies the IsNil predicate on the "CircleID" field.
func CircleIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCircleID))
}

// CircleIDNotNil applies the NotNil predicate on the "CircleID" field.
func CircleIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCircleID))
}

// RegionIDEQ applies the EQ predicate on the "RegionID" field.
func RegionIDEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldRegionID, v))
}

// RegionIDNEQ applies the NEQ predicate on the "RegionID" field.
func RegionIDNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldRegionID, v))
}

// RegionIDIn applies the In predicate on the "RegionID" field.
func RegionIDIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldRegionID, vs...))
}

// RegionIDNotIn applies the NotIn predicate on the "RegionID" field.
func RegionIDNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldRegionID, vs...))
}

// RegionIDGT applies the GT predicate on the "RegionID" field.
func RegionIDGT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldRegionID, v))
}

// RegionIDGTE applies the GTE predicate on the "RegionID" field.
func RegionIDGTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldRegionID, v))
}

// RegionIDLT applies the LT predicate on the "RegionID" field.
func RegionIDLT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldRegionID, v))
}

// RegionIDLTE applies the LTE predicate on the "RegionID" field.
func RegionIDLTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldRegionID, v))
}

// RegionIDIsNil applies the IsNil predicate on the "RegionID" field.
func RegionIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldRegionID))
}

// RegionIDNotNil applies the NotNil predicate on the "RegionID" field.
func RegionIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldRegionID))
}

// DivisionIDEQ applies the EQ predicate on the "DivisionID" field.
func DivisionIDEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDivisionID, v))
}

// DivisionIDNEQ applies the NEQ predicate on the "DivisionID" field.
func DivisionIDNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDivisionID, v))
}

// DivisionIDIn applies the In predicate on the "DivisionID" field.
func DivisionIDIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDivisionID, vs...))
}

// DivisionIDNotIn applies the NotIn predicate on the "DivisionID" field.
func DivisionIDNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDivisionID, vs...))
}

// DivisionIDGT applies the GT predicate on the "DivisionID" field.
func DivisionIDGT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDivisionID, v))
}

// DivisionIDGTE applies the GTE predicate on the "DivisionID" field.
func DivisionIDGTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDivisionID, v))
}

// DivisionIDLT applies the LT predicate on the "DivisionID" field.
func DivisionIDLT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDivisionID, v))
}

// DivisionIDLTE applies the LTE predicate on the "DivisionID" field.
func DivisionIDLTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDivisionID, v))
}

// DivisionIDIsNil applies the IsNil predicate on the "DivisionID" field.
func DivisionIDIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDivisionID))
}

// DivisionIDNotNil applies the NotNil predicate on the "DivisionID" field.
func DivisionIDNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDivisionID))
}

// PostPreferencesIsNil applies the IsNil predicate on the "PostPreferences" field.
func PostPreferencesIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldPostPreferences))
}

// PostPreferencesNotNil applies the NotNil predicate on the "PostPreferences" field.
func PostPreferencesNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldPostPreferences))
}

// UnitPreferencesIsNil applies the IsNil predicate on the "UnitPreferences" field.
func UnitPreferencesIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldUnitPreferences))
}

// UnitPreferencesNotNil applies the NotNil predicate on the "UnitPreferences" field.
func UnitPreferencesNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldUnitPreferences))
}

// PMMailGuardMTSEngagementIsNil applies the IsNil predicate on the "PMMailGuardMTSEngagement" field.
func PMMailGuardMTSEngagementIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldPMMailGuardMTSEngagement))
}

// PMMailGuardMTSEngagementNotNil applies the NotNil predicate on the "PMMailGuardMTSEngagement" field.
func PMMailGuardMTSEngagementNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldPMMailGuardMTSEngagement))
}

// CenterIdEQ applies the EQ predicate on the "CenterId" field.
func CenterIdEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCenterId, v))
}

// CenterIdNEQ applies the NEQ predicate on the "CenterId" field.
func CenterIdNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCenterId, v))
}

// CenterIdIn applies the In predicate on the "CenterId" field.
func CenterIdIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCenterId, vs...))
}

// CenterIdNotIn applies the NotIn predicate on the "CenterId" field.
func CenterIdNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCenterId, vs...))
}

// CenterIdGT applies the GT predicate on the "CenterId" field.
func CenterIdGT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldCenterId, v))
}

// CenterIdGTE applies the GTE predicate on the "CenterId" field.
func CenterIdGTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldCenterId, v))
}

// CenterIdLT applies the LT predicate on the "CenterId" field.
func CenterIdLT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldCenterId, v))
}

// CenterIdLTE applies the LTE predicate on the "CenterId" field.
func CenterIdLTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldCenterId, v))
}

// CenterIdIsNil applies the IsNil predicate on the "CenterId" field.
func CenterIdIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCenterId))
}

// CenterIdNotNil applies the NotNil predicate on the "CenterId" field.
func CenterIdNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCenterId))
}

// CenterCodeEQ applies the EQ predicate on the "CenterCode" field.
func CenterCodeEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldCenterCode, v))
}

// CenterCodeNEQ applies the NEQ predicate on the "CenterCode" field.
func CenterCodeNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldCenterCode, v))
}

// CenterCodeIn applies the In predicate on the "CenterCode" field.
func CenterCodeIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldCenterCode, vs...))
}

// CenterCodeNotIn applies the NotIn predicate on the "CenterCode" field.
func CenterCodeNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldCenterCode, vs...))
}

// CenterCodeIsNil applies the IsNil predicate on the "CenterCode" field.
func CenterCodeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldCenterCode))
}

// CenterCodeNotNil applies the NotNil predicate on the "CenterCode" field.
func CenterCodeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldCenterCode))
}

// ClaimingQualifyingServiceEQ applies the EQ predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldClaimingQualifyingService, v))
}

// ClaimingQualifyingServiceNEQ applies the NEQ predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldClaimingQualifyingService, v))
}

// ClaimingQualifyingServiceIn applies the In predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldClaimingQualifyingService, vs...))
}

// ClaimingQualifyingServiceNotIn applies the NotIn predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldClaimingQualifyingService, vs...))
}

// ClaimingQualifyingServiceGT applies the GT predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldClaimingQualifyingService, v))
}

// ClaimingQualifyingServiceGTE applies the GTE predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldClaimingQualifyingService, v))
}

// ClaimingQualifyingServiceLT applies the LT predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldClaimingQualifyingService, v))
}

// ClaimingQualifyingServiceLTE applies the LTE predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldClaimingQualifyingService, v))
}

// ClaimingQualifyingServiceContains applies the Contains predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldClaimingQualifyingService, v))
}

// ClaimingQualifyingServiceHasPrefix applies the HasPrefix predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldClaimingQualifyingService, v))
}

// ClaimingQualifyingServiceHasSuffix applies the HasSuffix predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldClaimingQualifyingService, v))
}

// ClaimingQualifyingServiceIsNil applies the IsNil predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldClaimingQualifyingService))
}

// ClaimingQualifyingServiceNotNil applies the NotNil predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldClaimingQualifyingService))
}

// ClaimingQualifyingServiceEqualFold applies the EqualFold predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldClaimingQualifyingService, v))
}

// ClaimingQualifyingServiceContainsFold applies the ContainsFold predicate on the "ClaimingQualifyingService" field.
func ClaimingQualifyingServiceContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldClaimingQualifyingService, v))
}

// DeputationOfficePincodeEQ applies the EQ predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldDeputationOfficePincode, v))
}

// DeputationOfficePincodeNEQ applies the NEQ predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldDeputationOfficePincode, v))
}

// DeputationOfficePincodeIn applies the In predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldDeputationOfficePincode, vs...))
}

// DeputationOfficePincodeNotIn applies the NotIn predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldDeputationOfficePincode, vs...))
}

// DeputationOfficePincodeGT applies the GT predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldDeputationOfficePincode, v))
}

// DeputationOfficePincodeGTE applies the GTE predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldDeputationOfficePincode, v))
}

// DeputationOfficePincodeLT applies the LT predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldDeputationOfficePincode, v))
}

// DeputationOfficePincodeLTE applies the LTE predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldDeputationOfficePincode, v))
}

// DeputationOfficePincodeContains applies the Contains predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldDeputationOfficePincode, v))
}

// DeputationOfficePincodeHasPrefix applies the HasPrefix predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldDeputationOfficePincode, v))
}

// DeputationOfficePincodeHasSuffix applies the HasSuffix predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldDeputationOfficePincode, v))
}

// DeputationOfficePincodeIsNil applies the IsNil predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldDeputationOfficePincode))
}

// DeputationOfficePincodeNotNil applies the NotNil predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldDeputationOfficePincode))
}

// DeputationOfficePincodeEqualFold applies the EqualFold predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldDeputationOfficePincode, v))
}

// DeputationOfficePincodeContainsFold applies the ContainsFold predicate on the "DeputationOfficePincode" field.
func DeputationOfficePincodeContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldDeputationOfficePincode, v))
}

// RecommendedStatusEQ applies the EQ predicate on the "RecommendedStatus" field.
func RecommendedStatusEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldRecommendedStatus, v))
}

// RecommendedStatusNEQ applies the NEQ predicate on the "RecommendedStatus" field.
func RecommendedStatusNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldRecommendedStatus, v))
}

// RecommendedStatusIn applies the In predicate on the "RecommendedStatus" field.
func RecommendedStatusIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldRecommendedStatus, vs...))
}

// RecommendedStatusNotIn applies the NotIn predicate on the "RecommendedStatus" field.
func RecommendedStatusNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldRecommendedStatus, vs...))
}

// RecommendedStatusGT applies the GT predicate on the "RecommendedStatus" field.
func RecommendedStatusGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldRecommendedStatus, v))
}

// RecommendedStatusGTE applies the GTE predicate on the "RecommendedStatus" field.
func RecommendedStatusGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldRecommendedStatus, v))
}

// RecommendedStatusLT applies the LT predicate on the "RecommendedStatus" field.
func RecommendedStatusLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldRecommendedStatus, v))
}

// RecommendedStatusLTE applies the LTE predicate on the "RecommendedStatus" field.
func RecommendedStatusLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldRecommendedStatus, v))
}

// RecommendedStatusContains applies the Contains predicate on the "RecommendedStatus" field.
func RecommendedStatusContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldRecommendedStatus, v))
}

// RecommendedStatusHasPrefix applies the HasPrefix predicate on the "RecommendedStatus" field.
func RecommendedStatusHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldRecommendedStatus, v))
}

// RecommendedStatusHasSuffix applies the HasSuffix predicate on the "RecommendedStatus" field.
func RecommendedStatusHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldRecommendedStatus, v))
}

// RecommendedStatusIsNil applies the IsNil predicate on the "RecommendedStatus" field.
func RecommendedStatusIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldRecommendedStatus))
}

// RecommendedStatusNotNil applies the NotNil predicate on the "RecommendedStatus" field.
func RecommendedStatusNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldRecommendedStatus))
}

// RecommendedStatusEqualFold applies the EqualFold predicate on the "RecommendedStatus" field.
func RecommendedStatusEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldRecommendedStatus, v))
}

// RecommendedStatusContainsFold applies the ContainsFold predicate on the "RecommendedStatus" field.
func RecommendedStatusContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldRecommendedStatus, v))
}

// ApplicationWdlDateEQ applies the EQ predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldApplicationWdlDate, v))
}

// ApplicationWdlDateNEQ applies the NEQ predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateNEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldApplicationWdlDate, v))
}

// ApplicationWdlDateIn applies the In predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldApplicationWdlDate, vs...))
}

// ApplicationWdlDateNotIn applies the NotIn predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateNotIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldApplicationWdlDate, vs...))
}

// ApplicationWdlDateGT applies the GT predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateGT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldApplicationWdlDate, v))
}

// ApplicationWdlDateGTE applies the GTE predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateGTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldApplicationWdlDate, v))
}

// ApplicationWdlDateLT applies the LT predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateLT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldApplicationWdlDate, v))
}

// ApplicationWdlDateLTE applies the LTE predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateLTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldApplicationWdlDate, v))
}

// ApplicationWdlDateIsNil applies the IsNil predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldApplicationWdlDate))
}

// ApplicationWdlDateNotNil applies the NotNil predicate on the "ApplicationWdlDate" field.
func ApplicationWdlDateNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldApplicationWdlDate))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "UpdatedAt" field.
func UpdatedAtIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "UpdatedAt" field.
func UpdatedAtNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldUpdatedAt))
}

// UpdatedByEQ applies the EQ predicate on the "UpdatedBy" field.
func UpdatedByEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "UpdatedBy" field.
func UpdatedByNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "UpdatedBy" field.
func UpdatedByIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "UpdatedBy" field.
func UpdatedByNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "UpdatedBy" field.
func UpdatedByGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "UpdatedBy" field.
func UpdatedByGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "UpdatedBy" field.
func UpdatedByLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "UpdatedBy" field.
func UpdatedByLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "UpdatedBy" field.
func UpdatedByContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "UpdatedBy" field.
func UpdatedByHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "UpdatedBy" field.
func UpdatedByHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "UpdatedBy" field.
func UpdatedByIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "UpdatedBy" field.
func UpdatedByNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "UpdatedBy" field.
func UpdatedByEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "UpdatedBy" field.
func UpdatedByContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// ExamCenterHallEQ applies the EQ predicate on the "ExamCenterHall" field.
func ExamCenterHallEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldExamCenterHall, v))
}

// ExamCenterHallNEQ applies the NEQ predicate on the "ExamCenterHall" field.
func ExamCenterHallNEQ(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldExamCenterHall, v))
}

// ExamCenterHallIn applies the In predicate on the "ExamCenterHall" field.
func ExamCenterHallIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldExamCenterHall, vs...))
}

// ExamCenterHallNotIn applies the NotIn predicate on the "ExamCenterHall" field.
func ExamCenterHallNotIn(vs ...int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldExamCenterHall, vs...))
}

// ExamCenterHallGT applies the GT predicate on the "ExamCenterHall" field.
func ExamCenterHallGT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldExamCenterHall, v))
}

// ExamCenterHallGTE applies the GTE predicate on the "ExamCenterHall" field.
func ExamCenterHallGTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldExamCenterHall, v))
}

// ExamCenterHallLT applies the LT predicate on the "ExamCenterHall" field.
func ExamCenterHallLT(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldExamCenterHall, v))
}

// ExamCenterHallLTE applies the LTE predicate on the "ExamCenterHall" field.
func ExamCenterHallLTE(v int32) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldExamCenterHall, v))
}

// ExamCenterHallIsNil applies the IsNil predicate on the "ExamCenterHall" field.
func ExamCenterHallIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldExamCenterHall))
}

// ExamCenterHallNotNil applies the NotNil predicate on the "ExamCenterHall" field.
func ExamCenterHallNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldExamCenterHall))
}

// HallNameEQ applies the EQ predicate on the "HallName" field.
func HallNameEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEQ(FieldHallName, v))
}

// HallNameNEQ applies the NEQ predicate on the "HallName" field.
func HallNameNEQ(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNEQ(FieldHallName, v))
}

// HallNameIn applies the In predicate on the "HallName" field.
func HallNameIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIn(FieldHallName, vs...))
}

// HallNameNotIn applies the NotIn predicate on the "HallName" field.
func HallNameNotIn(vs ...string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotIn(FieldHallName, vs...))
}

// HallNameGT applies the GT predicate on the "HallName" field.
func HallNameGT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGT(FieldHallName, v))
}

// HallNameGTE applies the GTE predicate on the "HallName" field.
func HallNameGTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldGTE(FieldHallName, v))
}

// HallNameLT applies the LT predicate on the "HallName" field.
func HallNameLT(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLT(FieldHallName, v))
}

// HallNameLTE applies the LTE predicate on the "HallName" field.
func HallNameLTE(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldLTE(FieldHallName, v))
}

// HallNameContains applies the Contains predicate on the "HallName" field.
func HallNameContains(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContains(FieldHallName, v))
}

// HallNameHasPrefix applies the HasPrefix predicate on the "HallName" field.
func HallNameHasPrefix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasPrefix(FieldHallName, v))
}

// HallNameHasSuffix applies the HasSuffix predicate on the "HallName" field.
func HallNameHasSuffix(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldHasSuffix(FieldHallName, v))
}

// HallNameIsNil applies the IsNil predicate on the "HallName" field.
func HallNameIsNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldIsNull(FieldHallName))
}

// HallNameNotNil applies the NotNil predicate on the "HallName" field.
func HallNameNotNil() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldNotNull(FieldHallName))
}

// HallNameEqualFold applies the EqualFold predicate on the "HallName" field.
func HallNameEqualFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldEqualFold(FieldHallName, v))
}

// HallNameContainsFold applies the ContainsFold predicate on the "HallName" field.
func HallNameContainsFold(v string) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(sql.FieldContainsFold(FieldHallName, v))
}

// HasUsersPMPARef applies the HasEdge predicate on the "UsersPMPARef" edge.
func HasUsersPMPARef() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersPMPARefTable, UsersPMPARefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersPMPARefWith applies the HasEdge predicate on the "UsersPMPARef" edge with a given conditions (other predicates).
func HasUsersPMPARefWith(preds ...predicate.UserMaster) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := newUsersPMPARefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleusers applies the HasEdge predicate on the "roleusers" edge.
func HasRoleusers() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleusersTable, RoleusersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleusersWith applies the HasEdge predicate on the "roleusers" edge with a given conditions (other predicates).
func HasRoleusersWith(preds ...predicate.RoleMaster) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := newRoleusersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamcitycenter applies the HasEdge predicate on the "examcitycenter" edge.
func HasExamcitycenter() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamcitycenterTable, ExamcitycenterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamcitycenterWith applies the HasEdge predicate on the "examcitycenter" edge with a given conditions (other predicates).
func HasExamcitycenterWith(preds ...predicate.ExamCityCenter) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := newExamcitycenterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCadrePrefRef applies the HasEdge predicate on the "CadrePref_Ref" edge.
func HasCadrePrefRef() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CadrePrefRefTable, CadrePrefRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCadrePrefRefWith applies the HasEdge predicate on the "CadrePref_Ref" edge with a given conditions (other predicates).
func HasCadrePrefRefWith(preds ...predicate.Cadre_Choice_PMPA) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := newCadrePrefRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCirclePrefRefPMPA applies the HasEdge predicate on the "CirclePrefRefPMPA" edge.
func HasCirclePrefRefPMPA() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CirclePrefRefPMPATable, CirclePrefRefPMPAColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCirclePrefRefPMPAWith applies the HasEdge predicate on the "CirclePrefRefPMPA" edge with a given conditions (other predicates).
func HasCirclePrefRefPMPAWith(preds ...predicate.Division_Choice_PMPA) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := newCirclePrefRefPMPAStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPMPAApplicationsRef applies the HasEdge predicate on the "PMPAApplicationsRef" edge.
func HasPMPAApplicationsRef() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PMPAApplicationsRefTable, PMPAApplicationsRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPMPAApplicationsRefWith applies the HasEdge predicate on the "PMPAApplicationsRef" edge with a given conditions (other predicates).
func HasPMPAApplicationsRefWith(preds ...predicate.RecommendationsPMPAApplications) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := newPMPAApplicationsRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExams applies the HasEdge predicate on the "Exams" edge.
func HasExams() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamsTable, ExamsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamsWith applies the HasEdge predicate on the "Exams" edge with a given conditions (other predicates).
func HasExamsWith(preds ...predicate.Exam) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := newExamsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPMPAExamCentres applies the HasEdge predicate on the "PMPAExamCentres" edge.
func HasPMPAExamCentres() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PMPAExamCentresTable, PMPAExamCentresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPMPAExamCentresWith applies the HasEdge predicate on the "PMPAExamCentres" edge with a given conditions (other predicates).
func HasPMPAExamCentresWith(preds ...predicate.Center) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := newPMPAExamCentresStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCircleRefsPMPA applies the HasEdge predicate on the "CircleRefsPMPA" edge.
func HasCircleRefsPMPA() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CircleRefsPMPATable, CircleRefsPMPAColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCircleRefsPMPAWith applies the HasEdge predicate on the "CircleRefsPMPA" edge with a given conditions (other predicates).
func HasCircleRefsPMPAWith(preds ...predicate.CircleSummaryForNO) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := newCircleRefsPMPAStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogData applies the HasEdge predicate on the "LogData" edge.
func HasLogData() predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogDataWith applies the HasEdge predicate on the "LogData" edge with a given conditions (other predicates).
func HasLogDataWith(preds ...predicate.Logs) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		step := newLogDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Exam_Applications_PMPA) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Exam_Applications_PMPA) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Exam_Applications_PMPA) predicate.Exam_Applications_PMPA {
	return predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		p(s.Not())
	})
}
