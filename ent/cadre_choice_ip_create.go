// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/cadre_choice_ip"
	"recruit/ent/exam_applications_ip"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CadreChoiceIPCreate is the builder for creating a Cadre_Choice_IP entity.
type CadreChoiceIPCreate struct {
	config
	mutation *CadreChoiceIPMutation
	hooks    []Hook
}

// SetApplicationID sets the "ApplicationID" field.
func (ccic *CadreChoiceIPCreate) SetApplicationID(i int64) *CadreChoiceIPCreate {
	ccic.mutation.SetApplicationID(i)
	return ccic
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (ccic *CadreChoiceIPCreate) SetNillableApplicationID(i *int64) *CadreChoiceIPCreate {
	if i != nil {
		ccic.SetApplicationID(*i)
	}
	return ccic
}

// SetCadrePrefNo sets the "CadrePrefNo" field.
func (ccic *CadreChoiceIPCreate) SetCadrePrefNo(s string) *CadreChoiceIPCreate {
	ccic.mutation.SetCadrePrefNo(s)
	return ccic
}

// SetNillableCadrePrefNo sets the "CadrePrefNo" field if the given value is not nil.
func (ccic *CadreChoiceIPCreate) SetNillableCadrePrefNo(s *string) *CadreChoiceIPCreate {
	if s != nil {
		ccic.SetCadrePrefNo(*s)
	}
	return ccic
}

// SetCadrePrefValue sets the "CadrePrefValue" field.
func (ccic *CadreChoiceIPCreate) SetCadrePrefValue(s string) *CadreChoiceIPCreate {
	ccic.mutation.SetCadrePrefValue(s)
	return ccic
}

// SetNillableCadrePrefValue sets the "CadrePrefValue" field if the given value is not nil.
func (ccic *CadreChoiceIPCreate) SetNillableCadrePrefValue(s *string) *CadreChoiceIPCreate {
	if s != nil {
		ccic.SetCadrePrefValue(*s)
	}
	return ccic
}

// SetEmployeeID sets the "EmployeeID" field.
func (ccic *CadreChoiceIPCreate) SetEmployeeID(i int64) *CadreChoiceIPCreate {
	ccic.mutation.SetEmployeeID(i)
	return ccic
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (ccic *CadreChoiceIPCreate) SetNillableEmployeeID(i *int64) *CadreChoiceIPCreate {
	if i != nil {
		ccic.SetEmployeeID(*i)
	}
	return ccic
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (ccic *CadreChoiceIPCreate) SetUpdatedAt(t time.Time) *CadreChoiceIPCreate {
	ccic.mutation.SetUpdatedAt(t)
	return ccic
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (ccic *CadreChoiceIPCreate) SetNillableUpdatedAt(t *time.Time) *CadreChoiceIPCreate {
	if t != nil {
		ccic.SetUpdatedAt(*t)
	}
	return ccic
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (ccic *CadreChoiceIPCreate) SetUpdatedBy(s string) *CadreChoiceIPCreate {
	ccic.mutation.SetUpdatedBy(s)
	return ccic
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (ccic *CadreChoiceIPCreate) SetNillableUpdatedBy(s *string) *CadreChoiceIPCreate {
	if s != nil {
		ccic.SetUpdatedBy(*s)
	}
	return ccic
}

// SetID sets the "id" field.
func (ccic *CadreChoiceIPCreate) SetID(i int32) *CadreChoiceIPCreate {
	ccic.mutation.SetID(i)
	return ccic
}

// SetApplnIPRefID sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity by ID.
func (ccic *CadreChoiceIPCreate) SetApplnIPRefID(id int64) *CadreChoiceIPCreate {
	ccic.mutation.SetApplnIPRefID(id)
	return ccic
}

// SetNillableApplnIPRefID sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity by ID if the given value is not nil.
func (ccic *CadreChoiceIPCreate) SetNillableApplnIPRefID(id *int64) *CadreChoiceIPCreate {
	if id != nil {
		ccic = ccic.SetApplnIPRefID(*id)
	}
	return ccic
}

// SetApplnIPRef sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity.
func (ccic *CadreChoiceIPCreate) SetApplnIPRef(e *Exam_Applications_IP) *CadreChoiceIPCreate {
	return ccic.SetApplnIPRefID(e.ID)
}

// Mutation returns the CadreChoiceIPMutation object of the builder.
func (ccic *CadreChoiceIPCreate) Mutation() *CadreChoiceIPMutation {
	return ccic.mutation
}

// Save creates the Cadre_Choice_IP in the database.
func (ccic *CadreChoiceIPCreate) Save(ctx context.Context) (*Cadre_Choice_IP, error) {
	ccic.defaults()
	return withHooks(ctx, ccic.sqlSave, ccic.mutation, ccic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccic *CadreChoiceIPCreate) SaveX(ctx context.Context) *Cadre_Choice_IP {
	v, err := ccic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccic *CadreChoiceIPCreate) Exec(ctx context.Context) error {
	_, err := ccic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccic *CadreChoiceIPCreate) ExecX(ctx context.Context) {
	if err := ccic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccic *CadreChoiceIPCreate) defaults() {
	if _, ok := ccic.mutation.UpdatedAt(); !ok {
		v := cadre_choice_ip.DefaultUpdatedAt()
		ccic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ccic.mutation.UpdatedBy(); !ok {
		v := cadre_choice_ip.DefaultUpdatedBy
		ccic.mutation.SetUpdatedBy(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccic *CadreChoiceIPCreate) check() error {
	return nil
}

func (ccic *CadreChoiceIPCreate) sqlSave(ctx context.Context) (*Cadre_Choice_IP, error) {
	if err := ccic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	ccic.mutation.id = &_node.ID
	ccic.mutation.done = true
	return _node, nil
}

func (ccic *CadreChoiceIPCreate) createSpec() (*Cadre_Choice_IP, *sqlgraph.CreateSpec) {
	var (
		_node = &Cadre_Choice_IP{config: ccic.config}
		_spec = sqlgraph.NewCreateSpec(cadre_choice_ip.Table, sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32))
	)
	if id, ok := ccic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccic.mutation.CadrePrefNo(); ok {
		_spec.SetField(cadre_choice_ip.FieldCadrePrefNo, field.TypeString, value)
		_node.CadrePrefNo = value
	}
	if value, ok := ccic.mutation.CadrePrefValue(); ok {
		_spec.SetField(cadre_choice_ip.FieldCadrePrefValue, field.TypeString, value)
		_node.CadrePrefValue = value
	}
	if value, ok := ccic.mutation.EmployeeID(); ok {
		_spec.SetField(cadre_choice_ip.FieldEmployeeID, field.TypeInt64, value)
		_node.EmployeeID = value
	}
	if value, ok := ccic.mutation.UpdatedAt(); ok {
		_spec.SetField(cadre_choice_ip.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ccic.mutation.UpdatedBy(); ok {
		_spec.SetField(cadre_choice_ip.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if nodes := ccic.mutation.ApplnIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cadre_choice_ip.ApplnIPRefTable,
			Columns: []string{cadre_choice_ip.ApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApplicationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CadreChoiceIPCreateBulk is the builder for creating many Cadre_Choice_IP entities in bulk.
type CadreChoiceIPCreateBulk struct {
	config
	builders []*CadreChoiceIPCreate
}

// Save creates the Cadre_Choice_IP entities in the database.
func (ccicb *CadreChoiceIPCreateBulk) Save(ctx context.Context) ([]*Cadre_Choice_IP, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccicb.builders))
	nodes := make([]*Cadre_Choice_IP, len(ccicb.builders))
	mutators := make([]Mutator, len(ccicb.builders))
	for i := range ccicb.builders {
		func(i int, root context.Context) {
			builder := ccicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CadreChoiceIPMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccicb *CadreChoiceIPCreateBulk) SaveX(ctx context.Context) []*Cadre_Choice_IP {
	v, err := ccicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccicb *CadreChoiceIPCreateBulk) Exec(ctx context.Context) error {
	_, err := ccicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccicb *CadreChoiceIPCreateBulk) ExecX(ctx context.Context) {
	if err := ccicb.Exec(ctx); err != nil {
		panic(err)
	}
}
