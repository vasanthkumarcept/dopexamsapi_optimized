// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/cadreeligibleconfiguration"
	"recruit/ent/logs"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CadreEligibleConfigurationCreate is the builder for creating a CadreEligibleConfiguration entity.
type CadreEligibleConfigurationCreate struct {
	config
	mutation *CadreEligibleConfigurationMutation
	hooks    []Hook
}

// SetExamCode sets the "ExamCode" field.
func (cecc *CadreEligibleConfigurationCreate) SetExamCode(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetExamCode(i)
	return cecc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableExamCode(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetExamCode(*i)
	}
	return cecc
}

// SetExamName sets the "ExamName" field.
func (cecc *CadreEligibleConfigurationCreate) SetExamName(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetExamName(s)
	return cecc
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableExamName(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetExamName(*s)
	}
	return cecc
}

// SetExamShortName sets the "ExamShortName" field.
func (cecc *CadreEligibleConfigurationCreate) SetExamShortName(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetExamShortName(s)
	return cecc
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableExamShortName(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetExamShortName(*s)
	}
	return cecc
}

// SetPostID sets the "PostID" field.
func (cecc *CadreEligibleConfigurationCreate) SetPostID(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetPostID(i)
	return cecc
}

// SetNillablePostID sets the "PostID" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillablePostID(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetPostID(*i)
	}
	return cecc
}

// SetPostCode sets the "PostCode" field.
func (cecc *CadreEligibleConfigurationCreate) SetPostCode(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetPostCode(s)
	return cecc
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillablePostCode(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetPostCode(*s)
	}
	return cecc
}

// SetPostDescription sets the "PostDescription" field.
func (cecc *CadreEligibleConfigurationCreate) SetPostDescription(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetPostDescription(s)
	return cecc
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillablePostDescription(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetPostDescription(*s)
	}
	return cecc
}

// SetGdsService sets the "gdsService" field.
func (cecc *CadreEligibleConfigurationCreate) SetGdsService(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetGdsService(i)
	return cecc
}

// SetNillableGdsService sets the "gdsService" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableGdsService(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetGdsService(*i)
	}
	return cecc
}

// SetCategoryCode sets the "CategoryCode" field.
func (cecc *CadreEligibleConfigurationCreate) SetCategoryCode(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetCategoryCode(s)
	return cecc
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableCategoryCode(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetCategoryCode(*s)
	}
	return cecc
}

// SetAgeCriteria sets the "ageCriteria" field.
func (cecc *CadreEligibleConfigurationCreate) SetAgeCriteria(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetAgeCriteria(i)
	return cecc
}

// SetNillableAgeCriteria sets the "ageCriteria" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableAgeCriteria(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetAgeCriteria(*i)
	}
	return cecc
}

// SetServiceCriteria sets the "serviceCriteria" field.
func (cecc *CadreEligibleConfigurationCreate) SetServiceCriteria(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetServiceCriteria(i)
	return cecc
}

// SetNillableServiceCriteria sets the "serviceCriteria" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableServiceCriteria(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetServiceCriteria(*i)
	}
	return cecc
}

// SetDrivingLicenceCriteria sets the "drivingLicenceCriteria" field.
func (cecc *CadreEligibleConfigurationCreate) SetDrivingLicenceCriteria(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetDrivingLicenceCriteria(i)
	return cecc
}

// SetNillableDrivingLicenceCriteria sets the "drivingLicenceCriteria" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableDrivingLicenceCriteria(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetDrivingLicenceCriteria(*i)
	}
	return cecc
}

// SetComputerKnowledge sets the "computerKnowledge" field.
func (cecc *CadreEligibleConfigurationCreate) SetComputerKnowledge(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetComputerKnowledge(i)
	return cecc
}

// SetNillableComputerKnowledge sets the "computerKnowledge" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableComputerKnowledge(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetComputerKnowledge(*i)
	}
	return cecc
}

// SetEligibilityBasedOnLevelOfPayMatrix sets the "eligibilityBasedOnLevelOfPayMatrix" field.
func (cecc *CadreEligibleConfigurationCreate) SetEligibilityBasedOnLevelOfPayMatrix(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetEligibilityBasedOnLevelOfPayMatrix(i)
	return cecc
}

// SetNillableEligibilityBasedOnLevelOfPayMatrix sets the "eligibilityBasedOnLevelOfPayMatrix" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableEligibilityBasedOnLevelOfPayMatrix(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetEligibilityBasedOnLevelOfPayMatrix(*i)
	}
	return cecc
}

// SetEducationCode sets the "educationCode" field.
func (cecc *CadreEligibleConfigurationCreate) SetEducationCode(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetEducationCode(i)
	return cecc
}

// SetNillableEducationCode sets the "educationCode" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableEducationCode(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetEducationCode(*i)
	}
	return cecc
}

// SetEducationDescription sets the "educationDescription" field.
func (cecc *CadreEligibleConfigurationCreate) SetEducationDescription(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetEducationDescription(s)
	return cecc
}

// SetNillableEducationDescription sets the "educationDescription" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableEducationDescription(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetEducationDescription(*s)
	}
	return cecc
}

// SetOrderNumber sets the "OrderNumber" field.
func (cecc *CadreEligibleConfigurationCreate) SetOrderNumber(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetOrderNumber(s)
	return cecc
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableOrderNumber(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetOrderNumber(*s)
	}
	return cecc
}

// SetCreatedById sets the "CreatedById" field.
func (cecc *CadreEligibleConfigurationCreate) SetCreatedById(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetCreatedById(i)
	return cecc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableCreatedById(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetCreatedById(*i)
	}
	return cecc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (cecc *CadreEligibleConfigurationCreate) SetCreatedByUserName(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetCreatedByUserName(s)
	return cecc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableCreatedByUserName(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetCreatedByUserName(*s)
	}
	return cecc
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (cecc *CadreEligibleConfigurationCreate) SetCreatedByEmpId(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetCreatedByEmpId(i)
	return cecc
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableCreatedByEmpId(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetCreatedByEmpId(*i)
	}
	return cecc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (cecc *CadreEligibleConfigurationCreate) SetCreatedByDesignation(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetCreatedByDesignation(s)
	return cecc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableCreatedByDesignation(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetCreatedByDesignation(*s)
	}
	return cecc
}

// SetCreatedDate sets the "CreatedDate" field.
func (cecc *CadreEligibleConfigurationCreate) SetCreatedDate(t time.Time) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetCreatedDate(t)
	return cecc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableCreatedDate(t *time.Time) *CadreEligibleConfigurationCreate {
	if t != nil {
		cecc.SetCreatedDate(*t)
	}
	return cecc
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (cecc *CadreEligibleConfigurationCreate) SetVerifiedbyid(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetVerifiedbyid(i)
	return cecc
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableVerifiedbyid(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetVerifiedbyid(*i)
	}
	return cecc
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (cecc *CadreEligibleConfigurationCreate) SetVerifiedbyusername(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetVerifiedbyusername(s)
	return cecc
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableVerifiedbyusername(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetVerifiedbyusername(*s)
	}
	return cecc
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (cecc *CadreEligibleConfigurationCreate) SetVerifiedbyEmployeeid(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetVerifiedbyEmployeeid(i)
	return cecc
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableVerifiedbyEmployeeid(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetVerifiedbyEmployeeid(*i)
	}
	return cecc
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (cecc *CadreEligibleConfigurationCreate) SetVerifiedbyDesignation(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetVerifiedbyDesignation(s)
	return cecc
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableVerifiedbyDesignation(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetVerifiedbyDesignation(*s)
	}
	return cecc
}

// SetVerifiedDate sets the "verifiedDate" field.
func (cecc *CadreEligibleConfigurationCreate) SetVerifiedDate(t time.Time) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetVerifiedDate(t)
	return cecc
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableVerifiedDate(t *time.Time) *CadreEligibleConfigurationCreate {
	if t != nil {
		cecc.SetVerifiedDate(*t)
	}
	return cecc
}

// SetStatuss sets the "Statuss" field.
func (cecc *CadreEligibleConfigurationCreate) SetStatuss(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetStatuss(s)
	return cecc
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableStatuss(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetStatuss(*s)
	}
	return cecc
}

// SetDeletedbyid sets the "deletedbyid" field.
func (cecc *CadreEligibleConfigurationCreate) SetDeletedbyid(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetDeletedbyid(i)
	return cecc
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableDeletedbyid(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetDeletedbyid(*i)
	}
	return cecc
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (cecc *CadreEligibleConfigurationCreate) SetDeletedbyusername(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetDeletedbyusername(s)
	return cecc
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableDeletedbyusername(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetDeletedbyusername(*s)
	}
	return cecc
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (cecc *CadreEligibleConfigurationCreate) SetDeletedbyEmployeeid(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetDeletedbyEmployeeid(i)
	return cecc
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableDeletedbyEmployeeid(i *int64) *CadreEligibleConfigurationCreate {
	if i != nil {
		cecc.SetDeletedbyEmployeeid(*i)
	}
	return cecc
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (cecc *CadreEligibleConfigurationCreate) SetDeletedbyDesignation(s string) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetDeletedbyDesignation(s)
	return cecc
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableDeletedbyDesignation(s *string) *CadreEligibleConfigurationCreate {
	if s != nil {
		cecc.SetDeletedbyDesignation(*s)
	}
	return cecc
}

// SetDeletedDate sets the "deletedDate" field.
func (cecc *CadreEligibleConfigurationCreate) SetDeletedDate(t time.Time) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetDeletedDate(t)
	return cecc
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (cecc *CadreEligibleConfigurationCreate) SetNillableDeletedDate(t *time.Time) *CadreEligibleConfigurationCreate {
	if t != nil {
		cecc.SetDeletedDate(*t)
	}
	return cecc
}

// SetID sets the "id" field.
func (cecc *CadreEligibleConfigurationCreate) SetID(i int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.SetID(i)
	return cecc
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (cecc *CadreEligibleConfigurationCreate) AddLogDatumIDs(ids ...int64) *CadreEligibleConfigurationCreate {
	cecc.mutation.AddLogDatumIDs(ids...)
	return cecc
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (cecc *CadreEligibleConfigurationCreate) AddLogData(l ...*Logs) *CadreEligibleConfigurationCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cecc.AddLogDatumIDs(ids...)
}

// Mutation returns the CadreEligibleConfigurationMutation object of the builder.
func (cecc *CadreEligibleConfigurationCreate) Mutation() *CadreEligibleConfigurationMutation {
	return cecc.mutation
}

// Save creates the CadreEligibleConfiguration in the database.
func (cecc *CadreEligibleConfigurationCreate) Save(ctx context.Context) (*CadreEligibleConfiguration, error) {
	cecc.defaults()
	return withHooks(ctx, cecc.sqlSave, cecc.mutation, cecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cecc *CadreEligibleConfigurationCreate) SaveX(ctx context.Context) *CadreEligibleConfiguration {
	v, err := cecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cecc *CadreEligibleConfigurationCreate) Exec(ctx context.Context) error {
	_, err := cecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cecc *CadreEligibleConfigurationCreate) ExecX(ctx context.Context) {
	if err := cecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cecc *CadreEligibleConfigurationCreate) defaults() {
	if _, ok := cecc.mutation.CreatedDate(); !ok {
		v := cadreeligibleconfiguration.DefaultCreatedDate()
		cecc.mutation.SetCreatedDate(v)
	}
	if _, ok := cecc.mutation.VerifiedDate(); !ok {
		v := cadreeligibleconfiguration.DefaultVerifiedDate()
		cecc.mutation.SetVerifiedDate(v)
	}
	if _, ok := cecc.mutation.Statuss(); !ok {
		v := cadreeligibleconfiguration.DefaultStatuss
		cecc.mutation.SetStatuss(v)
	}
	if _, ok := cecc.mutation.DeletedDate(); !ok {
		v := cadreeligibleconfiguration.DefaultDeletedDate()
		cecc.mutation.SetDeletedDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cecc *CadreEligibleConfigurationCreate) check() error {
	return nil
}

func (cecc *CadreEligibleConfigurationCreate) sqlSave(ctx context.Context) (*CadreEligibleConfiguration, error) {
	if err := cecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cecc.mutation.id = &_node.ID
	cecc.mutation.done = true
	return _node, nil
}

func (cecc *CadreEligibleConfigurationCreate) createSpec() (*CadreEligibleConfiguration, *sqlgraph.CreateSpec) {
	var (
		_node = &CadreEligibleConfiguration{config: cecc.config}
		_spec = sqlgraph.NewCreateSpec(cadreeligibleconfiguration.Table, sqlgraph.NewFieldSpec(cadreeligibleconfiguration.FieldID, field.TypeInt64))
	)
	if id, ok := cecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cecc.mutation.ExamCode(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldExamCode, field.TypeInt64, value)
		_node.ExamCode = value
	}
	if value, ok := cecc.mutation.ExamName(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := cecc.mutation.ExamShortName(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldExamShortName, field.TypeString, value)
		_node.ExamShortName = value
	}
	if value, ok := cecc.mutation.PostID(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldPostID, field.TypeInt64, value)
		_node.PostID = value
	}
	if value, ok := cecc.mutation.PostCode(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldPostCode, field.TypeString, value)
		_node.PostCode = value
	}
	if value, ok := cecc.mutation.PostDescription(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldPostDescription, field.TypeString, value)
		_node.PostDescription = value
	}
	if value, ok := cecc.mutation.GdsService(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldGdsService, field.TypeInt64, value)
		_node.GdsService = value
	}
	if value, ok := cecc.mutation.CategoryCode(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCategoryCode, field.TypeString, value)
		_node.CategoryCode = value
	}
	if value, ok := cecc.mutation.AgeCriteria(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldAgeCriteria, field.TypeInt64, value)
		_node.AgeCriteria = value
	}
	if value, ok := cecc.mutation.ServiceCriteria(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldServiceCriteria, field.TypeInt64, value)
		_node.ServiceCriteria = value
	}
	if value, ok := cecc.mutation.DrivingLicenceCriteria(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDrivingLicenceCriteria, field.TypeInt64, value)
		_node.DrivingLicenceCriteria = value
	}
	if value, ok := cecc.mutation.ComputerKnowledge(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldComputerKnowledge, field.TypeInt64, value)
		_node.ComputerKnowledge = value
	}
	if value, ok := cecc.mutation.EligibilityBasedOnLevelOfPayMatrix(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldEligibilityBasedOnLevelOfPayMatrix, field.TypeInt64, value)
		_node.EligibilityBasedOnLevelOfPayMatrix = value
	}
	if value, ok := cecc.mutation.EducationCode(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldEducationCode, field.TypeInt64, value)
		_node.EducationCode = value
	}
	if value, ok := cecc.mutation.EducationDescription(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldEducationDescription, field.TypeString, value)
		_node.EducationDescription = value
	}
	if value, ok := cecc.mutation.OrderNumber(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := cecc.mutation.CreatedById(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := cecc.mutation.CreatedByUserName(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := cecc.mutation.CreatedByEmpId(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedByEmpId, field.TypeInt64, value)
		_node.CreatedByEmpId = value
	}
	if value, ok := cecc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := cecc.mutation.CreatedDate(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := cecc.mutation.Verifiedbyid(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedbyid, field.TypeInt64, value)
		_node.Verifiedbyid = value
	}
	if value, ok := cecc.mutation.Verifiedbyusername(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedbyusername, field.TypeString, value)
		_node.Verifiedbyusername = value
	}
	if value, ok := cecc.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
		_node.VerifiedbyEmployeeid = value
	}
	if value, ok := cecc.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedbyDesignation, field.TypeString, value)
		_node.VerifiedbyDesignation = value
	}
	if value, ok := cecc.mutation.VerifiedDate(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedDate, field.TypeTime, value)
		_node.VerifiedDate = value
	}
	if value, ok := cecc.mutation.Statuss(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldStatuss, field.TypeString, value)
		_node.Statuss = value
	}
	if value, ok := cecc.mutation.Deletedbyid(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedbyid, field.TypeInt64, value)
		_node.Deletedbyid = value
	}
	if value, ok := cecc.mutation.Deletedbyusername(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedbyusername, field.TypeString, value)
		_node.Deletedbyusername = value
	}
	if value, ok := cecc.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedbyEmployeeid, field.TypeInt64, value)
		_node.DeletedbyEmployeeid = value
	}
	if value, ok := cecc.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedbyDesignation, field.TypeString, value)
		_node.DeletedbyDesignation = value
	}
	if value, ok := cecc.mutation.DeletedDate(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	if nodes := cecc.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cadreeligibleconfiguration.LogDataTable,
			Columns: []string{cadreeligibleconfiguration.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CadreEligibleConfigurationCreateBulk is the builder for creating many CadreEligibleConfiguration entities in bulk.
type CadreEligibleConfigurationCreateBulk struct {
	config
	builders []*CadreEligibleConfigurationCreate
}

// Save creates the CadreEligibleConfiguration entities in the database.
func (ceccb *CadreEligibleConfigurationCreateBulk) Save(ctx context.Context) ([]*CadreEligibleConfiguration, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ceccb.builders))
	nodes := make([]*CadreEligibleConfiguration, len(ceccb.builders))
	mutators := make([]Mutator, len(ceccb.builders))
	for i := range ceccb.builders {
		func(i int, root context.Context) {
			builder := ceccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CadreEligibleConfigurationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ceccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ceccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ceccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ceccb *CadreEligibleConfigurationCreateBulk) SaveX(ctx context.Context) []*CadreEligibleConfiguration {
	v, err := ceccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ceccb *CadreEligibleConfigurationCreateBulk) Exec(ctx context.Context) error {
	_, err := ceccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceccb *CadreEligibleConfigurationCreateBulk) ExecX(ctx context.Context) {
	if err := ceccb.Exec(ctx); err != nil {
		panic(err)
	}
}
