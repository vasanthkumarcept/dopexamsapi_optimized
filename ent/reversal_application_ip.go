// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/reversal_application_ip"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Reversal_Application_IP is the model entity for the Reversal_Application_IP schema.
type Reversal_Application_IP struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// EmployeeID holds the value of the "EmployeeID" field.
	EmployeeID int64 `json:"EmployeeID,omitempty"`
	// EmployeeName holds the value of the "EmployeeName" field.
	EmployeeName string `json:"EmployeeName,omitempty"`
	// DOB holds the value of the "DOB" field.
	DOB string `json:"DOB,omitempty"`
	// Gender holds the value of the "Gender" field.
	Gender reversal_application_ip.Gender `json:"Gender,omitempty"`
	// MobileNumber holds the value of the "MobileNumber" field.
	MobileNumber string `json:"MobileNumber,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// EmployeeCategory holds the value of the "EmployeeCategory" field.
	EmployeeCategory string `json:"EmployeeCategory,omitempty"`
	// Cadre holds the value of the "Cadre" field.
	Cadre string `json:"Cadre,omitempty"`
	// EmployeePost holds the value of the "EmployeePost" field.
	EmployeePost string `json:"EmployeePost,omitempty"`
	// FacilityID holds the value of the "FacilityID" field.
	FacilityID string `json:"FacilityID,omitempty"`
	// DCCS holds the value of the "DCCS" field.
	DCCS string `json:"DCCS,omitempty"`
	// DCInPresentCadre holds the value of the "DCInPresentCadre" field.
	DCInPresentCadre string `json:"DCInPresentCadre,omitempty"`
	// DeputationOfficeId holds the value of the "DeputationOfficeId" field.
	DeputationOfficeId string `json:"DeputationOfficeId,omitempty"`
	// DisabilityType holds the value of the "DisabilityType" field.
	DisabilityType string `json:"DisabilityType,omitempty"`
	// DisabilityPercentage holds the value of the "DisabilityPercentage" field.
	DisabilityPercentage string `json:"DisabilityPercentage,omitempty"`
	// Education holds the value of the "Education" field.
	Education string `json:"Education,omitempty"`
	// ExamCodeIP holds the value of the "ExamCodeIP" field.
	ExamCodeIP int32 `json:"ExamCodeIP,omitempty"`
	// ExamYear holds the value of the "ExamYear" field.
	ExamYear string `json:"ExamYear,omitempty"`
	// CentrePreference holds the value of the "CentrePreference" field.
	CentrePreference string `json:"CentrePreference,omitempty"`
	// Signature holds the value of the "Signature" field.
	Signature string `json:"Signature,omitempty"`
	// Photo holds the value of the "Photo" field.
	Photo string `json:"Photo,omitempty"`
	// ApplicationStatus holds the value of the "ApplicationStatus" field.
	ApplicationStatus string `json:"ApplicationStatus,omitempty"`
	// ReversalApplnSubmittedDate holds the value of the "ReversalApplnSubmittedDate" field.
	ReversalApplnSubmittedDate time.Time `json:"ReversalApplnSubmittedDate,omitempty"`
	// VARemarks holds the value of the "VA_Remarks" field.
	VARemarks string `json:"VA_Remarks,omitempty"`
	// VAUserName holds the value of the "VA_UserName" field.
	VAUserName string `json:"VA_UserName,omitempty"`
	// VADate holds the value of the "VA_Date" field.
	VADate time.Time `json:"VA_Date,omitempty"`
	// CARemarks holds the value of the "CA_Remarks" field.
	CARemarks string `json:"CA_Remarks,omitempty"`
	// CAUserName holds the value of the "CA_UserName" field.
	CAUserName string `json:"CA_UserName,omitempty"`
	// CADate holds the value of the "CA_Date" field.
	CADate time.Time `json:"CA_Date,omitempty"`
	// AppliactionRemarks holds the value of the "AppliactionRemarks" field.
	AppliactionRemarks string `json:"AppliactionRemarks,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// RoleUserCode holds the value of the "RoleUserCode" field.
	RoleUserCode int32 `json:"RoleUserCode,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reversal_Application_IP) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reversal_application_ip.FieldID, reversal_application_ip.FieldEmployeeID, reversal_application_ip.FieldExamCodeIP, reversal_application_ip.FieldRoleUserCode:
			values[i] = new(sql.NullInt64)
		case reversal_application_ip.FieldEmployeeName, reversal_application_ip.FieldDOB, reversal_application_ip.FieldGender, reversal_application_ip.FieldMobileNumber, reversal_application_ip.FieldEmailID, reversal_application_ip.FieldEmployeeCategory, reversal_application_ip.FieldCadre, reversal_application_ip.FieldEmployeePost, reversal_application_ip.FieldFacilityID, reversal_application_ip.FieldDCCS, reversal_application_ip.FieldDCInPresentCadre, reversal_application_ip.FieldDeputationOfficeId, reversal_application_ip.FieldDisabilityType, reversal_application_ip.FieldDisabilityPercentage, reversal_application_ip.FieldEducation, reversal_application_ip.FieldExamYear, reversal_application_ip.FieldCentrePreference, reversal_application_ip.FieldSignature, reversal_application_ip.FieldPhoto, reversal_application_ip.FieldApplicationStatus, reversal_application_ip.FieldVARemarks, reversal_application_ip.FieldVAUserName, reversal_application_ip.FieldCARemarks, reversal_application_ip.FieldCAUserName, reversal_application_ip.FieldAppliactionRemarks, reversal_application_ip.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case reversal_application_ip.FieldReversalApplnSubmittedDate, reversal_application_ip.FieldVADate, reversal_application_ip.FieldCADate, reversal_application_ip.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reversal_Application_IP fields.
func (rai *Reversal_Application_IP) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reversal_application_ip.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rai.ID = int64(value.Int64)
		case reversal_application_ip.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeID", values[i])
			} else if value.Valid {
				rai.EmployeeID = value.Int64
			}
		case reversal_application_ip.FieldEmployeeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeName", values[i])
			} else if value.Valid {
				rai.EmployeeName = value.String
			}
		case reversal_application_ip.FieldDOB:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DOB", values[i])
			} else if value.Valid {
				rai.DOB = value.String
			}
		case reversal_application_ip.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Gender", values[i])
			} else if value.Valid {
				rai.Gender = reversal_application_ip.Gender(value.String)
			}
		case reversal_application_ip.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumber", values[i])
			} else if value.Valid {
				rai.MobileNumber = value.String
			}
		case reversal_application_ip.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				rai.EmailID = value.String
			}
		case reversal_application_ip.FieldEmployeeCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategory", values[i])
			} else if value.Valid {
				rai.EmployeeCategory = value.String
			}
		case reversal_application_ip.FieldCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Cadre", values[i])
			} else if value.Valid {
				rai.Cadre = value.String
			}
		case reversal_application_ip.FieldEmployeePost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeePost", values[i])
			} else if value.Valid {
				rai.EmployeePost = value.String
			}
		case reversal_application_ip.FieldFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityID", values[i])
			} else if value.Valid {
				rai.FacilityID = value.String
			}
		case reversal_application_ip.FieldDCCS:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCCS", values[i])
			} else if value.Valid {
				rai.DCCS = value.String
			}
		case reversal_application_ip.FieldDCInPresentCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCInPresentCadre", values[i])
			} else if value.Valid {
				rai.DCInPresentCadre = value.String
			}
		case reversal_application_ip.FieldDeputationOfficeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeputationOfficeId", values[i])
			} else if value.Valid {
				rai.DeputationOfficeId = value.String
			}
		case reversal_application_ip.FieldDisabilityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityType", values[i])
			} else if value.Valid {
				rai.DisabilityType = value.String
			}
		case reversal_application_ip.FieldDisabilityPercentage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityPercentage", values[i])
			} else if value.Valid {
				rai.DisabilityPercentage = value.String
			}
		case reversal_application_ip.FieldEducation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Education", values[i])
			} else if value.Valid {
				rai.Education = value.String
			}
		case reversal_application_ip.FieldExamCodeIP:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCodeIP", values[i])
			} else if value.Valid {
				rai.ExamCodeIP = int32(value.Int64)
			}
		case reversal_application_ip.FieldExamYear:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamYear", values[i])
			} else if value.Valid {
				rai.ExamYear = value.String
			}
		case reversal_application_ip.FieldCentrePreference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CentrePreference", values[i])
			} else if value.Valid {
				rai.CentrePreference = value.String
			}
		case reversal_application_ip.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Signature", values[i])
			} else if value.Valid {
				rai.Signature = value.String
			}
		case reversal_application_ip.FieldPhoto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Photo", values[i])
			} else if value.Valid {
				rai.Photo = value.String
			}
		case reversal_application_ip.FieldApplicationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationStatus", values[i])
			} else if value.Valid {
				rai.ApplicationStatus = value.String
			}
		case reversal_application_ip.FieldReversalApplnSubmittedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ReversalApplnSubmittedDate", values[i])
			} else if value.Valid {
				rai.ReversalApplnSubmittedDate = value.Time
			}
		case reversal_application_ip.FieldVARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VA_Remarks", values[i])
			} else if value.Valid {
				rai.VARemarks = value.String
			}
		case reversal_application_ip.FieldVAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VA_UserName", values[i])
			} else if value.Valid {
				rai.VAUserName = value.String
			}
		case reversal_application_ip.FieldVADate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field VA_Date", values[i])
			} else if value.Valid {
				rai.VADate = value.Time
			}
		case reversal_application_ip.FieldCARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_Remarks", values[i])
			} else if value.Valid {
				rai.CARemarks = value.String
			}
		case reversal_application_ip.FieldCAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_UserName", values[i])
			} else if value.Valid {
				rai.CAUserName = value.String
			}
		case reversal_application_ip.FieldCADate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CA_Date", values[i])
			} else if value.Valid {
				rai.CADate = value.Time
			}
		case reversal_application_ip.FieldAppliactionRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AppliactionRemarks", values[i])
			} else if value.Valid {
				rai.AppliactionRemarks = value.String
			}
		case reversal_application_ip.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				rai.UpdatedAt = value.Time
			}
		case reversal_application_ip.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				rai.UpdatedBy = value.String
			}
		case reversal_application_ip.FieldRoleUserCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RoleUserCode", values[i])
			} else if value.Valid {
				rai.RoleUserCode = int32(value.Int64)
			}
		default:
			rai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Reversal_Application_IP.
// This includes values selected through modifiers, order, etc.
func (rai *Reversal_Application_IP) Value(name string) (ent.Value, error) {
	return rai.selectValues.Get(name)
}

// Update returns a builder for updating this Reversal_Application_IP.
// Note that you need to call Reversal_Application_IP.Unwrap() before calling this method if this Reversal_Application_IP
// was returned from a transaction, and the transaction was committed or rolled back.
func (rai *Reversal_Application_IP) Update() *ReversalApplicationIPUpdateOne {
	return NewReversalApplicationIPClient(rai.config).UpdateOne(rai)
}

// Unwrap unwraps the Reversal_Application_IP entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rai *Reversal_Application_IP) Unwrap() *Reversal_Application_IP {
	_tx, ok := rai.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reversal_Application_IP is not a transactional entity")
	}
	rai.config.driver = _tx.drv
	return rai
}

// String implements the fmt.Stringer.
func (rai *Reversal_Application_IP) String() string {
	var builder strings.Builder
	builder.WriteString("Reversal_Application_IP(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rai.ID))
	builder.WriteString("EmployeeID=")
	builder.WriteString(fmt.Sprintf("%v", rai.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeName=")
	builder.WriteString(rai.EmployeeName)
	builder.WriteString(", ")
	builder.WriteString("DOB=")
	builder.WriteString(rai.DOB)
	builder.WriteString(", ")
	builder.WriteString("Gender=")
	builder.WriteString(fmt.Sprintf("%v", rai.Gender))
	builder.WriteString(", ")
	builder.WriteString("MobileNumber=")
	builder.WriteString(rai.MobileNumber)
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(rai.EmailID)
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategory=")
	builder.WriteString(rai.EmployeeCategory)
	builder.WriteString(", ")
	builder.WriteString("Cadre=")
	builder.WriteString(rai.Cadre)
	builder.WriteString(", ")
	builder.WriteString("EmployeePost=")
	builder.WriteString(rai.EmployeePost)
	builder.WriteString(", ")
	builder.WriteString("FacilityID=")
	builder.WriteString(rai.FacilityID)
	builder.WriteString(", ")
	builder.WriteString("DCCS=")
	builder.WriteString(rai.DCCS)
	builder.WriteString(", ")
	builder.WriteString("DCInPresentCadre=")
	builder.WriteString(rai.DCInPresentCadre)
	builder.WriteString(", ")
	builder.WriteString("DeputationOfficeId=")
	builder.WriteString(rai.DeputationOfficeId)
	builder.WriteString(", ")
	builder.WriteString("DisabilityType=")
	builder.WriteString(rai.DisabilityType)
	builder.WriteString(", ")
	builder.WriteString("DisabilityPercentage=")
	builder.WriteString(rai.DisabilityPercentage)
	builder.WriteString(", ")
	builder.WriteString("Education=")
	builder.WriteString(rai.Education)
	builder.WriteString(", ")
	builder.WriteString("ExamCodeIP=")
	builder.WriteString(fmt.Sprintf("%v", rai.ExamCodeIP))
	builder.WriteString(", ")
	builder.WriteString("ExamYear=")
	builder.WriteString(rai.ExamYear)
	builder.WriteString(", ")
	builder.WriteString("CentrePreference=")
	builder.WriteString(rai.CentrePreference)
	builder.WriteString(", ")
	builder.WriteString("Signature=")
	builder.WriteString(rai.Signature)
	builder.WriteString(", ")
	builder.WriteString("Photo=")
	builder.WriteString(rai.Photo)
	builder.WriteString(", ")
	builder.WriteString("ApplicationStatus=")
	builder.WriteString(rai.ApplicationStatus)
	builder.WriteString(", ")
	builder.WriteString("ReversalApplnSubmittedDate=")
	builder.WriteString(rai.ReversalApplnSubmittedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("VA_Remarks=")
	builder.WriteString(rai.VARemarks)
	builder.WriteString(", ")
	builder.WriteString("VA_UserName=")
	builder.WriteString(rai.VAUserName)
	builder.WriteString(", ")
	builder.WriteString("VA_Date=")
	builder.WriteString(rai.VADate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CA_Remarks=")
	builder.WriteString(rai.CARemarks)
	builder.WriteString(", ")
	builder.WriteString("CA_UserName=")
	builder.WriteString(rai.CAUserName)
	builder.WriteString(", ")
	builder.WriteString("CA_Date=")
	builder.WriteString(rai.CADate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("AppliactionRemarks=")
	builder.WriteString(rai.AppliactionRemarks)
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(rai.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(rai.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("RoleUserCode=")
	builder.WriteString(fmt.Sprintf("%v", rai.RoleUserCode))
	builder.WriteByte(')')
	return builder.String()
}

// Reversal_Application_IPs is a parsable slice of Reversal_Application_IP.
type Reversal_Application_IPs []*Reversal_Application_IP
