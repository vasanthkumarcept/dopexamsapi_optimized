// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/recommendationsmtspmmgapplications"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RecommendationsMTSPMMGApplications is the model entity for the RecommendationsMTSPMMGApplications schema.
type RecommendationsMTSPMMGApplications struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ApplicationID holds the value of the "ApplicationID" field.
	ApplicationID int64 `json:"ApplicationID,omitempty"`
	// EmployeeID holds the value of the "EmployeeID" field.
	EmployeeID int64 `json:"EmployeeID,omitempty"`
	// ExamNameCode holds the value of the "ExamNameCode" field.
	ExamNameCode string `json:"ExamNameCode,omitempty"`
	// ExamYear holds the value of the "ExamYear" field.
	ExamYear string `json:"ExamYear,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// VacancyYear holds the value of the "VacancyYear" field.
	VacancyYear int32 `json:"VacancyYear,omitempty"`
	// CARecommendations holds the value of the "CA_Recommendations" field.
	CARecommendations string `json:"CA_Recommendations,omitempty"`
	// CAUpdatedAt holds the value of the "CA_UpdatedAt" field.
	CAUpdatedAt time.Time `json:"CA_UpdatedAt,omitempty"`
	// CAUserName holds the value of the "CA_UserName" field.
	CAUserName string `json:"CA_UserName,omitempty"`
	// CARemarks holds the value of the "CA_Remarks" field.
	CARemarks string `json:"CA_Remarks,omitempty"`
	// NORecommendations holds the value of the "NO_Recommendations" field.
	NORecommendations string `json:"NO_Recommendations,omitempty"`
	// NOUpdatedAt holds the value of the "NO_UpdatedAt" field.
	NOUpdatedAt time.Time `json:"NO_UpdatedAt,omitempty"`
	// NOUserName holds the value of the "NO_UserName" field.
	NOUserName string `json:"NO_UserName,omitempty"`
	// NORemarks holds the value of the "NO_Remarks" field.
	NORemarks string `json:"NO_Remarks,omitempty"`
	// ApplicationStatus holds the value of the "ApplicationStatus" field.
	ApplicationStatus string `json:"ApplicationStatus,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// GenerateHallTicketFlag holds the value of the "GenerateHallTicketFlag" field.
	GenerateHallTicketFlag bool `json:"GenerateHallTicketFlag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecommendationsMTSPMMGApplicationsQuery when eager-loading is set.
	Edges        RecommendationsMTSPMMGApplicationsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RecommendationsMTSPMMGApplicationsEdges holds the relations/edges for other nodes in the graph.
type RecommendationsMTSPMMGApplicationsEdges struct {
	// ApplnRef holds the value of the ApplnRef edge.
	ApplnRef *Exam_Application_MTSPMMG `json:"ApplnRef,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ApplnRefOrErr returns the ApplnRef value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecommendationsMTSPMMGApplicationsEdges) ApplnRefOrErr() (*Exam_Application_MTSPMMG, error) {
	if e.loadedTypes[0] {
		if e.ApplnRef == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exam_application_mtspmmg.Label}
		}
		return e.ApplnRef, nil
	}
	return nil, &NotLoadedError{edge: "ApplnRef"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RecommendationsMTSPMMGApplications) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recommendationsmtspmmgapplications.FieldGenerateHallTicketFlag:
			values[i] = new(sql.NullBool)
		case recommendationsmtspmmgapplications.FieldID, recommendationsmtspmmgapplications.FieldApplicationID, recommendationsmtspmmgapplications.FieldEmployeeID, recommendationsmtspmmgapplications.FieldVacancyYear:
			values[i] = new(sql.NullInt64)
		case recommendationsmtspmmgapplications.FieldExamNameCode, recommendationsmtspmmgapplications.FieldExamYear, recommendationsmtspmmgapplications.FieldExamName, recommendationsmtspmmgapplications.FieldCARecommendations, recommendationsmtspmmgapplications.FieldCAUserName, recommendationsmtspmmgapplications.FieldCARemarks, recommendationsmtspmmgapplications.FieldNORecommendations, recommendationsmtspmmgapplications.FieldNOUserName, recommendationsmtspmmgapplications.FieldNORemarks, recommendationsmtspmmgapplications.FieldApplicationStatus, recommendationsmtspmmgapplications.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case recommendationsmtspmmgapplications.FieldCAUpdatedAt, recommendationsmtspmmgapplications.FieldNOUpdatedAt, recommendationsmtspmmgapplications.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RecommendationsMTSPMMGApplications fields.
func (rma *RecommendationsMTSPMMGApplications) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recommendationsmtspmmgapplications.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rma.ID = int64(value.Int64)
		case recommendationsmtspmmgapplications.FieldApplicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationID", values[i])
			} else if value.Valid {
				rma.ApplicationID = value.Int64
			}
		case recommendationsmtspmmgapplications.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeID", values[i])
			} else if value.Valid {
				rma.EmployeeID = value.Int64
			}
		case recommendationsmtspmmgapplications.FieldExamNameCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamNameCode", values[i])
			} else if value.Valid {
				rma.ExamNameCode = value.String
			}
		case recommendationsmtspmmgapplications.FieldExamYear:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamYear", values[i])
			} else if value.Valid {
				rma.ExamYear = value.String
			}
		case recommendationsmtspmmgapplications.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				rma.ExamName = value.String
			}
		case recommendationsmtspmmgapplications.FieldVacancyYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field VacancyYear", values[i])
			} else if value.Valid {
				rma.VacancyYear = int32(value.Int64)
			}
		case recommendationsmtspmmgapplications.FieldCARecommendations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_Recommendations", values[i])
			} else if value.Valid {
				rma.CARecommendations = value.String
			}
		case recommendationsmtspmmgapplications.FieldCAUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CA_UpdatedAt", values[i])
			} else if value.Valid {
				rma.CAUpdatedAt = value.Time
			}
		case recommendationsmtspmmgapplications.FieldCAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_UserName", values[i])
			} else if value.Valid {
				rma.CAUserName = value.String
			}
		case recommendationsmtspmmgapplications.FieldCARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_Remarks", values[i])
			} else if value.Valid {
				rma.CARemarks = value.String
			}
		case recommendationsmtspmmgapplications.FieldNORecommendations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NO_Recommendations", values[i])
			} else if value.Valid {
				rma.NORecommendations = value.String
			}
		case recommendationsmtspmmgapplications.FieldNOUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field NO_UpdatedAt", values[i])
			} else if value.Valid {
				rma.NOUpdatedAt = value.Time
			}
		case recommendationsmtspmmgapplications.FieldNOUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NO_UserName", values[i])
			} else if value.Valid {
				rma.NOUserName = value.String
			}
		case recommendationsmtspmmgapplications.FieldNORemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NO_Remarks", values[i])
			} else if value.Valid {
				rma.NORemarks = value.String
			}
		case recommendationsmtspmmgapplications.FieldApplicationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationStatus", values[i])
			} else if value.Valid {
				rma.ApplicationStatus = value.String
			}
		case recommendationsmtspmmgapplications.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				rma.UpdatedAt = value.Time
			}
		case recommendationsmtspmmgapplications.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				rma.UpdatedBy = value.String
			}
		case recommendationsmtspmmgapplications.FieldGenerateHallTicketFlag:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field GenerateHallTicketFlag", values[i])
			} else if value.Valid {
				rma.GenerateHallTicketFlag = value.Bool
			}
		default:
			rma.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RecommendationsMTSPMMGApplications.
// This includes values selected through modifiers, order, etc.
func (rma *RecommendationsMTSPMMGApplications) Value(name string) (ent.Value, error) {
	return rma.selectValues.Get(name)
}

// QueryApplnRef queries the "ApplnRef" edge of the RecommendationsMTSPMMGApplications entity.
func (rma *RecommendationsMTSPMMGApplications) QueryApplnRef() *ExamApplicationMTSPMMGQuery {
	return NewRecommendationsMTSPMMGApplicationsClient(rma.config).QueryApplnRef(rma)
}

// Update returns a builder for updating this RecommendationsMTSPMMGApplications.
// Note that you need to call RecommendationsMTSPMMGApplications.Unwrap() before calling this method if this RecommendationsMTSPMMGApplications
// was returned from a transaction, and the transaction was committed or rolled back.
func (rma *RecommendationsMTSPMMGApplications) Update() *RecommendationsMTSPMMGApplicationsUpdateOne {
	return NewRecommendationsMTSPMMGApplicationsClient(rma.config).UpdateOne(rma)
}

// Unwrap unwraps the RecommendationsMTSPMMGApplications entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rma *RecommendationsMTSPMMGApplications) Unwrap() *RecommendationsMTSPMMGApplications {
	_tx, ok := rma.config.driver.(*txDriver)
	if !ok {
		panic("ent: RecommendationsMTSPMMGApplications is not a transactional entity")
	}
	rma.config.driver = _tx.drv
	return rma
}

// String implements the fmt.Stringer.
func (rma *RecommendationsMTSPMMGApplications) String() string {
	var builder strings.Builder
	builder.WriteString("RecommendationsMTSPMMGApplications(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rma.ID))
	builder.WriteString("ApplicationID=")
	builder.WriteString(fmt.Sprintf("%v", rma.ApplicationID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeID=")
	builder.WriteString(fmt.Sprintf("%v", rma.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("ExamNameCode=")
	builder.WriteString(rma.ExamNameCode)
	builder.WriteString(", ")
	builder.WriteString("ExamYear=")
	builder.WriteString(rma.ExamYear)
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(rma.ExamName)
	builder.WriteString(", ")
	builder.WriteString("VacancyYear=")
	builder.WriteString(fmt.Sprintf("%v", rma.VacancyYear))
	builder.WriteString(", ")
	builder.WriteString("CA_Recommendations=")
	builder.WriteString(rma.CARecommendations)
	builder.WriteString(", ")
	builder.WriteString("CA_UpdatedAt=")
	builder.WriteString(rma.CAUpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CA_UserName=")
	builder.WriteString(rma.CAUserName)
	builder.WriteString(", ")
	builder.WriteString("CA_Remarks=")
	builder.WriteString(rma.CARemarks)
	builder.WriteString(", ")
	builder.WriteString("NO_Recommendations=")
	builder.WriteString(rma.NORecommendations)
	builder.WriteString(", ")
	builder.WriteString("NO_UpdatedAt=")
	builder.WriteString(rma.NOUpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("NO_UserName=")
	builder.WriteString(rma.NOUserName)
	builder.WriteString(", ")
	builder.WriteString("NO_Remarks=")
	builder.WriteString(rma.NORemarks)
	builder.WriteString(", ")
	builder.WriteString("ApplicationStatus=")
	builder.WriteString(rma.ApplicationStatus)
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(rma.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(rma.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("GenerateHallTicketFlag=")
	builder.WriteString(fmt.Sprintf("%v", rma.GenerateHallTicketFlag))
	builder.WriteByte(')')
	return builder.String()
}

// RecommendationsMTSPMMGApplicationsSlice is a parsable slice of RecommendationsMTSPMMGApplications.
type RecommendationsMTSPMMGApplicationsSlice []*RecommendationsMTSPMMGApplications
