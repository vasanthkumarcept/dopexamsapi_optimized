// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/predicate"
	"recruit/ent/recommendationspsapplications"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsPSApplicationsDelete is the builder for deleting a RecommendationsPSApplications entity.
type RecommendationsPSApplicationsDelete struct {
	config
	hooks    []Hook
	mutation *RecommendationsPSApplicationsMutation
}

// Where appends a list predicates to the RecommendationsPSApplicationsDelete builder.
func (rpad *RecommendationsPSApplicationsDelete) Where(ps ...predicate.RecommendationsPSApplications) *RecommendationsPSApplicationsDelete {
	rpad.mutation.Where(ps...)
	return rpad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rpad *RecommendationsPSApplicationsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rpad.sqlExec, rpad.mutation, rpad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rpad *RecommendationsPSApplicationsDelete) ExecX(ctx context.Context) int {
	n, err := rpad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rpad *RecommendationsPSApplicationsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(recommendationspsapplications.Table, sqlgraph.NewFieldSpec(recommendationspsapplications.FieldID, field.TypeInt64))
	if ps := rpad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rpad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rpad.mutation.done = true
	return affected, err
}

// RecommendationsPSApplicationsDeleteOne is the builder for deleting a single RecommendationsPSApplications entity.
type RecommendationsPSApplicationsDeleteOne struct {
	rpad *RecommendationsPSApplicationsDelete
}

// Where appends a list predicates to the RecommendationsPSApplicationsDelete builder.
func (rpado *RecommendationsPSApplicationsDeleteOne) Where(ps ...predicate.RecommendationsPSApplications) *RecommendationsPSApplicationsDeleteOne {
	rpado.rpad.mutation.Where(ps...)
	return rpado
}

// Exec executes the deletion query.
func (rpado *RecommendationsPSApplicationsDeleteOne) Exec(ctx context.Context) error {
	n, err := rpado.rpad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{recommendationspsapplications.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rpado *RecommendationsPSApplicationsDeleteOne) ExecX(ctx context.Context) {
	if err := rpado.Exec(ctx); err != nil {
		panic(err)
	}
}
