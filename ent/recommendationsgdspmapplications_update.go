// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsgdspmapplications"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsGDSPMApplicationsUpdate is the builder for updating RecommendationsGDSPMApplications entities.
type RecommendationsGDSPMApplicationsUpdate struct {
	config
	hooks    []Hook
	mutation *RecommendationsGDSPMApplicationsMutation
}

// Where appends a list predicates to the RecommendationsGDSPMApplicationsUpdate builder.
func (rgau *RecommendationsGDSPMApplicationsUpdate) Where(ps ...predicate.RecommendationsGDSPMApplications) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.Where(ps...)
	return rgau
}

// SetApplicationID sets the "ApplicationID" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetApplicationID(i int64) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ResetApplicationID()
	rgau.mutation.SetApplicationID(i)
	return rgau
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableApplicationID(i *int64) *RecommendationsGDSPMApplicationsUpdate {
	if i != nil {
		rgau.SetApplicationID(*i)
	}
	return rgau
}

// AddApplicationID adds i to the "ApplicationID" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) AddApplicationID(i int64) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.AddApplicationID(i)
	return rgau
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearApplicationID() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearApplicationID()
	return rgau
}

// SetEmployeeID sets the "EmployeeID" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetEmployeeID(i int64) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ResetEmployeeID()
	rgau.mutation.SetEmployeeID(i)
	return rgau
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableEmployeeID(i *int64) *RecommendationsGDSPMApplicationsUpdate {
	if i != nil {
		rgau.SetEmployeeID(*i)
	}
	return rgau
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) AddEmployeeID(i int64) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.AddEmployeeID(i)
	return rgau
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearEmployeeID() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearEmployeeID()
	return rgau
}

// SetExamNameCode sets the "ExamNameCode" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetExamNameCode(s string) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetExamNameCode(s)
	return rgau
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableExamNameCode(s *string) *RecommendationsGDSPMApplicationsUpdate {
	if s != nil {
		rgau.SetExamNameCode(*s)
	}
	return rgau
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearExamNameCode() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearExamNameCode()
	return rgau
}

// SetExamYear sets the "ExamYear" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetExamYear(s string) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetExamYear(s)
	return rgau
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableExamYear(s *string) *RecommendationsGDSPMApplicationsUpdate {
	if s != nil {
		rgau.SetExamYear(*s)
	}
	return rgau
}

// ClearExamYear clears the value of the "ExamYear" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearExamYear() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearExamYear()
	return rgau
}

// SetVacancyYear sets the "VacancyYear" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetVacancyYear(i int32) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ResetVacancyYear()
	rgau.mutation.SetVacancyYear(i)
	return rgau
}

// SetNillableVacancyYear sets the "VacancyYear" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableVacancyYear(i *int32) *RecommendationsGDSPMApplicationsUpdate {
	if i != nil {
		rgau.SetVacancyYear(*i)
	}
	return rgau
}

// AddVacancyYear adds i to the "VacancyYear" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) AddVacancyYear(i int32) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.AddVacancyYear(i)
	return rgau
}

// ClearVacancyYear clears the value of the "VacancyYear" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearVacancyYear() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearVacancyYear()
	return rgau
}

// SetPost sets the "Post" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetPost(s string) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetPost(s)
	return rgau
}

// SetNillablePost sets the "Post" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillablePost(s *string) *RecommendationsGDSPMApplicationsUpdate {
	if s != nil {
		rgau.SetPost(*s)
	}
	return rgau
}

// ClearPost clears the value of the "Post" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearPost() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearPost()
	return rgau
}

// SetEligible sets the "Eligible" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetEligible(b bool) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetEligible(b)
	return rgau
}

// SetNillableEligible sets the "Eligible" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableEligible(b *bool) *RecommendationsGDSPMApplicationsUpdate {
	if b != nil {
		rgau.SetEligible(*b)
	}
	return rgau
}

// ClearEligible clears the value of the "Eligible" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearEligible() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearEligible()
	return rgau
}

// SetCARecommendations sets the "CA_Recommendations" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetCARecommendations(s string) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetCARecommendations(s)
	return rgau
}

// SetNillableCARecommendations sets the "CA_Recommendations" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableCARecommendations(s *string) *RecommendationsGDSPMApplicationsUpdate {
	if s != nil {
		rgau.SetCARecommendations(*s)
	}
	return rgau
}

// ClearCARecommendations clears the value of the "CA_Recommendations" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearCARecommendations() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearCARecommendations()
	return rgau
}

// SetCAUpdatedAt sets the "CA_UpdatedAt" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetCAUpdatedAt(t time.Time) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetCAUpdatedAt(t)
	return rgau
}

// SetNillableCAUpdatedAt sets the "CA_UpdatedAt" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableCAUpdatedAt(t *time.Time) *RecommendationsGDSPMApplicationsUpdate {
	if t != nil {
		rgau.SetCAUpdatedAt(*t)
	}
	return rgau
}

// ClearCAUpdatedAt clears the value of the "CA_UpdatedAt" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearCAUpdatedAt() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearCAUpdatedAt()
	return rgau
}

// SetCAUserName sets the "CA_UserName" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetCAUserName(s string) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetCAUserName(s)
	return rgau
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableCAUserName(s *string) *RecommendationsGDSPMApplicationsUpdate {
	if s != nil {
		rgau.SetCAUserName(*s)
	}
	return rgau
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearCAUserName() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearCAUserName()
	return rgau
}

// SetCARemarks sets the "CA_Remarks" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetCARemarks(s string) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetCARemarks(s)
	return rgau
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableCARemarks(s *string) *RecommendationsGDSPMApplicationsUpdate {
	if s != nil {
		rgau.SetCARemarks(*s)
	}
	return rgau
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearCARemarks() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearCARemarks()
	return rgau
}

// SetNORecommendations sets the "NO_Recommendations" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNORecommendations(s string) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetNORecommendations(s)
	return rgau
}

// SetNillableNORecommendations sets the "NO_Recommendations" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableNORecommendations(s *string) *RecommendationsGDSPMApplicationsUpdate {
	if s != nil {
		rgau.SetNORecommendations(*s)
	}
	return rgau
}

// ClearNORecommendations clears the value of the "NO_Recommendations" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearNORecommendations() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearNORecommendations()
	return rgau
}

// SetNOUpdatedAt sets the "NO_UpdatedAt" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNOUpdatedAt(t time.Time) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetNOUpdatedAt(t)
	return rgau
}

// SetNillableNOUpdatedAt sets the "NO_UpdatedAt" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableNOUpdatedAt(t *time.Time) *RecommendationsGDSPMApplicationsUpdate {
	if t != nil {
		rgau.SetNOUpdatedAt(*t)
	}
	return rgau
}

// ClearNOUpdatedAt clears the value of the "NO_UpdatedAt" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearNOUpdatedAt() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearNOUpdatedAt()
	return rgau
}

// SetNOUserName sets the "NO_UserName" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNOUserName(s string) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetNOUserName(s)
	return rgau
}

// SetNillableNOUserName sets the "NO_UserName" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableNOUserName(s *string) *RecommendationsGDSPMApplicationsUpdate {
	if s != nil {
		rgau.SetNOUserName(*s)
	}
	return rgau
}

// ClearNOUserName clears the value of the "NO_UserName" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearNOUserName() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearNOUserName()
	return rgau
}

// SetNORemarks sets the "NO_Remarks" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNORemarks(s string) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetNORemarks(s)
	return rgau
}

// SetNillableNORemarks sets the "NO_Remarks" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableNORemarks(s *string) *RecommendationsGDSPMApplicationsUpdate {
	if s != nil {
		rgau.SetNORemarks(*s)
	}
	return rgau
}

// ClearNORemarks clears the value of the "NO_Remarks" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearNORemarks() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearNORemarks()
	return rgau
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetApplicationStatus(s string) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetApplicationStatus(s)
	return rgau
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableApplicationStatus(s *string) *RecommendationsGDSPMApplicationsUpdate {
	if s != nil {
		rgau.SetApplicationStatus(*s)
	}
	return rgau
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearApplicationStatus() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearApplicationStatus()
	return rgau
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetUpdatedAt(t time.Time) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetUpdatedAt(t)
	return rgau
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableUpdatedAt(t *time.Time) *RecommendationsGDSPMApplicationsUpdate {
	if t != nil {
		rgau.SetUpdatedAt(*t)
	}
	return rgau
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearUpdatedAt() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearUpdatedAt()
	return rgau
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetUpdatedBy(s string) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetUpdatedBy(s)
	return rgau
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableUpdatedBy(s *string) *RecommendationsGDSPMApplicationsUpdate {
	if s != nil {
		rgau.SetUpdatedBy(*s)
	}
	return rgau
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearUpdatedBy() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearUpdatedBy()
	return rgau
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetGenerateHallTicketFlag(b bool) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetGenerateHallTicketFlag(b)
	return rgau
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableGenerateHallTicketFlag(b *bool) *RecommendationsGDSPMApplicationsUpdate {
	if b != nil {
		rgau.SetGenerateHallTicketFlag(*b)
	}
	return rgau
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearGenerateHallTicketFlag() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearGenerateHallTicketFlag()
	return rgau
}

// SetApplnRefID sets the "ApplnRef" edge to the Exam_Applications_GDSPM entity by ID.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetApplnRefID(id int64) *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.SetApplnRefID(id)
	return rgau
}

// SetNillableApplnRefID sets the "ApplnRef" edge to the Exam_Applications_GDSPM entity by ID if the given value is not nil.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetNillableApplnRefID(id *int64) *RecommendationsGDSPMApplicationsUpdate {
	if id != nil {
		rgau = rgau.SetApplnRefID(*id)
	}
	return rgau
}

// SetApplnRef sets the "ApplnRef" edge to the Exam_Applications_GDSPM entity.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SetApplnRef(e *Exam_Applications_GDSPM) *RecommendationsGDSPMApplicationsUpdate {
	return rgau.SetApplnRefID(e.ID)
}

// Mutation returns the RecommendationsGDSPMApplicationsMutation object of the builder.
func (rgau *RecommendationsGDSPMApplicationsUpdate) Mutation() *RecommendationsGDSPMApplicationsMutation {
	return rgau.mutation
}

// ClearApplnRef clears the "ApplnRef" edge to the Exam_Applications_GDSPM entity.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ClearApplnRef() *RecommendationsGDSPMApplicationsUpdate {
	rgau.mutation.ClearApplnRef()
	return rgau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rgau *RecommendationsGDSPMApplicationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rgau.sqlSave, rgau.mutation, rgau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rgau *RecommendationsGDSPMApplicationsUpdate) SaveX(ctx context.Context) int {
	affected, err := rgau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rgau *RecommendationsGDSPMApplicationsUpdate) Exec(ctx context.Context) error {
	_, err := rgau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rgau *RecommendationsGDSPMApplicationsUpdate) ExecX(ctx context.Context) {
	if err := rgau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rgau *RecommendationsGDSPMApplicationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(recommendationsgdspmapplications.Table, recommendationsgdspmapplications.Columns, sqlgraph.NewFieldSpec(recommendationsgdspmapplications.FieldID, field.TypeInt64))
	if ps := rgau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rgau.mutation.ApplicationID(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if value, ok := rgau.mutation.AddedApplicationID(); ok {
		_spec.AddField(recommendationsgdspmapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if rgau.mutation.ApplicationIDCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldApplicationID, field.TypeInt64)
	}
	if value, ok := rgau.mutation.EmployeeID(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := rgau.mutation.AddedEmployeeID(); ok {
		_spec.AddField(recommendationsgdspmapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if rgau.mutation.EmployeeIDCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := rgau.mutation.ExamNameCode(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldExamNameCode, field.TypeString, value)
	}
	if rgau.mutation.ExamNameCodeCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldExamNameCode, field.TypeString)
	}
	if value, ok := rgau.mutation.ExamYear(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldExamYear, field.TypeString, value)
	}
	if rgau.mutation.ExamYearCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldExamYear, field.TypeString)
	}
	if value, ok := rgau.mutation.VacancyYear(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if value, ok := rgau.mutation.AddedVacancyYear(); ok {
		_spec.AddField(recommendationsgdspmapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if rgau.mutation.VacancyYearCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldVacancyYear, field.TypeInt32)
	}
	if value, ok := rgau.mutation.Post(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldPost, field.TypeString, value)
	}
	if rgau.mutation.PostCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldPost, field.TypeString)
	}
	if value, ok := rgau.mutation.Eligible(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldEligible, field.TypeBool, value)
	}
	if rgau.mutation.EligibleCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldEligible, field.TypeBool)
	}
	if value, ok := rgau.mutation.CARecommendations(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldCARecommendations, field.TypeString, value)
	}
	if rgau.mutation.CARecommendationsCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldCARecommendations, field.TypeString)
	}
	if value, ok := rgau.mutation.CAUpdatedAt(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldCAUpdatedAt, field.TypeTime, value)
	}
	if rgau.mutation.CAUpdatedAtCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldCAUpdatedAt, field.TypeTime)
	}
	if value, ok := rgau.mutation.CAUserName(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldCAUserName, field.TypeString, value)
	}
	if rgau.mutation.CAUserNameCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldCAUserName, field.TypeString)
	}
	if value, ok := rgau.mutation.CARemarks(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldCARemarks, field.TypeString, value)
	}
	if rgau.mutation.CARemarksCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldCARemarks, field.TypeString)
	}
	if value, ok := rgau.mutation.NORecommendations(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldNORecommendations, field.TypeString, value)
	}
	if rgau.mutation.NORecommendationsCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldNORecommendations, field.TypeString)
	}
	if value, ok := rgau.mutation.NOUpdatedAt(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldNOUpdatedAt, field.TypeTime, value)
	}
	if rgau.mutation.NOUpdatedAtCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldNOUpdatedAt, field.TypeTime)
	}
	if value, ok := rgau.mutation.NOUserName(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldNOUserName, field.TypeString, value)
	}
	if rgau.mutation.NOUserNameCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldNOUserName, field.TypeString)
	}
	if value, ok := rgau.mutation.NORemarks(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldNORemarks, field.TypeString, value)
	}
	if rgau.mutation.NORemarksCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldNORemarks, field.TypeString)
	}
	if value, ok := rgau.mutation.ApplicationStatus(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldApplicationStatus, field.TypeString, value)
	}
	if rgau.mutation.ApplicationStatusCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := rgau.mutation.UpdatedAt(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldUpdatedAt, field.TypeTime, value)
	}
	if rgau.mutation.UpdatedAtCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := rgau.mutation.UpdatedBy(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldUpdatedBy, field.TypeString, value)
	}
	if rgau.mutation.UpdatedByCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := rgau.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if rgau.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if rgau.mutation.ApplnRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsgdspmapplications.ApplnRefTable,
			Columns: []string{recommendationsgdspmapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rgau.mutation.ApplnRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsgdspmapplications.ApplnRefTable,
			Columns: []string{recommendationsgdspmapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rgau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendationsgdspmapplications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rgau.mutation.done = true
	return n, nil
}

// RecommendationsGDSPMApplicationsUpdateOne is the builder for updating a single RecommendationsGDSPMApplications entity.
type RecommendationsGDSPMApplicationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecommendationsGDSPMApplicationsMutation
}

// SetApplicationID sets the "ApplicationID" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetApplicationID(i int64) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ResetApplicationID()
	rgauo.mutation.SetApplicationID(i)
	return rgauo
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableApplicationID(i *int64) *RecommendationsGDSPMApplicationsUpdateOne {
	if i != nil {
		rgauo.SetApplicationID(*i)
	}
	return rgauo
}

// AddApplicationID adds i to the "ApplicationID" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) AddApplicationID(i int64) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.AddApplicationID(i)
	return rgauo
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearApplicationID() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearApplicationID()
	return rgauo
}

// SetEmployeeID sets the "EmployeeID" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetEmployeeID(i int64) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ResetEmployeeID()
	rgauo.mutation.SetEmployeeID(i)
	return rgauo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableEmployeeID(i *int64) *RecommendationsGDSPMApplicationsUpdateOne {
	if i != nil {
		rgauo.SetEmployeeID(*i)
	}
	return rgauo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) AddEmployeeID(i int64) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.AddEmployeeID(i)
	return rgauo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearEmployeeID() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearEmployeeID()
	return rgauo
}

// SetExamNameCode sets the "ExamNameCode" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetExamNameCode(s string) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetExamNameCode(s)
	return rgauo
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableExamNameCode(s *string) *RecommendationsGDSPMApplicationsUpdateOne {
	if s != nil {
		rgauo.SetExamNameCode(*s)
	}
	return rgauo
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearExamNameCode() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearExamNameCode()
	return rgauo
}

// SetExamYear sets the "ExamYear" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetExamYear(s string) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetExamYear(s)
	return rgauo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableExamYear(s *string) *RecommendationsGDSPMApplicationsUpdateOne {
	if s != nil {
		rgauo.SetExamYear(*s)
	}
	return rgauo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearExamYear() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearExamYear()
	return rgauo
}

// SetVacancyYear sets the "VacancyYear" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetVacancyYear(i int32) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ResetVacancyYear()
	rgauo.mutation.SetVacancyYear(i)
	return rgauo
}

// SetNillableVacancyYear sets the "VacancyYear" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableVacancyYear(i *int32) *RecommendationsGDSPMApplicationsUpdateOne {
	if i != nil {
		rgauo.SetVacancyYear(*i)
	}
	return rgauo
}

// AddVacancyYear adds i to the "VacancyYear" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) AddVacancyYear(i int32) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.AddVacancyYear(i)
	return rgauo
}

// ClearVacancyYear clears the value of the "VacancyYear" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearVacancyYear() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearVacancyYear()
	return rgauo
}

// SetPost sets the "Post" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetPost(s string) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetPost(s)
	return rgauo
}

// SetNillablePost sets the "Post" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillablePost(s *string) *RecommendationsGDSPMApplicationsUpdateOne {
	if s != nil {
		rgauo.SetPost(*s)
	}
	return rgauo
}

// ClearPost clears the value of the "Post" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearPost() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearPost()
	return rgauo
}

// SetEligible sets the "Eligible" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetEligible(b bool) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetEligible(b)
	return rgauo
}

// SetNillableEligible sets the "Eligible" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableEligible(b *bool) *RecommendationsGDSPMApplicationsUpdateOne {
	if b != nil {
		rgauo.SetEligible(*b)
	}
	return rgauo
}

// ClearEligible clears the value of the "Eligible" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearEligible() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearEligible()
	return rgauo
}

// SetCARecommendations sets the "CA_Recommendations" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetCARecommendations(s string) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetCARecommendations(s)
	return rgauo
}

// SetNillableCARecommendations sets the "CA_Recommendations" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableCARecommendations(s *string) *RecommendationsGDSPMApplicationsUpdateOne {
	if s != nil {
		rgauo.SetCARecommendations(*s)
	}
	return rgauo
}

// ClearCARecommendations clears the value of the "CA_Recommendations" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearCARecommendations() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearCARecommendations()
	return rgauo
}

// SetCAUpdatedAt sets the "CA_UpdatedAt" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetCAUpdatedAt(t time.Time) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetCAUpdatedAt(t)
	return rgauo
}

// SetNillableCAUpdatedAt sets the "CA_UpdatedAt" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableCAUpdatedAt(t *time.Time) *RecommendationsGDSPMApplicationsUpdateOne {
	if t != nil {
		rgauo.SetCAUpdatedAt(*t)
	}
	return rgauo
}

// ClearCAUpdatedAt clears the value of the "CA_UpdatedAt" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearCAUpdatedAt() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearCAUpdatedAt()
	return rgauo
}

// SetCAUserName sets the "CA_UserName" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetCAUserName(s string) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetCAUserName(s)
	return rgauo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableCAUserName(s *string) *RecommendationsGDSPMApplicationsUpdateOne {
	if s != nil {
		rgauo.SetCAUserName(*s)
	}
	return rgauo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearCAUserName() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearCAUserName()
	return rgauo
}

// SetCARemarks sets the "CA_Remarks" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetCARemarks(s string) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetCARemarks(s)
	return rgauo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableCARemarks(s *string) *RecommendationsGDSPMApplicationsUpdateOne {
	if s != nil {
		rgauo.SetCARemarks(*s)
	}
	return rgauo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearCARemarks() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearCARemarks()
	return rgauo
}

// SetNORecommendations sets the "NO_Recommendations" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNORecommendations(s string) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetNORecommendations(s)
	return rgauo
}

// SetNillableNORecommendations sets the "NO_Recommendations" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableNORecommendations(s *string) *RecommendationsGDSPMApplicationsUpdateOne {
	if s != nil {
		rgauo.SetNORecommendations(*s)
	}
	return rgauo
}

// ClearNORecommendations clears the value of the "NO_Recommendations" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearNORecommendations() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearNORecommendations()
	return rgauo
}

// SetNOUpdatedAt sets the "NO_UpdatedAt" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNOUpdatedAt(t time.Time) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetNOUpdatedAt(t)
	return rgauo
}

// SetNillableNOUpdatedAt sets the "NO_UpdatedAt" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableNOUpdatedAt(t *time.Time) *RecommendationsGDSPMApplicationsUpdateOne {
	if t != nil {
		rgauo.SetNOUpdatedAt(*t)
	}
	return rgauo
}

// ClearNOUpdatedAt clears the value of the "NO_UpdatedAt" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearNOUpdatedAt() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearNOUpdatedAt()
	return rgauo
}

// SetNOUserName sets the "NO_UserName" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNOUserName(s string) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetNOUserName(s)
	return rgauo
}

// SetNillableNOUserName sets the "NO_UserName" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableNOUserName(s *string) *RecommendationsGDSPMApplicationsUpdateOne {
	if s != nil {
		rgauo.SetNOUserName(*s)
	}
	return rgauo
}

// ClearNOUserName clears the value of the "NO_UserName" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearNOUserName() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearNOUserName()
	return rgauo
}

// SetNORemarks sets the "NO_Remarks" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNORemarks(s string) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetNORemarks(s)
	return rgauo
}

// SetNillableNORemarks sets the "NO_Remarks" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableNORemarks(s *string) *RecommendationsGDSPMApplicationsUpdateOne {
	if s != nil {
		rgauo.SetNORemarks(*s)
	}
	return rgauo
}

// ClearNORemarks clears the value of the "NO_Remarks" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearNORemarks() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearNORemarks()
	return rgauo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetApplicationStatus(s string) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetApplicationStatus(s)
	return rgauo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableApplicationStatus(s *string) *RecommendationsGDSPMApplicationsUpdateOne {
	if s != nil {
		rgauo.SetApplicationStatus(*s)
	}
	return rgauo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearApplicationStatus() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearApplicationStatus()
	return rgauo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetUpdatedAt(t time.Time) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetUpdatedAt(t)
	return rgauo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableUpdatedAt(t *time.Time) *RecommendationsGDSPMApplicationsUpdateOne {
	if t != nil {
		rgauo.SetUpdatedAt(*t)
	}
	return rgauo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearUpdatedAt() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearUpdatedAt()
	return rgauo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetUpdatedBy(s string) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetUpdatedBy(s)
	return rgauo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableUpdatedBy(s *string) *RecommendationsGDSPMApplicationsUpdateOne {
	if s != nil {
		rgauo.SetUpdatedBy(*s)
	}
	return rgauo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearUpdatedBy() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearUpdatedBy()
	return rgauo
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetGenerateHallTicketFlag(b bool) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetGenerateHallTicketFlag(b)
	return rgauo
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableGenerateHallTicketFlag(b *bool) *RecommendationsGDSPMApplicationsUpdateOne {
	if b != nil {
		rgauo.SetGenerateHallTicketFlag(*b)
	}
	return rgauo
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearGenerateHallTicketFlag() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearGenerateHallTicketFlag()
	return rgauo
}

// SetApplnRefID sets the "ApplnRef" edge to the Exam_Applications_GDSPM entity by ID.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetApplnRefID(id int64) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.SetApplnRefID(id)
	return rgauo
}

// SetNillableApplnRefID sets the "ApplnRef" edge to the Exam_Applications_GDSPM entity by ID if the given value is not nil.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetNillableApplnRefID(id *int64) *RecommendationsGDSPMApplicationsUpdateOne {
	if id != nil {
		rgauo = rgauo.SetApplnRefID(*id)
	}
	return rgauo
}

// SetApplnRef sets the "ApplnRef" edge to the Exam_Applications_GDSPM entity.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SetApplnRef(e *Exam_Applications_GDSPM) *RecommendationsGDSPMApplicationsUpdateOne {
	return rgauo.SetApplnRefID(e.ID)
}

// Mutation returns the RecommendationsGDSPMApplicationsMutation object of the builder.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) Mutation() *RecommendationsGDSPMApplicationsMutation {
	return rgauo.mutation
}

// ClearApplnRef clears the "ApplnRef" edge to the Exam_Applications_GDSPM entity.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ClearApplnRef() *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.ClearApplnRef()
	return rgauo
}

// Where appends a list predicates to the RecommendationsGDSPMApplicationsUpdate builder.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) Where(ps ...predicate.RecommendationsGDSPMApplications) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.mutation.Where(ps...)
	return rgauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) Select(field string, fields ...string) *RecommendationsGDSPMApplicationsUpdateOne {
	rgauo.fields = append([]string{field}, fields...)
	return rgauo
}

// Save executes the query and returns the updated RecommendationsGDSPMApplications entity.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) Save(ctx context.Context) (*RecommendationsGDSPMApplications, error) {
	return withHooks(ctx, rgauo.sqlSave, rgauo.mutation, rgauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) SaveX(ctx context.Context) *RecommendationsGDSPMApplications {
	node, err := rgauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) Exec(ctx context.Context) error {
	_, err := rgauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) ExecX(ctx context.Context) {
	if err := rgauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rgauo *RecommendationsGDSPMApplicationsUpdateOne) sqlSave(ctx context.Context) (_node *RecommendationsGDSPMApplications, err error) {
	_spec := sqlgraph.NewUpdateSpec(recommendationsgdspmapplications.Table, recommendationsgdspmapplications.Columns, sqlgraph.NewFieldSpec(recommendationsgdspmapplications.FieldID, field.TypeInt64))
	id, ok := rgauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecommendationsGDSPMApplications.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rgauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recommendationsgdspmapplications.FieldID)
		for _, f := range fields {
			if !recommendationsgdspmapplications.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recommendationsgdspmapplications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rgauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rgauo.mutation.ApplicationID(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if value, ok := rgauo.mutation.AddedApplicationID(); ok {
		_spec.AddField(recommendationsgdspmapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if rgauo.mutation.ApplicationIDCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldApplicationID, field.TypeInt64)
	}
	if value, ok := rgauo.mutation.EmployeeID(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := rgauo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(recommendationsgdspmapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if rgauo.mutation.EmployeeIDCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := rgauo.mutation.ExamNameCode(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldExamNameCode, field.TypeString, value)
	}
	if rgauo.mutation.ExamNameCodeCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldExamNameCode, field.TypeString)
	}
	if value, ok := rgauo.mutation.ExamYear(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldExamYear, field.TypeString, value)
	}
	if rgauo.mutation.ExamYearCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldExamYear, field.TypeString)
	}
	if value, ok := rgauo.mutation.VacancyYear(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if value, ok := rgauo.mutation.AddedVacancyYear(); ok {
		_spec.AddField(recommendationsgdspmapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if rgauo.mutation.VacancyYearCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldVacancyYear, field.TypeInt32)
	}
	if value, ok := rgauo.mutation.Post(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldPost, field.TypeString, value)
	}
	if rgauo.mutation.PostCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldPost, field.TypeString)
	}
	if value, ok := rgauo.mutation.Eligible(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldEligible, field.TypeBool, value)
	}
	if rgauo.mutation.EligibleCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldEligible, field.TypeBool)
	}
	if value, ok := rgauo.mutation.CARecommendations(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldCARecommendations, field.TypeString, value)
	}
	if rgauo.mutation.CARecommendationsCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldCARecommendations, field.TypeString)
	}
	if value, ok := rgauo.mutation.CAUpdatedAt(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldCAUpdatedAt, field.TypeTime, value)
	}
	if rgauo.mutation.CAUpdatedAtCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldCAUpdatedAt, field.TypeTime)
	}
	if value, ok := rgauo.mutation.CAUserName(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldCAUserName, field.TypeString, value)
	}
	if rgauo.mutation.CAUserNameCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldCAUserName, field.TypeString)
	}
	if value, ok := rgauo.mutation.CARemarks(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldCARemarks, field.TypeString, value)
	}
	if rgauo.mutation.CARemarksCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldCARemarks, field.TypeString)
	}
	if value, ok := rgauo.mutation.NORecommendations(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldNORecommendations, field.TypeString, value)
	}
	if rgauo.mutation.NORecommendationsCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldNORecommendations, field.TypeString)
	}
	if value, ok := rgauo.mutation.NOUpdatedAt(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldNOUpdatedAt, field.TypeTime, value)
	}
	if rgauo.mutation.NOUpdatedAtCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldNOUpdatedAt, field.TypeTime)
	}
	if value, ok := rgauo.mutation.NOUserName(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldNOUserName, field.TypeString, value)
	}
	if rgauo.mutation.NOUserNameCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldNOUserName, field.TypeString)
	}
	if value, ok := rgauo.mutation.NORemarks(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldNORemarks, field.TypeString, value)
	}
	if rgauo.mutation.NORemarksCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldNORemarks, field.TypeString)
	}
	if value, ok := rgauo.mutation.ApplicationStatus(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldApplicationStatus, field.TypeString, value)
	}
	if rgauo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := rgauo.mutation.UpdatedAt(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldUpdatedAt, field.TypeTime, value)
	}
	if rgauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := rgauo.mutation.UpdatedBy(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldUpdatedBy, field.TypeString, value)
	}
	if rgauo.mutation.UpdatedByCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := rgauo.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(recommendationsgdspmapplications.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if rgauo.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(recommendationsgdspmapplications.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if rgauo.mutation.ApplnRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsgdspmapplications.ApplnRefTable,
			Columns: []string{recommendationsgdspmapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rgauo.mutation.ApplnRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsgdspmapplications.ApplnRefTable,
			Columns: []string{recommendationsgdspmapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecommendationsGDSPMApplications{config: rgauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rgauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendationsgdspmapplications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rgauo.mutation.done = true
	return _node, nil
}
