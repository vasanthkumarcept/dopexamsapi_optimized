// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employeemaster"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeMasterUpdate is the builder for updating EmployeeMaster entities.
type EmployeeMasterUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeMasterMutation
}

// Where appends a list predicates to the EmployeeMasterUpdate builder.
func (emu *EmployeeMasterUpdate) Where(ps ...predicate.EmployeeMaster) *EmployeeMasterUpdate {
	emu.mutation.Where(ps...)
	return emu
}

// SetEmployeeID sets the "EmployeeID" field.
func (emu *EmployeeMasterUpdate) SetEmployeeID(i int64) *EmployeeMasterUpdate {
	emu.mutation.ResetEmployeeID()
	emu.mutation.SetEmployeeID(i)
	return emu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmployeeID(i *int64) *EmployeeMasterUpdate {
	if i != nil {
		emu.SetEmployeeID(*i)
	}
	return emu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (emu *EmployeeMasterUpdate) AddEmployeeID(i int64) *EmployeeMasterUpdate {
	emu.mutation.AddEmployeeID(i)
	return emu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (emu *EmployeeMasterUpdate) ClearEmployeeID() *EmployeeMasterUpdate {
	emu.mutation.ClearEmployeeID()
	return emu
}

// SetEmployeeName sets the "EmployeeName" field.
func (emu *EmployeeMasterUpdate) SetEmployeeName(s string) *EmployeeMasterUpdate {
	emu.mutation.SetEmployeeName(s)
	return emu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmployeeName(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetEmployeeName(*s)
	}
	return emu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (emu *EmployeeMasterUpdate) ClearEmployeeName() *EmployeeMasterUpdate {
	emu.mutation.ClearEmployeeName()
	return emu
}

// SetDOB sets the "DOB" field.
func (emu *EmployeeMasterUpdate) SetDOB(s string) *EmployeeMasterUpdate {
	emu.mutation.SetDOB(s)
	return emu
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableDOB(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetDOB(*s)
	}
	return emu
}

// ClearDOB clears the value of the "DOB" field.
func (emu *EmployeeMasterUpdate) ClearDOB() *EmployeeMasterUpdate {
	emu.mutation.ClearDOB()
	return emu
}

// SetGender sets the "Gender" field.
func (emu *EmployeeMasterUpdate) SetGender(s string) *EmployeeMasterUpdate {
	emu.mutation.SetGender(s)
	return emu
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableGender(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetGender(*s)
	}
	return emu
}

// ClearGender clears the value of the "Gender" field.
func (emu *EmployeeMasterUpdate) ClearGender() *EmployeeMasterUpdate {
	emu.mutation.ClearGender()
	return emu
}

// SetMobileNumber sets the "MobileNumber" field.
func (emu *EmployeeMasterUpdate) SetMobileNumber(s string) *EmployeeMasterUpdate {
	emu.mutation.SetMobileNumber(s)
	return emu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableMobileNumber(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetMobileNumber(*s)
	}
	return emu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (emu *EmployeeMasterUpdate) ClearMobileNumber() *EmployeeMasterUpdate {
	emu.mutation.ClearMobileNumber()
	return emu
}

// SetEmailID sets the "EmailID" field.
func (emu *EmployeeMasterUpdate) SetEmailID(s string) *EmployeeMasterUpdate {
	emu.mutation.SetEmailID(s)
	return emu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmailID(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetEmailID(*s)
	}
	return emu
}

// ClearEmailID clears the value of the "EmailID" field.
func (emu *EmployeeMasterUpdate) ClearEmailID() *EmployeeMasterUpdate {
	emu.mutation.ClearEmailID()
	return emu
}

// SetEmployeeCategoryCode sets the "EmployeeCategoryCode" field.
func (emu *EmployeeMasterUpdate) SetEmployeeCategoryCode(s string) *EmployeeMasterUpdate {
	emu.mutation.SetEmployeeCategoryCode(s)
	return emu
}

// SetNillableEmployeeCategoryCode sets the "EmployeeCategoryCode" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmployeeCategoryCode(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetEmployeeCategoryCode(*s)
	}
	return emu
}

// ClearEmployeeCategoryCode clears the value of the "EmployeeCategoryCode" field.
func (emu *EmployeeMasterUpdate) ClearEmployeeCategoryCode() *EmployeeMasterUpdate {
	emu.mutation.ClearEmployeeCategoryCode()
	return emu
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (emu *EmployeeMasterUpdate) SetEmployeeCategory(s string) *EmployeeMasterUpdate {
	emu.mutation.SetEmployeeCategory(s)
	return emu
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmployeeCategory(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetEmployeeCategory(*s)
	}
	return emu
}

// ClearEmployeeCategory clears the value of the "EmployeeCategory" field.
func (emu *EmployeeMasterUpdate) ClearEmployeeCategory() *EmployeeMasterUpdate {
	emu.mutation.ClearEmployeeCategory()
	return emu
}

// SetPostCode sets the "PostCode" field.
func (emu *EmployeeMasterUpdate) SetPostCode(s string) *EmployeeMasterUpdate {
	emu.mutation.SetPostCode(s)
	return emu
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillablePostCode(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetPostCode(*s)
	}
	return emu
}

// ClearPostCode clears the value of the "PostCode" field.
func (emu *EmployeeMasterUpdate) ClearPostCode() *EmployeeMasterUpdate {
	emu.mutation.ClearPostCode()
	return emu
}

// SetEmployeePost sets the "EmployeePost" field.
func (emu *EmployeeMasterUpdate) SetEmployeePost(s string) *EmployeeMasterUpdate {
	emu.mutation.SetEmployeePost(s)
	return emu
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmployeePost(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetEmployeePost(*s)
	}
	return emu
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (emu *EmployeeMasterUpdate) ClearEmployeePost() *EmployeeMasterUpdate {
	emu.mutation.ClearEmployeePost()
	return emu
}

// SetFacilityID sets the "FacilityID" field.
func (emu *EmployeeMasterUpdate) SetFacilityID(s string) *EmployeeMasterUpdate {
	emu.mutation.SetFacilityID(s)
	return emu
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableFacilityID(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetFacilityID(*s)
	}
	return emu
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (emu *EmployeeMasterUpdate) ClearFacilityID() *EmployeeMasterUpdate {
	emu.mutation.ClearFacilityID()
	return emu
}

// SetOfficeName sets the "OfficeName" field.
func (emu *EmployeeMasterUpdate) SetOfficeName(s string) *EmployeeMasterUpdate {
	emu.mutation.SetOfficeName(s)
	return emu
}

// SetNillableOfficeName sets the "OfficeName" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableOfficeName(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetOfficeName(*s)
	}
	return emu
}

// ClearOfficeName clears the value of the "OfficeName" field.
func (emu *EmployeeMasterUpdate) ClearOfficeName() *EmployeeMasterUpdate {
	emu.mutation.ClearOfficeName()
	return emu
}

// SetControllingAuthorityFacilityId sets the "ControllingAuthorityFacilityId" field.
func (emu *EmployeeMasterUpdate) SetControllingAuthorityFacilityId(s string) *EmployeeMasterUpdate {
	emu.mutation.SetControllingAuthorityFacilityId(s)
	return emu
}

// SetNillableControllingAuthorityFacilityId sets the "ControllingAuthorityFacilityId" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableControllingAuthorityFacilityId(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetControllingAuthorityFacilityId(*s)
	}
	return emu
}

// ClearControllingAuthorityFacilityId clears the value of the "ControllingAuthorityFacilityId" field.
func (emu *EmployeeMasterUpdate) ClearControllingAuthorityFacilityId() *EmployeeMasterUpdate {
	emu.mutation.ClearControllingAuthorityFacilityId()
	return emu
}

// SetControllingAuthorityName sets the "ControllingAuthorityName" field.
func (emu *EmployeeMasterUpdate) SetControllingAuthorityName(s string) *EmployeeMasterUpdate {
	emu.mutation.SetControllingAuthorityName(s)
	return emu
}

// SetNillableControllingAuthorityName sets the "ControllingAuthorityName" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableControllingAuthorityName(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetControllingAuthorityName(*s)
	}
	return emu
}

// ClearControllingAuthorityName clears the value of the "ControllingAuthorityName" field.
func (emu *EmployeeMasterUpdate) ClearControllingAuthorityName() *EmployeeMasterUpdate {
	emu.mutation.ClearControllingAuthorityName()
	return emu
}

// SetNodalAuthorityFaciliyId sets the "NodalAuthorityFaciliyId" field.
func (emu *EmployeeMasterUpdate) SetNodalAuthorityFaciliyId(s string) *EmployeeMasterUpdate {
	emu.mutation.SetNodalAuthorityFaciliyId(s)
	return emu
}

// SetNillableNodalAuthorityFaciliyId sets the "NodalAuthorityFaciliyId" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableNodalAuthorityFaciliyId(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetNodalAuthorityFaciliyId(*s)
	}
	return emu
}

// ClearNodalAuthorityFaciliyId clears the value of the "NodalAuthorityFaciliyId" field.
func (emu *EmployeeMasterUpdate) ClearNodalAuthorityFaciliyId() *EmployeeMasterUpdate {
	emu.mutation.ClearNodalAuthorityFaciliyId()
	return emu
}

// SetNodalAuthorityName sets the "NodalAuthorityName" field.
func (emu *EmployeeMasterUpdate) SetNodalAuthorityName(s string) *EmployeeMasterUpdate {
	emu.mutation.SetNodalAuthorityName(s)
	return emu
}

// SetNillableNodalAuthorityName sets the "NodalAuthorityName" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableNodalAuthorityName(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetNodalAuthorityName(*s)
	}
	return emu
}

// ClearNodalAuthorityName clears the value of the "NodalAuthorityName" field.
func (emu *EmployeeMasterUpdate) ClearNodalAuthorityName() *EmployeeMasterUpdate {
	emu.mutation.ClearNodalAuthorityName()
	return emu
}

// SetPincode sets the "Pincode" field.
func (emu *EmployeeMasterUpdate) SetPincode(s string) *EmployeeMasterUpdate {
	emu.mutation.SetPincode(s)
	return emu
}

// SetNillablePincode sets the "Pincode" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillablePincode(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetPincode(*s)
	}
	return emu
}

// ClearPincode clears the value of the "Pincode" field.
func (emu *EmployeeMasterUpdate) ClearPincode() *EmployeeMasterUpdate {
	emu.mutation.ClearPincode()
	return emu
}

// SetCircleFacilityID sets the "CircleFacilityID" field.
func (emu *EmployeeMasterUpdate) SetCircleFacilityID(s string) *EmployeeMasterUpdate {
	emu.mutation.SetCircleFacilityID(s)
	return emu
}

// SetNillableCircleFacilityID sets the "CircleFacilityID" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableCircleFacilityID(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetCircleFacilityID(*s)
	}
	return emu
}

// ClearCircleFacilityID clears the value of the "CircleFacilityID" field.
func (emu *EmployeeMasterUpdate) ClearCircleFacilityID() *EmployeeMasterUpdate {
	emu.mutation.ClearCircleFacilityID()
	return emu
}

// SetStatuss sets the "Statuss" field.
func (emu *EmployeeMasterUpdate) SetStatuss(s string) *EmployeeMasterUpdate {
	emu.mutation.SetStatuss(s)
	return emu
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableStatuss(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetStatuss(*s)
	}
	return emu
}

// ClearStatuss clears the value of the "Statuss" field.
func (emu *EmployeeMasterUpdate) ClearStatuss() *EmployeeMasterUpdate {
	emu.mutation.ClearStatuss()
	return emu
}

// SetVerifyStatus sets the "VerifyStatus" field.
func (emu *EmployeeMasterUpdate) SetVerifyStatus(b bool) *EmployeeMasterUpdate {
	emu.mutation.SetVerifyStatus(b)
	return emu
}

// SetNillableVerifyStatus sets the "VerifyStatus" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableVerifyStatus(b *bool) *EmployeeMasterUpdate {
	if b != nil {
		emu.SetVerifyStatus(*b)
	}
	return emu
}

// SetUidToken sets the "UidToken" field.
func (emu *EmployeeMasterUpdate) SetUidToken(s string) *EmployeeMasterUpdate {
	emu.mutation.SetUidToken(s)
	return emu
}

// SetNillableUidToken sets the "UidToken" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableUidToken(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetUidToken(*s)
	}
	return emu
}

// ClearUidToken clears the value of the "UidToken" field.
func (emu *EmployeeMasterUpdate) ClearUidToken() *EmployeeMasterUpdate {
	emu.mutation.ClearUidToken()
	return emu
}

// SetCreatedby sets the "Createdby" field.
func (emu *EmployeeMasterUpdate) SetCreatedby(s string) *EmployeeMasterUpdate {
	emu.mutation.SetCreatedby(s)
	return emu
}

// SetNillableCreatedby sets the "Createdby" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableCreatedby(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetCreatedby(*s)
	}
	return emu
}

// ClearCreatedby clears the value of the "Createdby" field.
func (emu *EmployeeMasterUpdate) ClearCreatedby() *EmployeeMasterUpdate {
	emu.mutation.ClearCreatedby()
	return emu
}

// SetDCCS sets the "DCCS" field.
func (emu *EmployeeMasterUpdate) SetDCCS(s string) *EmployeeMasterUpdate {
	emu.mutation.SetDCCS(s)
	return emu
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableDCCS(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetDCCS(*s)
	}
	return emu
}

// ClearDCCS clears the value of the "DCCS" field.
func (emu *EmployeeMasterUpdate) ClearDCCS() *EmployeeMasterUpdate {
	emu.mutation.ClearDCCS()
	return emu
}

// SetCreatedById sets the "CreatedById" field.
func (emu *EmployeeMasterUpdate) SetCreatedById(i int64) *EmployeeMasterUpdate {
	emu.mutation.ResetCreatedById()
	emu.mutation.SetCreatedById(i)
	return emu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableCreatedById(i *int64) *EmployeeMasterUpdate {
	if i != nil {
		emu.SetCreatedById(*i)
	}
	return emu
}

// AddCreatedById adds i to the "CreatedById" field.
func (emu *EmployeeMasterUpdate) AddCreatedById(i int64) *EmployeeMasterUpdate {
	emu.mutation.AddCreatedById(i)
	return emu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (emu *EmployeeMasterUpdate) ClearCreatedById() *EmployeeMasterUpdate {
	emu.mutation.ClearCreatedById()
	return emu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (emu *EmployeeMasterUpdate) SetCreatedByUserName(s string) *EmployeeMasterUpdate {
	emu.mutation.SetCreatedByUserName(s)
	return emu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableCreatedByUserName(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetCreatedByUserName(*s)
	}
	return emu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (emu *EmployeeMasterUpdate) ClearCreatedByUserName() *EmployeeMasterUpdate {
	emu.mutation.ClearCreatedByUserName()
	return emu
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (emu *EmployeeMasterUpdate) SetCreatedByEmpId(i int64) *EmployeeMasterUpdate {
	emu.mutation.ResetCreatedByEmpId()
	emu.mutation.SetCreatedByEmpId(i)
	return emu
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableCreatedByEmpId(i *int64) *EmployeeMasterUpdate {
	if i != nil {
		emu.SetCreatedByEmpId(*i)
	}
	return emu
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (emu *EmployeeMasterUpdate) AddCreatedByEmpId(i int64) *EmployeeMasterUpdate {
	emu.mutation.AddCreatedByEmpId(i)
	return emu
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (emu *EmployeeMasterUpdate) ClearCreatedByEmpId() *EmployeeMasterUpdate {
	emu.mutation.ClearCreatedByEmpId()
	return emu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (emu *EmployeeMasterUpdate) SetCreatedByDesignation(s string) *EmployeeMasterUpdate {
	emu.mutation.SetCreatedByDesignation(s)
	return emu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableCreatedByDesignation(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetCreatedByDesignation(*s)
	}
	return emu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (emu *EmployeeMasterUpdate) ClearCreatedByDesignation() *EmployeeMasterUpdate {
	emu.mutation.ClearCreatedByDesignation()
	return emu
}

// SetCreatedDate sets the "CreatedDate" field.
func (emu *EmployeeMasterUpdate) SetCreatedDate(t time.Time) *EmployeeMasterUpdate {
	emu.mutation.SetCreatedDate(t)
	return emu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableCreatedDate(t *time.Time) *EmployeeMasterUpdate {
	if t != nil {
		emu.SetCreatedDate(*t)
	}
	return emu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (emu *EmployeeMasterUpdate) ClearCreatedDate() *EmployeeMasterUpdate {
	emu.mutation.ClearCreatedDate()
	return emu
}

// SetModifiedById sets the "ModifiedById" field.
func (emu *EmployeeMasterUpdate) SetModifiedById(i int64) *EmployeeMasterUpdate {
	emu.mutation.ResetModifiedById()
	emu.mutation.SetModifiedById(i)
	return emu
}

// SetNillableModifiedById sets the "ModifiedById" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableModifiedById(i *int64) *EmployeeMasterUpdate {
	if i != nil {
		emu.SetModifiedById(*i)
	}
	return emu
}

// AddModifiedById adds i to the "ModifiedById" field.
func (emu *EmployeeMasterUpdate) AddModifiedById(i int64) *EmployeeMasterUpdate {
	emu.mutation.AddModifiedById(i)
	return emu
}

// ClearModifiedById clears the value of the "ModifiedById" field.
func (emu *EmployeeMasterUpdate) ClearModifiedById() *EmployeeMasterUpdate {
	emu.mutation.ClearModifiedById()
	return emu
}

// SetModifiedByUserName sets the "ModifiedByUserName" field.
func (emu *EmployeeMasterUpdate) SetModifiedByUserName(s string) *EmployeeMasterUpdate {
	emu.mutation.SetModifiedByUserName(s)
	return emu
}

// SetNillableModifiedByUserName sets the "ModifiedByUserName" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableModifiedByUserName(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetModifiedByUserName(*s)
	}
	return emu
}

// ClearModifiedByUserName clears the value of the "ModifiedByUserName" field.
func (emu *EmployeeMasterUpdate) ClearModifiedByUserName() *EmployeeMasterUpdate {
	emu.mutation.ClearModifiedByUserName()
	return emu
}

// SetModifiedByEmpId sets the "ModifiedByEmpId" field.
func (emu *EmployeeMasterUpdate) SetModifiedByEmpId(i int64) *EmployeeMasterUpdate {
	emu.mutation.ResetModifiedByEmpId()
	emu.mutation.SetModifiedByEmpId(i)
	return emu
}

// SetNillableModifiedByEmpId sets the "ModifiedByEmpId" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableModifiedByEmpId(i *int64) *EmployeeMasterUpdate {
	if i != nil {
		emu.SetModifiedByEmpId(*i)
	}
	return emu
}

// AddModifiedByEmpId adds i to the "ModifiedByEmpId" field.
func (emu *EmployeeMasterUpdate) AddModifiedByEmpId(i int64) *EmployeeMasterUpdate {
	emu.mutation.AddModifiedByEmpId(i)
	return emu
}

// ClearModifiedByEmpId clears the value of the "ModifiedByEmpId" field.
func (emu *EmployeeMasterUpdate) ClearModifiedByEmpId() *EmployeeMasterUpdate {
	emu.mutation.ClearModifiedByEmpId()
	return emu
}

// SetModifiedByDesignantion sets the "ModifiedByDesignantion" field.
func (emu *EmployeeMasterUpdate) SetModifiedByDesignantion(s string) *EmployeeMasterUpdate {
	emu.mutation.SetModifiedByDesignantion(s)
	return emu
}

// SetNillableModifiedByDesignantion sets the "ModifiedByDesignantion" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableModifiedByDesignantion(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetModifiedByDesignantion(*s)
	}
	return emu
}

// ClearModifiedByDesignantion clears the value of the "ModifiedByDesignantion" field.
func (emu *EmployeeMasterUpdate) ClearModifiedByDesignantion() *EmployeeMasterUpdate {
	emu.mutation.ClearModifiedByDesignantion()
	return emu
}

// SetModifiedDate sets the "ModifiedDate" field.
func (emu *EmployeeMasterUpdate) SetModifiedDate(t time.Time) *EmployeeMasterUpdate {
	emu.mutation.SetModifiedDate(t)
	return emu
}

// SetNillableModifiedDate sets the "ModifiedDate" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableModifiedDate(t *time.Time) *EmployeeMasterUpdate {
	if t != nil {
		emu.SetModifiedDate(*t)
	}
	return emu
}

// ClearModifiedDate clears the value of the "ModifiedDate" field.
func (emu *EmployeeMasterUpdate) ClearModifiedDate() *EmployeeMasterUpdate {
	emu.mutation.ClearModifiedDate()
	return emu
}

// SetDeletedById sets the "DeletedById" field.
func (emu *EmployeeMasterUpdate) SetDeletedById(i int64) *EmployeeMasterUpdate {
	emu.mutation.ResetDeletedById()
	emu.mutation.SetDeletedById(i)
	return emu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableDeletedById(i *int64) *EmployeeMasterUpdate {
	if i != nil {
		emu.SetDeletedById(*i)
	}
	return emu
}

// AddDeletedById adds i to the "DeletedById" field.
func (emu *EmployeeMasterUpdate) AddDeletedById(i int64) *EmployeeMasterUpdate {
	emu.mutation.AddDeletedById(i)
	return emu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (emu *EmployeeMasterUpdate) ClearDeletedById() *EmployeeMasterUpdate {
	emu.mutation.ClearDeletedById()
	return emu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (emu *EmployeeMasterUpdate) SetDeletedByUserName(s string) *EmployeeMasterUpdate {
	emu.mutation.SetDeletedByUserName(s)
	return emu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableDeletedByUserName(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetDeletedByUserName(*s)
	}
	return emu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (emu *EmployeeMasterUpdate) ClearDeletedByUserName() *EmployeeMasterUpdate {
	emu.mutation.ClearDeletedByUserName()
	return emu
}

// SetDeletedByEmpId sets the "DeletedByEmpId" field.
func (emu *EmployeeMasterUpdate) SetDeletedByEmpId(i int64) *EmployeeMasterUpdate {
	emu.mutation.ResetDeletedByEmpId()
	emu.mutation.SetDeletedByEmpId(i)
	return emu
}

// SetNillableDeletedByEmpId sets the "DeletedByEmpId" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableDeletedByEmpId(i *int64) *EmployeeMasterUpdate {
	if i != nil {
		emu.SetDeletedByEmpId(*i)
	}
	return emu
}

// AddDeletedByEmpId adds i to the "DeletedByEmpId" field.
func (emu *EmployeeMasterUpdate) AddDeletedByEmpId(i int64) *EmployeeMasterUpdate {
	emu.mutation.AddDeletedByEmpId(i)
	return emu
}

// ClearDeletedByEmpId clears the value of the "DeletedByEmpId" field.
func (emu *EmployeeMasterUpdate) ClearDeletedByEmpId() *EmployeeMasterUpdate {
	emu.mutation.ClearDeletedByEmpId()
	return emu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (emu *EmployeeMasterUpdate) SetDeletedByDesignation(s string) *EmployeeMasterUpdate {
	emu.mutation.SetDeletedByDesignation(s)
	return emu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableDeletedByDesignation(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetDeletedByDesignation(*s)
	}
	return emu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (emu *EmployeeMasterUpdate) ClearDeletedByDesignation() *EmployeeMasterUpdate {
	emu.mutation.ClearDeletedByDesignation()
	return emu
}

// SetDeletedDate sets the "DeletedDate" field.
func (emu *EmployeeMasterUpdate) SetDeletedDate(t time.Time) *EmployeeMasterUpdate {
	emu.mutation.SetDeletedDate(t)
	return emu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableDeletedDate(t *time.Time) *EmployeeMasterUpdate {
	if t != nil {
		emu.SetDeletedDate(*t)
	}
	return emu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (emu *EmployeeMasterUpdate) ClearDeletedDate() *EmployeeMasterUpdate {
	emu.mutation.ClearDeletedDate()
	return emu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (emu *EmployeeMasterUpdate) SetUpdatedAt(t time.Time) *EmployeeMasterUpdate {
	emu.mutation.SetUpdatedAt(t)
	return emu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableUpdatedAt(t *time.Time) *EmployeeMasterUpdate {
	if t != nil {
		emu.SetUpdatedAt(*t)
	}
	return emu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (emu *EmployeeMasterUpdate) ClearUpdatedAt() *EmployeeMasterUpdate {
	emu.mutation.ClearUpdatedAt()
	return emu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (emu *EmployeeMasterUpdate) SetUpdatedBy(s string) *EmployeeMasterUpdate {
	emu.mutation.SetUpdatedBy(s)
	return emu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableUpdatedBy(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetUpdatedBy(*s)
	}
	return emu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (emu *EmployeeMasterUpdate) ClearUpdatedBy() *EmployeeMasterUpdate {
	emu.mutation.ClearUpdatedBy()
	return emu
}

// SetSmsOtp sets the "SmsOtp" field.
func (emu *EmployeeMasterUpdate) SetSmsOtp(i int64) *EmployeeMasterUpdate {
	emu.mutation.ResetSmsOtp()
	emu.mutation.SetSmsOtp(i)
	return emu
}

// SetNillableSmsOtp sets the "SmsOtp" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableSmsOtp(i *int64) *EmployeeMasterUpdate {
	if i != nil {
		emu.SetSmsOtp(*i)
	}
	return emu
}

// AddSmsOtp adds i to the "SmsOtp" field.
func (emu *EmployeeMasterUpdate) AddSmsOtp(i int64) *EmployeeMasterUpdate {
	emu.mutation.AddSmsOtp(i)
	return emu
}

// ClearSmsOtp clears the value of the "SmsOtp" field.
func (emu *EmployeeMasterUpdate) ClearSmsOtp() *EmployeeMasterUpdate {
	emu.mutation.ClearSmsOtp()
	return emu
}

// SetSmsTriggeredTime sets the "SmsTriggeredTime" field.
func (emu *EmployeeMasterUpdate) SetSmsTriggeredTime(t time.Time) *EmployeeMasterUpdate {
	emu.mutation.SetSmsTriggeredTime(t)
	return emu
}

// SetNillableSmsTriggeredTime sets the "SmsTriggeredTime" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableSmsTriggeredTime(t *time.Time) *EmployeeMasterUpdate {
	if t != nil {
		emu.SetSmsTriggeredTime(*t)
	}
	return emu
}

// ClearSmsTriggeredTime clears the value of the "SmsTriggeredTime" field.
func (emu *EmployeeMasterUpdate) ClearSmsTriggeredTime() *EmployeeMasterUpdate {
	emu.mutation.ClearSmsTriggeredTime()
	return emu
}

// SetSmsVerifyStatus sets the "SmsVerifyStatus" field.
func (emu *EmployeeMasterUpdate) SetSmsVerifyStatus(b bool) *EmployeeMasterUpdate {
	emu.mutation.SetSmsVerifyStatus(b)
	return emu
}

// SetNillableSmsVerifyStatus sets the "SmsVerifyStatus" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableSmsVerifyStatus(b *bool) *EmployeeMasterUpdate {
	if b != nil {
		emu.SetSmsVerifyStatus(*b)
	}
	return emu
}

// SetEmailOtp sets the "EmailOtp" field.
func (emu *EmployeeMasterUpdate) SetEmailOtp(i int64) *EmployeeMasterUpdate {
	emu.mutation.ResetEmailOtp()
	emu.mutation.SetEmailOtp(i)
	return emu
}

// SetNillableEmailOtp sets the "EmailOtp" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmailOtp(i *int64) *EmployeeMasterUpdate {
	if i != nil {
		emu.SetEmailOtp(*i)
	}
	return emu
}

// AddEmailOtp adds i to the "EmailOtp" field.
func (emu *EmployeeMasterUpdate) AddEmailOtp(i int64) *EmployeeMasterUpdate {
	emu.mutation.AddEmailOtp(i)
	return emu
}

// ClearEmailOtp clears the value of the "EmailOtp" field.
func (emu *EmployeeMasterUpdate) ClearEmailOtp() *EmployeeMasterUpdate {
	emu.mutation.ClearEmailOtp()
	return emu
}

// SetEmailTriggeredTime sets the "EmailTriggeredTime" field.
func (emu *EmployeeMasterUpdate) SetEmailTriggeredTime(t time.Time) *EmployeeMasterUpdate {
	emu.mutation.SetEmailTriggeredTime(t)
	return emu
}

// SetNillableEmailTriggeredTime sets the "EmailTriggeredTime" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmailTriggeredTime(t *time.Time) *EmployeeMasterUpdate {
	if t != nil {
		emu.SetEmailTriggeredTime(*t)
	}
	return emu
}

// ClearEmailTriggeredTime clears the value of the "EmailTriggeredTime" field.
func (emu *EmployeeMasterUpdate) ClearEmailTriggeredTime() *EmployeeMasterUpdate {
	emu.mutation.ClearEmailTriggeredTime()
	return emu
}

// SetEmailVerifyStatus sets the "EmailVerifyStatus" field.
func (emu *EmployeeMasterUpdate) SetEmailVerifyStatus(b bool) *EmployeeMasterUpdate {
	emu.mutation.SetEmailVerifyStatus(b)
	return emu
}

// SetNillableEmailVerifyStatus sets the "EmailVerifyStatus" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableEmailVerifyStatus(b *bool) *EmployeeMasterUpdate {
	if b != nil {
		emu.SetEmailVerifyStatus(*b)
	}
	return emu
}

// SetFinalSubmitStatus sets the "FinalSubmitStatus" field.
func (emu *EmployeeMasterUpdate) SetFinalSubmitStatus(b bool) *EmployeeMasterUpdate {
	emu.mutation.SetFinalSubmitStatus(b)
	return emu
}

// SetNillableFinalSubmitStatus sets the "FinalSubmitStatus" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableFinalSubmitStatus(b *bool) *EmployeeMasterUpdate {
	if b != nil {
		emu.SetFinalSubmitStatus(*b)
	}
	return emu
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (emu *EmployeeMasterUpdate) SetDCInPresentCadre(s string) *EmployeeMasterUpdate {
	emu.mutation.SetDCInPresentCadre(s)
	return emu
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableDCInPresentCadre(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetDCInPresentCadre(*s)
	}
	return emu
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (emu *EmployeeMasterUpdate) ClearDCInPresentCadre() *EmployeeMasterUpdate {
	emu.mutation.ClearDCInPresentCadre()
	return emu
}

// SetCadre sets the "Cadre" field.
func (emu *EmployeeMasterUpdate) SetCadre(s string) *EmployeeMasterUpdate {
	emu.mutation.SetCadre(s)
	return emu
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (emu *EmployeeMasterUpdate) SetNillableCadre(s *string) *EmployeeMasterUpdate {
	if s != nil {
		emu.SetCadre(*s)
	}
	return emu
}

// ClearCadre clears the value of the "Cadre" field.
func (emu *EmployeeMasterUpdate) ClearCadre() *EmployeeMasterUpdate {
	emu.mutation.ClearCadre()
	return emu
}

// AddUsermasterRefIDs adds the "UsermasterRef" edge to the UserMaster entity by IDs.
func (emu *EmployeeMasterUpdate) AddUsermasterRefIDs(ids ...int64) *EmployeeMasterUpdate {
	emu.mutation.AddUsermasterRefIDs(ids...)
	return emu
}

// AddUsermasterRef adds the "UsermasterRef" edges to the UserMaster entity.
func (emu *EmployeeMasterUpdate) AddUsermasterRef(u ...*UserMaster) *EmployeeMasterUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return emu.AddUsermasterRefIDs(ids...)
}

// AddEmpRefIDs adds the "Emp_Ref" edge to the Exam_Applications_PS entity by IDs.
func (emu *EmployeeMasterUpdate) AddEmpRefIDs(ids ...int64) *EmployeeMasterUpdate {
	emu.mutation.AddEmpRefIDs(ids...)
	return emu
}

// AddEmpRef adds the "Emp_Ref" edges to the Exam_Applications_PS entity.
func (emu *EmployeeMasterUpdate) AddEmpRef(e ...*Exam_Applications_PS) *EmployeeMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emu.AddEmpRefIDs(ids...)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (emu *EmployeeMasterUpdate) AddLogDatumIDs(ids ...int64) *EmployeeMasterUpdate {
	emu.mutation.AddLogDatumIDs(ids...)
	return emu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (emu *EmployeeMasterUpdate) AddLogData(l ...*Logs) *EmployeeMasterUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return emu.AddLogDatumIDs(ids...)
}

// Mutation returns the EmployeeMasterMutation object of the builder.
func (emu *EmployeeMasterUpdate) Mutation() *EmployeeMasterMutation {
	return emu.mutation
}

// ClearUsermasterRef clears all "UsermasterRef" edges to the UserMaster entity.
func (emu *EmployeeMasterUpdate) ClearUsermasterRef() *EmployeeMasterUpdate {
	emu.mutation.ClearUsermasterRef()
	return emu
}

// RemoveUsermasterRefIDs removes the "UsermasterRef" edge to UserMaster entities by IDs.
func (emu *EmployeeMasterUpdate) RemoveUsermasterRefIDs(ids ...int64) *EmployeeMasterUpdate {
	emu.mutation.RemoveUsermasterRefIDs(ids...)
	return emu
}

// RemoveUsermasterRef removes "UsermasterRef" edges to UserMaster entities.
func (emu *EmployeeMasterUpdate) RemoveUsermasterRef(u ...*UserMaster) *EmployeeMasterUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return emu.RemoveUsermasterRefIDs(ids...)
}

// ClearEmpRef clears all "Emp_Ref" edges to the Exam_Applications_PS entity.
func (emu *EmployeeMasterUpdate) ClearEmpRef() *EmployeeMasterUpdate {
	emu.mutation.ClearEmpRef()
	return emu
}

// RemoveEmpRefIDs removes the "Emp_Ref" edge to Exam_Applications_PS entities by IDs.
func (emu *EmployeeMasterUpdate) RemoveEmpRefIDs(ids ...int64) *EmployeeMasterUpdate {
	emu.mutation.RemoveEmpRefIDs(ids...)
	return emu
}

// RemoveEmpRef removes "Emp_Ref" edges to Exam_Applications_PS entities.
func (emu *EmployeeMasterUpdate) RemoveEmpRef(e ...*Exam_Applications_PS) *EmployeeMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emu.RemoveEmpRefIDs(ids...)
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (emu *EmployeeMasterUpdate) ClearLogData() *EmployeeMasterUpdate {
	emu.mutation.ClearLogData()
	return emu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (emu *EmployeeMasterUpdate) RemoveLogDatumIDs(ids ...int64) *EmployeeMasterUpdate {
	emu.mutation.RemoveLogDatumIDs(ids...)
	return emu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (emu *EmployeeMasterUpdate) RemoveLogData(l ...*Logs) *EmployeeMasterUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return emu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (emu *EmployeeMasterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, emu.sqlSave, emu.mutation, emu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (emu *EmployeeMasterUpdate) SaveX(ctx context.Context) int {
	affected, err := emu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (emu *EmployeeMasterUpdate) Exec(ctx context.Context) error {
	_, err := emu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emu *EmployeeMasterUpdate) ExecX(ctx context.Context) {
	if err := emu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (emu *EmployeeMasterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeemaster.Table, employeemaster.Columns, sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64))
	if ps := emu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := emu.mutation.EmployeeID(); ok {
		_spec.SetField(employeemaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(employeemaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if emu.mutation.EmployeeIDCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := emu.mutation.EmployeeName(); ok {
		_spec.SetField(employeemaster.FieldEmployeeName, field.TypeString, value)
	}
	if emu.mutation.EmployeeNameCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeName, field.TypeString)
	}
	if value, ok := emu.mutation.DOB(); ok {
		_spec.SetField(employeemaster.FieldDOB, field.TypeString, value)
	}
	if emu.mutation.DOBCleared() {
		_spec.ClearField(employeemaster.FieldDOB, field.TypeString)
	}
	if value, ok := emu.mutation.Gender(); ok {
		_spec.SetField(employeemaster.FieldGender, field.TypeString, value)
	}
	if emu.mutation.GenderCleared() {
		_spec.ClearField(employeemaster.FieldGender, field.TypeString)
	}
	if value, ok := emu.mutation.MobileNumber(); ok {
		_spec.SetField(employeemaster.FieldMobileNumber, field.TypeString, value)
	}
	if emu.mutation.MobileNumberCleared() {
		_spec.ClearField(employeemaster.FieldMobileNumber, field.TypeString)
	}
	if value, ok := emu.mutation.EmailID(); ok {
		_spec.SetField(employeemaster.FieldEmailID, field.TypeString, value)
	}
	if emu.mutation.EmailIDCleared() {
		_spec.ClearField(employeemaster.FieldEmailID, field.TypeString)
	}
	if value, ok := emu.mutation.EmployeeCategoryCode(); ok {
		_spec.SetField(employeemaster.FieldEmployeeCategoryCode, field.TypeString, value)
	}
	if emu.mutation.EmployeeCategoryCodeCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeCategoryCode, field.TypeString)
	}
	if value, ok := emu.mutation.EmployeeCategory(); ok {
		_spec.SetField(employeemaster.FieldEmployeeCategory, field.TypeString, value)
	}
	if emu.mutation.EmployeeCategoryCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeCategory, field.TypeString)
	}
	if value, ok := emu.mutation.PostCode(); ok {
		_spec.SetField(employeemaster.FieldPostCode, field.TypeString, value)
	}
	if emu.mutation.PostCodeCleared() {
		_spec.ClearField(employeemaster.FieldPostCode, field.TypeString)
	}
	if value, ok := emu.mutation.EmployeePost(); ok {
		_spec.SetField(employeemaster.FieldEmployeePost, field.TypeString, value)
	}
	if emu.mutation.EmployeePostCleared() {
		_spec.ClearField(employeemaster.FieldEmployeePost, field.TypeString)
	}
	if value, ok := emu.mutation.FacilityID(); ok {
		_spec.SetField(employeemaster.FieldFacilityID, field.TypeString, value)
	}
	if emu.mutation.FacilityIDCleared() {
		_spec.ClearField(employeemaster.FieldFacilityID, field.TypeString)
	}
	if value, ok := emu.mutation.OfficeName(); ok {
		_spec.SetField(employeemaster.FieldOfficeName, field.TypeString, value)
	}
	if emu.mutation.OfficeNameCleared() {
		_spec.ClearField(employeemaster.FieldOfficeName, field.TypeString)
	}
	if value, ok := emu.mutation.ControllingAuthorityFacilityId(); ok {
		_spec.SetField(employeemaster.FieldControllingAuthorityFacilityId, field.TypeString, value)
	}
	if emu.mutation.ControllingAuthorityFacilityIdCleared() {
		_spec.ClearField(employeemaster.FieldControllingAuthorityFacilityId, field.TypeString)
	}
	if value, ok := emu.mutation.ControllingAuthorityName(); ok {
		_spec.SetField(employeemaster.FieldControllingAuthorityName, field.TypeString, value)
	}
	if emu.mutation.ControllingAuthorityNameCleared() {
		_spec.ClearField(employeemaster.FieldControllingAuthorityName, field.TypeString)
	}
	if value, ok := emu.mutation.NodalAuthorityFaciliyId(); ok {
		_spec.SetField(employeemaster.FieldNodalAuthorityFaciliyId, field.TypeString, value)
	}
	if emu.mutation.NodalAuthorityFaciliyIdCleared() {
		_spec.ClearField(employeemaster.FieldNodalAuthorityFaciliyId, field.TypeString)
	}
	if value, ok := emu.mutation.NodalAuthorityName(); ok {
		_spec.SetField(employeemaster.FieldNodalAuthorityName, field.TypeString, value)
	}
	if emu.mutation.NodalAuthorityNameCleared() {
		_spec.ClearField(employeemaster.FieldNodalAuthorityName, field.TypeString)
	}
	if value, ok := emu.mutation.Pincode(); ok {
		_spec.SetField(employeemaster.FieldPincode, field.TypeString, value)
	}
	if emu.mutation.PincodeCleared() {
		_spec.ClearField(employeemaster.FieldPincode, field.TypeString)
	}
	if value, ok := emu.mutation.CircleFacilityID(); ok {
		_spec.SetField(employeemaster.FieldCircleFacilityID, field.TypeString, value)
	}
	if emu.mutation.CircleFacilityIDCleared() {
		_spec.ClearField(employeemaster.FieldCircleFacilityID, field.TypeString)
	}
	if value, ok := emu.mutation.Statuss(); ok {
		_spec.SetField(employeemaster.FieldStatuss, field.TypeString, value)
	}
	if emu.mutation.StatussCleared() {
		_spec.ClearField(employeemaster.FieldStatuss, field.TypeString)
	}
	if value, ok := emu.mutation.VerifyStatus(); ok {
		_spec.SetField(employeemaster.FieldVerifyStatus, field.TypeBool, value)
	}
	if value, ok := emu.mutation.UidToken(); ok {
		_spec.SetField(employeemaster.FieldUidToken, field.TypeString, value)
	}
	if emu.mutation.UidTokenCleared() {
		_spec.ClearField(employeemaster.FieldUidToken, field.TypeString)
	}
	if value, ok := emu.mutation.Createdby(); ok {
		_spec.SetField(employeemaster.FieldCreatedby, field.TypeString, value)
	}
	if emu.mutation.CreatedbyCleared() {
		_spec.ClearField(employeemaster.FieldCreatedby, field.TypeString)
	}
	if value, ok := emu.mutation.DCCS(); ok {
		_spec.SetField(employeemaster.FieldDCCS, field.TypeString, value)
	}
	if emu.mutation.DCCSCleared() {
		_spec.ClearField(employeemaster.FieldDCCS, field.TypeString)
	}
	if value, ok := emu.mutation.CreatedById(); ok {
		_spec.SetField(employeemaster.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.AddedCreatedById(); ok {
		_spec.AddField(employeemaster.FieldCreatedById, field.TypeInt64, value)
	}
	if emu.mutation.CreatedByIdCleared() {
		_spec.ClearField(employeemaster.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := emu.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeemaster.FieldCreatedByUserName, field.TypeString, value)
	}
	if emu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(employeemaster.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := emu.mutation.CreatedByEmpId(); ok {
		_spec.SetField(employeemaster.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(employeemaster.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if emu.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(employeemaster.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := emu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeemaster.FieldCreatedByDesignation, field.TypeString, value)
	}
	if emu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(employeemaster.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := emu.mutation.CreatedDate(); ok {
		_spec.SetField(employeemaster.FieldCreatedDate, field.TypeTime, value)
	}
	if emu.mutation.CreatedDateCleared() {
		_spec.ClearField(employeemaster.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := emu.mutation.ModifiedById(); ok {
		_spec.SetField(employeemaster.FieldModifiedById, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.AddedModifiedById(); ok {
		_spec.AddField(employeemaster.FieldModifiedById, field.TypeInt64, value)
	}
	if emu.mutation.ModifiedByIdCleared() {
		_spec.ClearField(employeemaster.FieldModifiedById, field.TypeInt64)
	}
	if value, ok := emu.mutation.ModifiedByUserName(); ok {
		_spec.SetField(employeemaster.FieldModifiedByUserName, field.TypeString, value)
	}
	if emu.mutation.ModifiedByUserNameCleared() {
		_spec.ClearField(employeemaster.FieldModifiedByUserName, field.TypeString)
	}
	if value, ok := emu.mutation.ModifiedByEmpId(); ok {
		_spec.SetField(employeemaster.FieldModifiedByEmpId, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.AddedModifiedByEmpId(); ok {
		_spec.AddField(employeemaster.FieldModifiedByEmpId, field.TypeInt64, value)
	}
	if emu.mutation.ModifiedByEmpIdCleared() {
		_spec.ClearField(employeemaster.FieldModifiedByEmpId, field.TypeInt64)
	}
	if value, ok := emu.mutation.ModifiedByDesignantion(); ok {
		_spec.SetField(employeemaster.FieldModifiedByDesignantion, field.TypeString, value)
	}
	if emu.mutation.ModifiedByDesignantionCleared() {
		_spec.ClearField(employeemaster.FieldModifiedByDesignantion, field.TypeString)
	}
	if value, ok := emu.mutation.ModifiedDate(); ok {
		_spec.SetField(employeemaster.FieldModifiedDate, field.TypeTime, value)
	}
	if emu.mutation.ModifiedDateCleared() {
		_spec.ClearField(employeemaster.FieldModifiedDate, field.TypeTime)
	}
	if value, ok := emu.mutation.DeletedById(); ok {
		_spec.SetField(employeemaster.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.AddedDeletedById(); ok {
		_spec.AddField(employeemaster.FieldDeletedById, field.TypeInt64, value)
	}
	if emu.mutation.DeletedByIdCleared() {
		_spec.ClearField(employeemaster.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := emu.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeemaster.FieldDeletedByUserName, field.TypeString, value)
	}
	if emu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(employeemaster.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := emu.mutation.DeletedByEmpId(); ok {
		_spec.SetField(employeemaster.FieldDeletedByEmpId, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.AddedDeletedByEmpId(); ok {
		_spec.AddField(employeemaster.FieldDeletedByEmpId, field.TypeInt64, value)
	}
	if emu.mutation.DeletedByEmpIdCleared() {
		_spec.ClearField(employeemaster.FieldDeletedByEmpId, field.TypeInt64)
	}
	if value, ok := emu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeemaster.FieldDeletedByDesignation, field.TypeString, value)
	}
	if emu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(employeemaster.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := emu.mutation.DeletedDate(); ok {
		_spec.SetField(employeemaster.FieldDeletedDate, field.TypeTime, value)
	}
	if emu.mutation.DeletedDateCleared() {
		_spec.ClearField(employeemaster.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := emu.mutation.UpdatedAt(); ok {
		_spec.SetField(employeemaster.FieldUpdatedAt, field.TypeTime, value)
	}
	if emu.mutation.UpdatedAtCleared() {
		_spec.ClearField(employeemaster.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := emu.mutation.UpdatedBy(); ok {
		_spec.SetField(employeemaster.FieldUpdatedBy, field.TypeString, value)
	}
	if emu.mutation.UpdatedByCleared() {
		_spec.ClearField(employeemaster.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := emu.mutation.SmsOtp(); ok {
		_spec.SetField(employeemaster.FieldSmsOtp, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.AddedSmsOtp(); ok {
		_spec.AddField(employeemaster.FieldSmsOtp, field.TypeInt64, value)
	}
	if emu.mutation.SmsOtpCleared() {
		_spec.ClearField(employeemaster.FieldSmsOtp, field.TypeInt64)
	}
	if value, ok := emu.mutation.SmsTriggeredTime(); ok {
		_spec.SetField(employeemaster.FieldSmsTriggeredTime, field.TypeTime, value)
	}
	if emu.mutation.SmsTriggeredTimeCleared() {
		_spec.ClearField(employeemaster.FieldSmsTriggeredTime, field.TypeTime)
	}
	if value, ok := emu.mutation.SmsVerifyStatus(); ok {
		_spec.SetField(employeemaster.FieldSmsVerifyStatus, field.TypeBool, value)
	}
	if value, ok := emu.mutation.EmailOtp(); ok {
		_spec.SetField(employeemaster.FieldEmailOtp, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.AddedEmailOtp(); ok {
		_spec.AddField(employeemaster.FieldEmailOtp, field.TypeInt64, value)
	}
	if emu.mutation.EmailOtpCleared() {
		_spec.ClearField(employeemaster.FieldEmailOtp, field.TypeInt64)
	}
	if value, ok := emu.mutation.EmailTriggeredTime(); ok {
		_spec.SetField(employeemaster.FieldEmailTriggeredTime, field.TypeTime, value)
	}
	if emu.mutation.EmailTriggeredTimeCleared() {
		_spec.ClearField(employeemaster.FieldEmailTriggeredTime, field.TypeTime)
	}
	if value, ok := emu.mutation.EmailVerifyStatus(); ok {
		_spec.SetField(employeemaster.FieldEmailVerifyStatus, field.TypeBool, value)
	}
	if value, ok := emu.mutation.FinalSubmitStatus(); ok {
		_spec.SetField(employeemaster.FieldFinalSubmitStatus, field.TypeBool, value)
	}
	if value, ok := emu.mutation.DCInPresentCadre(); ok {
		_spec.SetField(employeemaster.FieldDCInPresentCadre, field.TypeString, value)
	}
	if emu.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(employeemaster.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := emu.mutation.Cadre(); ok {
		_spec.SetField(employeemaster.FieldCadre, field.TypeString, value)
	}
	if emu.mutation.CadreCleared() {
		_spec.ClearField(employeemaster.FieldCadre, field.TypeString)
	}
	if emu.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.RemovedUsermasterRefIDs(); len(nodes) > 0 && !emu.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.UsermasterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emu.mutation.EmpRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.RemovedEmpRefIDs(); len(nodes) > 0 && !emu.mutation.EmpRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.EmpRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.LogDataTable,
			Columns: []string{employeemaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !emu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.LogDataTable,
			Columns: []string{employeemaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.LogDataTable,
			Columns: []string{employeemaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, emu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeemaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	emu.mutation.done = true
	return n, nil
}

// EmployeeMasterUpdateOne is the builder for updating a single EmployeeMaster entity.
type EmployeeMasterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeMasterMutation
}

// SetEmployeeID sets the "EmployeeID" field.
func (emuo *EmployeeMasterUpdateOne) SetEmployeeID(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.ResetEmployeeID()
	emuo.mutation.SetEmployeeID(i)
	return emuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmployeeID(i *int64) *EmployeeMasterUpdateOne {
	if i != nil {
		emuo.SetEmployeeID(*i)
	}
	return emuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (emuo *EmployeeMasterUpdateOne) AddEmployeeID(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddEmployeeID(i)
	return emuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmployeeID() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmployeeID()
	return emuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (emuo *EmployeeMasterUpdateOne) SetEmployeeName(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetEmployeeName(s)
	return emuo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmployeeName(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetEmployeeName(*s)
	}
	return emuo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmployeeName() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmployeeName()
	return emuo
}

// SetDOB sets the "DOB" field.
func (emuo *EmployeeMasterUpdateOne) SetDOB(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetDOB(s)
	return emuo
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableDOB(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetDOB(*s)
	}
	return emuo
}

// ClearDOB clears the value of the "DOB" field.
func (emuo *EmployeeMasterUpdateOne) ClearDOB() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearDOB()
	return emuo
}

// SetGender sets the "Gender" field.
func (emuo *EmployeeMasterUpdateOne) SetGender(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetGender(s)
	return emuo
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableGender(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetGender(*s)
	}
	return emuo
}

// ClearGender clears the value of the "Gender" field.
func (emuo *EmployeeMasterUpdateOne) ClearGender() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearGender()
	return emuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (emuo *EmployeeMasterUpdateOne) SetMobileNumber(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetMobileNumber(s)
	return emuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableMobileNumber(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetMobileNumber(*s)
	}
	return emuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (emuo *EmployeeMasterUpdateOne) ClearMobileNumber() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearMobileNumber()
	return emuo
}

// SetEmailID sets the "EmailID" field.
func (emuo *EmployeeMasterUpdateOne) SetEmailID(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetEmailID(s)
	return emuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmailID(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetEmailID(*s)
	}
	return emuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmailID() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmailID()
	return emuo
}

// SetEmployeeCategoryCode sets the "EmployeeCategoryCode" field.
func (emuo *EmployeeMasterUpdateOne) SetEmployeeCategoryCode(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetEmployeeCategoryCode(s)
	return emuo
}

// SetNillableEmployeeCategoryCode sets the "EmployeeCategoryCode" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmployeeCategoryCode(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetEmployeeCategoryCode(*s)
	}
	return emuo
}

// ClearEmployeeCategoryCode clears the value of the "EmployeeCategoryCode" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmployeeCategoryCode() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmployeeCategoryCode()
	return emuo
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (emuo *EmployeeMasterUpdateOne) SetEmployeeCategory(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetEmployeeCategory(s)
	return emuo
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmployeeCategory(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetEmployeeCategory(*s)
	}
	return emuo
}

// ClearEmployeeCategory clears the value of the "EmployeeCategory" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmployeeCategory() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmployeeCategory()
	return emuo
}

// SetPostCode sets the "PostCode" field.
func (emuo *EmployeeMasterUpdateOne) SetPostCode(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetPostCode(s)
	return emuo
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillablePostCode(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetPostCode(*s)
	}
	return emuo
}

// ClearPostCode clears the value of the "PostCode" field.
func (emuo *EmployeeMasterUpdateOne) ClearPostCode() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearPostCode()
	return emuo
}

// SetEmployeePost sets the "EmployeePost" field.
func (emuo *EmployeeMasterUpdateOne) SetEmployeePost(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetEmployeePost(s)
	return emuo
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmployeePost(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetEmployeePost(*s)
	}
	return emuo
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmployeePost() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmployeePost()
	return emuo
}

// SetFacilityID sets the "FacilityID" field.
func (emuo *EmployeeMasterUpdateOne) SetFacilityID(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetFacilityID(s)
	return emuo
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableFacilityID(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetFacilityID(*s)
	}
	return emuo
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (emuo *EmployeeMasterUpdateOne) ClearFacilityID() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearFacilityID()
	return emuo
}

// SetOfficeName sets the "OfficeName" field.
func (emuo *EmployeeMasterUpdateOne) SetOfficeName(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetOfficeName(s)
	return emuo
}

// SetNillableOfficeName sets the "OfficeName" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableOfficeName(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetOfficeName(*s)
	}
	return emuo
}

// ClearOfficeName clears the value of the "OfficeName" field.
func (emuo *EmployeeMasterUpdateOne) ClearOfficeName() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearOfficeName()
	return emuo
}

// SetControllingAuthorityFacilityId sets the "ControllingAuthorityFacilityId" field.
func (emuo *EmployeeMasterUpdateOne) SetControllingAuthorityFacilityId(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetControllingAuthorityFacilityId(s)
	return emuo
}

// SetNillableControllingAuthorityFacilityId sets the "ControllingAuthorityFacilityId" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableControllingAuthorityFacilityId(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetControllingAuthorityFacilityId(*s)
	}
	return emuo
}

// ClearControllingAuthorityFacilityId clears the value of the "ControllingAuthorityFacilityId" field.
func (emuo *EmployeeMasterUpdateOne) ClearControllingAuthorityFacilityId() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearControllingAuthorityFacilityId()
	return emuo
}

// SetControllingAuthorityName sets the "ControllingAuthorityName" field.
func (emuo *EmployeeMasterUpdateOne) SetControllingAuthorityName(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetControllingAuthorityName(s)
	return emuo
}

// SetNillableControllingAuthorityName sets the "ControllingAuthorityName" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableControllingAuthorityName(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetControllingAuthorityName(*s)
	}
	return emuo
}

// ClearControllingAuthorityName clears the value of the "ControllingAuthorityName" field.
func (emuo *EmployeeMasterUpdateOne) ClearControllingAuthorityName() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearControllingAuthorityName()
	return emuo
}

// SetNodalAuthorityFaciliyId sets the "NodalAuthorityFaciliyId" field.
func (emuo *EmployeeMasterUpdateOne) SetNodalAuthorityFaciliyId(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetNodalAuthorityFaciliyId(s)
	return emuo
}

// SetNillableNodalAuthorityFaciliyId sets the "NodalAuthorityFaciliyId" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableNodalAuthorityFaciliyId(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetNodalAuthorityFaciliyId(*s)
	}
	return emuo
}

// ClearNodalAuthorityFaciliyId clears the value of the "NodalAuthorityFaciliyId" field.
func (emuo *EmployeeMasterUpdateOne) ClearNodalAuthorityFaciliyId() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearNodalAuthorityFaciliyId()
	return emuo
}

// SetNodalAuthorityName sets the "NodalAuthorityName" field.
func (emuo *EmployeeMasterUpdateOne) SetNodalAuthorityName(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetNodalAuthorityName(s)
	return emuo
}

// SetNillableNodalAuthorityName sets the "NodalAuthorityName" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableNodalAuthorityName(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetNodalAuthorityName(*s)
	}
	return emuo
}

// ClearNodalAuthorityName clears the value of the "NodalAuthorityName" field.
func (emuo *EmployeeMasterUpdateOne) ClearNodalAuthorityName() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearNodalAuthorityName()
	return emuo
}

// SetPincode sets the "Pincode" field.
func (emuo *EmployeeMasterUpdateOne) SetPincode(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetPincode(s)
	return emuo
}

// SetNillablePincode sets the "Pincode" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillablePincode(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetPincode(*s)
	}
	return emuo
}

// ClearPincode clears the value of the "Pincode" field.
func (emuo *EmployeeMasterUpdateOne) ClearPincode() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearPincode()
	return emuo
}

// SetCircleFacilityID sets the "CircleFacilityID" field.
func (emuo *EmployeeMasterUpdateOne) SetCircleFacilityID(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetCircleFacilityID(s)
	return emuo
}

// SetNillableCircleFacilityID sets the "CircleFacilityID" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableCircleFacilityID(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetCircleFacilityID(*s)
	}
	return emuo
}

// ClearCircleFacilityID clears the value of the "CircleFacilityID" field.
func (emuo *EmployeeMasterUpdateOne) ClearCircleFacilityID() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearCircleFacilityID()
	return emuo
}

// SetStatuss sets the "Statuss" field.
func (emuo *EmployeeMasterUpdateOne) SetStatuss(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetStatuss(s)
	return emuo
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableStatuss(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetStatuss(*s)
	}
	return emuo
}

// ClearStatuss clears the value of the "Statuss" field.
func (emuo *EmployeeMasterUpdateOne) ClearStatuss() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearStatuss()
	return emuo
}

// SetVerifyStatus sets the "VerifyStatus" field.
func (emuo *EmployeeMasterUpdateOne) SetVerifyStatus(b bool) *EmployeeMasterUpdateOne {
	emuo.mutation.SetVerifyStatus(b)
	return emuo
}

// SetNillableVerifyStatus sets the "VerifyStatus" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableVerifyStatus(b *bool) *EmployeeMasterUpdateOne {
	if b != nil {
		emuo.SetVerifyStatus(*b)
	}
	return emuo
}

// SetUidToken sets the "UidToken" field.
func (emuo *EmployeeMasterUpdateOne) SetUidToken(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetUidToken(s)
	return emuo
}

// SetNillableUidToken sets the "UidToken" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableUidToken(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetUidToken(*s)
	}
	return emuo
}

// ClearUidToken clears the value of the "UidToken" field.
func (emuo *EmployeeMasterUpdateOne) ClearUidToken() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearUidToken()
	return emuo
}

// SetCreatedby sets the "Createdby" field.
func (emuo *EmployeeMasterUpdateOne) SetCreatedby(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetCreatedby(s)
	return emuo
}

// SetNillableCreatedby sets the "Createdby" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableCreatedby(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetCreatedby(*s)
	}
	return emuo
}

// ClearCreatedby clears the value of the "Createdby" field.
func (emuo *EmployeeMasterUpdateOne) ClearCreatedby() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearCreatedby()
	return emuo
}

// SetDCCS sets the "DCCS" field.
func (emuo *EmployeeMasterUpdateOne) SetDCCS(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetDCCS(s)
	return emuo
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableDCCS(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetDCCS(*s)
	}
	return emuo
}

// ClearDCCS clears the value of the "DCCS" field.
func (emuo *EmployeeMasterUpdateOne) ClearDCCS() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearDCCS()
	return emuo
}

// SetCreatedById sets the "CreatedById" field.
func (emuo *EmployeeMasterUpdateOne) SetCreatedById(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.ResetCreatedById()
	emuo.mutation.SetCreatedById(i)
	return emuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableCreatedById(i *int64) *EmployeeMasterUpdateOne {
	if i != nil {
		emuo.SetCreatedById(*i)
	}
	return emuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (emuo *EmployeeMasterUpdateOne) AddCreatedById(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddCreatedById(i)
	return emuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (emuo *EmployeeMasterUpdateOne) ClearCreatedById() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearCreatedById()
	return emuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (emuo *EmployeeMasterUpdateOne) SetCreatedByUserName(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetCreatedByUserName(s)
	return emuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableCreatedByUserName(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetCreatedByUserName(*s)
	}
	return emuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (emuo *EmployeeMasterUpdateOne) ClearCreatedByUserName() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearCreatedByUserName()
	return emuo
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (emuo *EmployeeMasterUpdateOne) SetCreatedByEmpId(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.ResetCreatedByEmpId()
	emuo.mutation.SetCreatedByEmpId(i)
	return emuo
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableCreatedByEmpId(i *int64) *EmployeeMasterUpdateOne {
	if i != nil {
		emuo.SetCreatedByEmpId(*i)
	}
	return emuo
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (emuo *EmployeeMasterUpdateOne) AddCreatedByEmpId(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddCreatedByEmpId(i)
	return emuo
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (emuo *EmployeeMasterUpdateOne) ClearCreatedByEmpId() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearCreatedByEmpId()
	return emuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (emuo *EmployeeMasterUpdateOne) SetCreatedByDesignation(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetCreatedByDesignation(s)
	return emuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableCreatedByDesignation(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetCreatedByDesignation(*s)
	}
	return emuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (emuo *EmployeeMasterUpdateOne) ClearCreatedByDesignation() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearCreatedByDesignation()
	return emuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (emuo *EmployeeMasterUpdateOne) SetCreatedDate(t time.Time) *EmployeeMasterUpdateOne {
	emuo.mutation.SetCreatedDate(t)
	return emuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableCreatedDate(t *time.Time) *EmployeeMasterUpdateOne {
	if t != nil {
		emuo.SetCreatedDate(*t)
	}
	return emuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (emuo *EmployeeMasterUpdateOne) ClearCreatedDate() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearCreatedDate()
	return emuo
}

// SetModifiedById sets the "ModifiedById" field.
func (emuo *EmployeeMasterUpdateOne) SetModifiedById(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.ResetModifiedById()
	emuo.mutation.SetModifiedById(i)
	return emuo
}

// SetNillableModifiedById sets the "ModifiedById" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableModifiedById(i *int64) *EmployeeMasterUpdateOne {
	if i != nil {
		emuo.SetModifiedById(*i)
	}
	return emuo
}

// AddModifiedById adds i to the "ModifiedById" field.
func (emuo *EmployeeMasterUpdateOne) AddModifiedById(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddModifiedById(i)
	return emuo
}

// ClearModifiedById clears the value of the "ModifiedById" field.
func (emuo *EmployeeMasterUpdateOne) ClearModifiedById() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearModifiedById()
	return emuo
}

// SetModifiedByUserName sets the "ModifiedByUserName" field.
func (emuo *EmployeeMasterUpdateOne) SetModifiedByUserName(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetModifiedByUserName(s)
	return emuo
}

// SetNillableModifiedByUserName sets the "ModifiedByUserName" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableModifiedByUserName(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetModifiedByUserName(*s)
	}
	return emuo
}

// ClearModifiedByUserName clears the value of the "ModifiedByUserName" field.
func (emuo *EmployeeMasterUpdateOne) ClearModifiedByUserName() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearModifiedByUserName()
	return emuo
}

// SetModifiedByEmpId sets the "ModifiedByEmpId" field.
func (emuo *EmployeeMasterUpdateOne) SetModifiedByEmpId(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.ResetModifiedByEmpId()
	emuo.mutation.SetModifiedByEmpId(i)
	return emuo
}

// SetNillableModifiedByEmpId sets the "ModifiedByEmpId" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableModifiedByEmpId(i *int64) *EmployeeMasterUpdateOne {
	if i != nil {
		emuo.SetModifiedByEmpId(*i)
	}
	return emuo
}

// AddModifiedByEmpId adds i to the "ModifiedByEmpId" field.
func (emuo *EmployeeMasterUpdateOne) AddModifiedByEmpId(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddModifiedByEmpId(i)
	return emuo
}

// ClearModifiedByEmpId clears the value of the "ModifiedByEmpId" field.
func (emuo *EmployeeMasterUpdateOne) ClearModifiedByEmpId() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearModifiedByEmpId()
	return emuo
}

// SetModifiedByDesignantion sets the "ModifiedByDesignantion" field.
func (emuo *EmployeeMasterUpdateOne) SetModifiedByDesignantion(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetModifiedByDesignantion(s)
	return emuo
}

// SetNillableModifiedByDesignantion sets the "ModifiedByDesignantion" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableModifiedByDesignantion(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetModifiedByDesignantion(*s)
	}
	return emuo
}

// ClearModifiedByDesignantion clears the value of the "ModifiedByDesignantion" field.
func (emuo *EmployeeMasterUpdateOne) ClearModifiedByDesignantion() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearModifiedByDesignantion()
	return emuo
}

// SetModifiedDate sets the "ModifiedDate" field.
func (emuo *EmployeeMasterUpdateOne) SetModifiedDate(t time.Time) *EmployeeMasterUpdateOne {
	emuo.mutation.SetModifiedDate(t)
	return emuo
}

// SetNillableModifiedDate sets the "ModifiedDate" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableModifiedDate(t *time.Time) *EmployeeMasterUpdateOne {
	if t != nil {
		emuo.SetModifiedDate(*t)
	}
	return emuo
}

// ClearModifiedDate clears the value of the "ModifiedDate" field.
func (emuo *EmployeeMasterUpdateOne) ClearModifiedDate() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearModifiedDate()
	return emuo
}

// SetDeletedById sets the "DeletedById" field.
func (emuo *EmployeeMasterUpdateOne) SetDeletedById(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.ResetDeletedById()
	emuo.mutation.SetDeletedById(i)
	return emuo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableDeletedById(i *int64) *EmployeeMasterUpdateOne {
	if i != nil {
		emuo.SetDeletedById(*i)
	}
	return emuo
}

// AddDeletedById adds i to the "DeletedById" field.
func (emuo *EmployeeMasterUpdateOne) AddDeletedById(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddDeletedById(i)
	return emuo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (emuo *EmployeeMasterUpdateOne) ClearDeletedById() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearDeletedById()
	return emuo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (emuo *EmployeeMasterUpdateOne) SetDeletedByUserName(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetDeletedByUserName(s)
	return emuo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableDeletedByUserName(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetDeletedByUserName(*s)
	}
	return emuo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (emuo *EmployeeMasterUpdateOne) ClearDeletedByUserName() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearDeletedByUserName()
	return emuo
}

// SetDeletedByEmpId sets the "DeletedByEmpId" field.
func (emuo *EmployeeMasterUpdateOne) SetDeletedByEmpId(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.ResetDeletedByEmpId()
	emuo.mutation.SetDeletedByEmpId(i)
	return emuo
}

// SetNillableDeletedByEmpId sets the "DeletedByEmpId" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableDeletedByEmpId(i *int64) *EmployeeMasterUpdateOne {
	if i != nil {
		emuo.SetDeletedByEmpId(*i)
	}
	return emuo
}

// AddDeletedByEmpId adds i to the "DeletedByEmpId" field.
func (emuo *EmployeeMasterUpdateOne) AddDeletedByEmpId(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddDeletedByEmpId(i)
	return emuo
}

// ClearDeletedByEmpId clears the value of the "DeletedByEmpId" field.
func (emuo *EmployeeMasterUpdateOne) ClearDeletedByEmpId() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearDeletedByEmpId()
	return emuo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (emuo *EmployeeMasterUpdateOne) SetDeletedByDesignation(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetDeletedByDesignation(s)
	return emuo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableDeletedByDesignation(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetDeletedByDesignation(*s)
	}
	return emuo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (emuo *EmployeeMasterUpdateOne) ClearDeletedByDesignation() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearDeletedByDesignation()
	return emuo
}

// SetDeletedDate sets the "DeletedDate" field.
func (emuo *EmployeeMasterUpdateOne) SetDeletedDate(t time.Time) *EmployeeMasterUpdateOne {
	emuo.mutation.SetDeletedDate(t)
	return emuo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableDeletedDate(t *time.Time) *EmployeeMasterUpdateOne {
	if t != nil {
		emuo.SetDeletedDate(*t)
	}
	return emuo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (emuo *EmployeeMasterUpdateOne) ClearDeletedDate() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearDeletedDate()
	return emuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (emuo *EmployeeMasterUpdateOne) SetUpdatedAt(t time.Time) *EmployeeMasterUpdateOne {
	emuo.mutation.SetUpdatedAt(t)
	return emuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableUpdatedAt(t *time.Time) *EmployeeMasterUpdateOne {
	if t != nil {
		emuo.SetUpdatedAt(*t)
	}
	return emuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (emuo *EmployeeMasterUpdateOne) ClearUpdatedAt() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearUpdatedAt()
	return emuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (emuo *EmployeeMasterUpdateOne) SetUpdatedBy(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetUpdatedBy(s)
	return emuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableUpdatedBy(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetUpdatedBy(*s)
	}
	return emuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (emuo *EmployeeMasterUpdateOne) ClearUpdatedBy() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearUpdatedBy()
	return emuo
}

// SetSmsOtp sets the "SmsOtp" field.
func (emuo *EmployeeMasterUpdateOne) SetSmsOtp(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.ResetSmsOtp()
	emuo.mutation.SetSmsOtp(i)
	return emuo
}

// SetNillableSmsOtp sets the "SmsOtp" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableSmsOtp(i *int64) *EmployeeMasterUpdateOne {
	if i != nil {
		emuo.SetSmsOtp(*i)
	}
	return emuo
}

// AddSmsOtp adds i to the "SmsOtp" field.
func (emuo *EmployeeMasterUpdateOne) AddSmsOtp(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddSmsOtp(i)
	return emuo
}

// ClearSmsOtp clears the value of the "SmsOtp" field.
func (emuo *EmployeeMasterUpdateOne) ClearSmsOtp() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearSmsOtp()
	return emuo
}

// SetSmsTriggeredTime sets the "SmsTriggeredTime" field.
func (emuo *EmployeeMasterUpdateOne) SetSmsTriggeredTime(t time.Time) *EmployeeMasterUpdateOne {
	emuo.mutation.SetSmsTriggeredTime(t)
	return emuo
}

// SetNillableSmsTriggeredTime sets the "SmsTriggeredTime" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableSmsTriggeredTime(t *time.Time) *EmployeeMasterUpdateOne {
	if t != nil {
		emuo.SetSmsTriggeredTime(*t)
	}
	return emuo
}

// ClearSmsTriggeredTime clears the value of the "SmsTriggeredTime" field.
func (emuo *EmployeeMasterUpdateOne) ClearSmsTriggeredTime() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearSmsTriggeredTime()
	return emuo
}

// SetSmsVerifyStatus sets the "SmsVerifyStatus" field.
func (emuo *EmployeeMasterUpdateOne) SetSmsVerifyStatus(b bool) *EmployeeMasterUpdateOne {
	emuo.mutation.SetSmsVerifyStatus(b)
	return emuo
}

// SetNillableSmsVerifyStatus sets the "SmsVerifyStatus" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableSmsVerifyStatus(b *bool) *EmployeeMasterUpdateOne {
	if b != nil {
		emuo.SetSmsVerifyStatus(*b)
	}
	return emuo
}

// SetEmailOtp sets the "EmailOtp" field.
func (emuo *EmployeeMasterUpdateOne) SetEmailOtp(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.ResetEmailOtp()
	emuo.mutation.SetEmailOtp(i)
	return emuo
}

// SetNillableEmailOtp sets the "EmailOtp" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmailOtp(i *int64) *EmployeeMasterUpdateOne {
	if i != nil {
		emuo.SetEmailOtp(*i)
	}
	return emuo
}

// AddEmailOtp adds i to the "EmailOtp" field.
func (emuo *EmployeeMasterUpdateOne) AddEmailOtp(i int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddEmailOtp(i)
	return emuo
}

// ClearEmailOtp clears the value of the "EmailOtp" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmailOtp() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmailOtp()
	return emuo
}

// SetEmailTriggeredTime sets the "EmailTriggeredTime" field.
func (emuo *EmployeeMasterUpdateOne) SetEmailTriggeredTime(t time.Time) *EmployeeMasterUpdateOne {
	emuo.mutation.SetEmailTriggeredTime(t)
	return emuo
}

// SetNillableEmailTriggeredTime sets the "EmailTriggeredTime" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmailTriggeredTime(t *time.Time) *EmployeeMasterUpdateOne {
	if t != nil {
		emuo.SetEmailTriggeredTime(*t)
	}
	return emuo
}

// ClearEmailTriggeredTime clears the value of the "EmailTriggeredTime" field.
func (emuo *EmployeeMasterUpdateOne) ClearEmailTriggeredTime() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmailTriggeredTime()
	return emuo
}

// SetEmailVerifyStatus sets the "EmailVerifyStatus" field.
func (emuo *EmployeeMasterUpdateOne) SetEmailVerifyStatus(b bool) *EmployeeMasterUpdateOne {
	emuo.mutation.SetEmailVerifyStatus(b)
	return emuo
}

// SetNillableEmailVerifyStatus sets the "EmailVerifyStatus" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableEmailVerifyStatus(b *bool) *EmployeeMasterUpdateOne {
	if b != nil {
		emuo.SetEmailVerifyStatus(*b)
	}
	return emuo
}

// SetFinalSubmitStatus sets the "FinalSubmitStatus" field.
func (emuo *EmployeeMasterUpdateOne) SetFinalSubmitStatus(b bool) *EmployeeMasterUpdateOne {
	emuo.mutation.SetFinalSubmitStatus(b)
	return emuo
}

// SetNillableFinalSubmitStatus sets the "FinalSubmitStatus" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableFinalSubmitStatus(b *bool) *EmployeeMasterUpdateOne {
	if b != nil {
		emuo.SetFinalSubmitStatus(*b)
	}
	return emuo
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (emuo *EmployeeMasterUpdateOne) SetDCInPresentCadre(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetDCInPresentCadre(s)
	return emuo
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableDCInPresentCadre(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetDCInPresentCadre(*s)
	}
	return emuo
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (emuo *EmployeeMasterUpdateOne) ClearDCInPresentCadre() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearDCInPresentCadre()
	return emuo
}

// SetCadre sets the "Cadre" field.
func (emuo *EmployeeMasterUpdateOne) SetCadre(s string) *EmployeeMasterUpdateOne {
	emuo.mutation.SetCadre(s)
	return emuo
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (emuo *EmployeeMasterUpdateOne) SetNillableCadre(s *string) *EmployeeMasterUpdateOne {
	if s != nil {
		emuo.SetCadre(*s)
	}
	return emuo
}

// ClearCadre clears the value of the "Cadre" field.
func (emuo *EmployeeMasterUpdateOne) ClearCadre() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearCadre()
	return emuo
}

// AddUsermasterRefIDs adds the "UsermasterRef" edge to the UserMaster entity by IDs.
func (emuo *EmployeeMasterUpdateOne) AddUsermasterRefIDs(ids ...int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddUsermasterRefIDs(ids...)
	return emuo
}

// AddUsermasterRef adds the "UsermasterRef" edges to the UserMaster entity.
func (emuo *EmployeeMasterUpdateOne) AddUsermasterRef(u ...*UserMaster) *EmployeeMasterUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return emuo.AddUsermasterRefIDs(ids...)
}

// AddEmpRefIDs adds the "Emp_Ref" edge to the Exam_Applications_PS entity by IDs.
func (emuo *EmployeeMasterUpdateOne) AddEmpRefIDs(ids ...int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddEmpRefIDs(ids...)
	return emuo
}

// AddEmpRef adds the "Emp_Ref" edges to the Exam_Applications_PS entity.
func (emuo *EmployeeMasterUpdateOne) AddEmpRef(e ...*Exam_Applications_PS) *EmployeeMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emuo.AddEmpRefIDs(ids...)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (emuo *EmployeeMasterUpdateOne) AddLogDatumIDs(ids ...int64) *EmployeeMasterUpdateOne {
	emuo.mutation.AddLogDatumIDs(ids...)
	return emuo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (emuo *EmployeeMasterUpdateOne) AddLogData(l ...*Logs) *EmployeeMasterUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return emuo.AddLogDatumIDs(ids...)
}

// Mutation returns the EmployeeMasterMutation object of the builder.
func (emuo *EmployeeMasterUpdateOne) Mutation() *EmployeeMasterMutation {
	return emuo.mutation
}

// ClearUsermasterRef clears all "UsermasterRef" edges to the UserMaster entity.
func (emuo *EmployeeMasterUpdateOne) ClearUsermasterRef() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearUsermasterRef()
	return emuo
}

// RemoveUsermasterRefIDs removes the "UsermasterRef" edge to UserMaster entities by IDs.
func (emuo *EmployeeMasterUpdateOne) RemoveUsermasterRefIDs(ids ...int64) *EmployeeMasterUpdateOne {
	emuo.mutation.RemoveUsermasterRefIDs(ids...)
	return emuo
}

// RemoveUsermasterRef removes "UsermasterRef" edges to UserMaster entities.
func (emuo *EmployeeMasterUpdateOne) RemoveUsermasterRef(u ...*UserMaster) *EmployeeMasterUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return emuo.RemoveUsermasterRefIDs(ids...)
}

// ClearEmpRef clears all "Emp_Ref" edges to the Exam_Applications_PS entity.
func (emuo *EmployeeMasterUpdateOne) ClearEmpRef() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearEmpRef()
	return emuo
}

// RemoveEmpRefIDs removes the "Emp_Ref" edge to Exam_Applications_PS entities by IDs.
func (emuo *EmployeeMasterUpdateOne) RemoveEmpRefIDs(ids ...int64) *EmployeeMasterUpdateOne {
	emuo.mutation.RemoveEmpRefIDs(ids...)
	return emuo
}

// RemoveEmpRef removes "Emp_Ref" edges to Exam_Applications_PS entities.
func (emuo *EmployeeMasterUpdateOne) RemoveEmpRef(e ...*Exam_Applications_PS) *EmployeeMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emuo.RemoveEmpRefIDs(ids...)
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (emuo *EmployeeMasterUpdateOne) ClearLogData() *EmployeeMasterUpdateOne {
	emuo.mutation.ClearLogData()
	return emuo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (emuo *EmployeeMasterUpdateOne) RemoveLogDatumIDs(ids ...int64) *EmployeeMasterUpdateOne {
	emuo.mutation.RemoveLogDatumIDs(ids...)
	return emuo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (emuo *EmployeeMasterUpdateOne) RemoveLogData(l ...*Logs) *EmployeeMasterUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return emuo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the EmployeeMasterUpdate builder.
func (emuo *EmployeeMasterUpdateOne) Where(ps ...predicate.EmployeeMaster) *EmployeeMasterUpdateOne {
	emuo.mutation.Where(ps...)
	return emuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (emuo *EmployeeMasterUpdateOne) Select(field string, fields ...string) *EmployeeMasterUpdateOne {
	emuo.fields = append([]string{field}, fields...)
	return emuo
}

// Save executes the query and returns the updated EmployeeMaster entity.
func (emuo *EmployeeMasterUpdateOne) Save(ctx context.Context) (*EmployeeMaster, error) {
	return withHooks(ctx, emuo.sqlSave, emuo.mutation, emuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (emuo *EmployeeMasterUpdateOne) SaveX(ctx context.Context) *EmployeeMaster {
	node, err := emuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (emuo *EmployeeMasterUpdateOne) Exec(ctx context.Context) error {
	_, err := emuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emuo *EmployeeMasterUpdateOne) ExecX(ctx context.Context) {
	if err := emuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (emuo *EmployeeMasterUpdateOne) sqlSave(ctx context.Context) (_node *EmployeeMaster, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeemaster.Table, employeemaster.Columns, sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64))
	id, ok := emuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmployeeMaster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := emuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employeemaster.FieldID)
		for _, f := range fields {
			if !employeemaster.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employeemaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := emuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := emuo.mutation.EmployeeID(); ok {
		_spec.SetField(employeemaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(employeemaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if emuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := emuo.mutation.EmployeeName(); ok {
		_spec.SetField(employeemaster.FieldEmployeeName, field.TypeString, value)
	}
	if emuo.mutation.EmployeeNameCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeName, field.TypeString)
	}
	if value, ok := emuo.mutation.DOB(); ok {
		_spec.SetField(employeemaster.FieldDOB, field.TypeString, value)
	}
	if emuo.mutation.DOBCleared() {
		_spec.ClearField(employeemaster.FieldDOB, field.TypeString)
	}
	if value, ok := emuo.mutation.Gender(); ok {
		_spec.SetField(employeemaster.FieldGender, field.TypeString, value)
	}
	if emuo.mutation.GenderCleared() {
		_spec.ClearField(employeemaster.FieldGender, field.TypeString)
	}
	if value, ok := emuo.mutation.MobileNumber(); ok {
		_spec.SetField(employeemaster.FieldMobileNumber, field.TypeString, value)
	}
	if emuo.mutation.MobileNumberCleared() {
		_spec.ClearField(employeemaster.FieldMobileNumber, field.TypeString)
	}
	if value, ok := emuo.mutation.EmailID(); ok {
		_spec.SetField(employeemaster.FieldEmailID, field.TypeString, value)
	}
	if emuo.mutation.EmailIDCleared() {
		_spec.ClearField(employeemaster.FieldEmailID, field.TypeString)
	}
	if value, ok := emuo.mutation.EmployeeCategoryCode(); ok {
		_spec.SetField(employeemaster.FieldEmployeeCategoryCode, field.TypeString, value)
	}
	if emuo.mutation.EmployeeCategoryCodeCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeCategoryCode, field.TypeString)
	}
	if value, ok := emuo.mutation.EmployeeCategory(); ok {
		_spec.SetField(employeemaster.FieldEmployeeCategory, field.TypeString, value)
	}
	if emuo.mutation.EmployeeCategoryCleared() {
		_spec.ClearField(employeemaster.FieldEmployeeCategory, field.TypeString)
	}
	if value, ok := emuo.mutation.PostCode(); ok {
		_spec.SetField(employeemaster.FieldPostCode, field.TypeString, value)
	}
	if emuo.mutation.PostCodeCleared() {
		_spec.ClearField(employeemaster.FieldPostCode, field.TypeString)
	}
	if value, ok := emuo.mutation.EmployeePost(); ok {
		_spec.SetField(employeemaster.FieldEmployeePost, field.TypeString, value)
	}
	if emuo.mutation.EmployeePostCleared() {
		_spec.ClearField(employeemaster.FieldEmployeePost, field.TypeString)
	}
	if value, ok := emuo.mutation.FacilityID(); ok {
		_spec.SetField(employeemaster.FieldFacilityID, field.TypeString, value)
	}
	if emuo.mutation.FacilityIDCleared() {
		_spec.ClearField(employeemaster.FieldFacilityID, field.TypeString)
	}
	if value, ok := emuo.mutation.OfficeName(); ok {
		_spec.SetField(employeemaster.FieldOfficeName, field.TypeString, value)
	}
	if emuo.mutation.OfficeNameCleared() {
		_spec.ClearField(employeemaster.FieldOfficeName, field.TypeString)
	}
	if value, ok := emuo.mutation.ControllingAuthorityFacilityId(); ok {
		_spec.SetField(employeemaster.FieldControllingAuthorityFacilityId, field.TypeString, value)
	}
	if emuo.mutation.ControllingAuthorityFacilityIdCleared() {
		_spec.ClearField(employeemaster.FieldControllingAuthorityFacilityId, field.TypeString)
	}
	if value, ok := emuo.mutation.ControllingAuthorityName(); ok {
		_spec.SetField(employeemaster.FieldControllingAuthorityName, field.TypeString, value)
	}
	if emuo.mutation.ControllingAuthorityNameCleared() {
		_spec.ClearField(employeemaster.FieldControllingAuthorityName, field.TypeString)
	}
	if value, ok := emuo.mutation.NodalAuthorityFaciliyId(); ok {
		_spec.SetField(employeemaster.FieldNodalAuthorityFaciliyId, field.TypeString, value)
	}
	if emuo.mutation.NodalAuthorityFaciliyIdCleared() {
		_spec.ClearField(employeemaster.FieldNodalAuthorityFaciliyId, field.TypeString)
	}
	if value, ok := emuo.mutation.NodalAuthorityName(); ok {
		_spec.SetField(employeemaster.FieldNodalAuthorityName, field.TypeString, value)
	}
	if emuo.mutation.NodalAuthorityNameCleared() {
		_spec.ClearField(employeemaster.FieldNodalAuthorityName, field.TypeString)
	}
	if value, ok := emuo.mutation.Pincode(); ok {
		_spec.SetField(employeemaster.FieldPincode, field.TypeString, value)
	}
	if emuo.mutation.PincodeCleared() {
		_spec.ClearField(employeemaster.FieldPincode, field.TypeString)
	}
	if value, ok := emuo.mutation.CircleFacilityID(); ok {
		_spec.SetField(employeemaster.FieldCircleFacilityID, field.TypeString, value)
	}
	if emuo.mutation.CircleFacilityIDCleared() {
		_spec.ClearField(employeemaster.FieldCircleFacilityID, field.TypeString)
	}
	if value, ok := emuo.mutation.Statuss(); ok {
		_spec.SetField(employeemaster.FieldStatuss, field.TypeString, value)
	}
	if emuo.mutation.StatussCleared() {
		_spec.ClearField(employeemaster.FieldStatuss, field.TypeString)
	}
	if value, ok := emuo.mutation.VerifyStatus(); ok {
		_spec.SetField(employeemaster.FieldVerifyStatus, field.TypeBool, value)
	}
	if value, ok := emuo.mutation.UidToken(); ok {
		_spec.SetField(employeemaster.FieldUidToken, field.TypeString, value)
	}
	if emuo.mutation.UidTokenCleared() {
		_spec.ClearField(employeemaster.FieldUidToken, field.TypeString)
	}
	if value, ok := emuo.mutation.Createdby(); ok {
		_spec.SetField(employeemaster.FieldCreatedby, field.TypeString, value)
	}
	if emuo.mutation.CreatedbyCleared() {
		_spec.ClearField(employeemaster.FieldCreatedby, field.TypeString)
	}
	if value, ok := emuo.mutation.DCCS(); ok {
		_spec.SetField(employeemaster.FieldDCCS, field.TypeString, value)
	}
	if emuo.mutation.DCCSCleared() {
		_spec.ClearField(employeemaster.FieldDCCS, field.TypeString)
	}
	if value, ok := emuo.mutation.CreatedById(); ok {
		_spec.SetField(employeemaster.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(employeemaster.FieldCreatedById, field.TypeInt64, value)
	}
	if emuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(employeemaster.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := emuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeemaster.FieldCreatedByUserName, field.TypeString, value)
	}
	if emuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(employeemaster.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := emuo.mutation.CreatedByEmpId(); ok {
		_spec.SetField(employeemaster.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(employeemaster.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if emuo.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(employeemaster.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := emuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeemaster.FieldCreatedByDesignation, field.TypeString, value)
	}
	if emuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(employeemaster.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := emuo.mutation.CreatedDate(); ok {
		_spec.SetField(employeemaster.FieldCreatedDate, field.TypeTime, value)
	}
	if emuo.mutation.CreatedDateCleared() {
		_spec.ClearField(employeemaster.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := emuo.mutation.ModifiedById(); ok {
		_spec.SetField(employeemaster.FieldModifiedById, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.AddedModifiedById(); ok {
		_spec.AddField(employeemaster.FieldModifiedById, field.TypeInt64, value)
	}
	if emuo.mutation.ModifiedByIdCleared() {
		_spec.ClearField(employeemaster.FieldModifiedById, field.TypeInt64)
	}
	if value, ok := emuo.mutation.ModifiedByUserName(); ok {
		_spec.SetField(employeemaster.FieldModifiedByUserName, field.TypeString, value)
	}
	if emuo.mutation.ModifiedByUserNameCleared() {
		_spec.ClearField(employeemaster.FieldModifiedByUserName, field.TypeString)
	}
	if value, ok := emuo.mutation.ModifiedByEmpId(); ok {
		_spec.SetField(employeemaster.FieldModifiedByEmpId, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.AddedModifiedByEmpId(); ok {
		_spec.AddField(employeemaster.FieldModifiedByEmpId, field.TypeInt64, value)
	}
	if emuo.mutation.ModifiedByEmpIdCleared() {
		_spec.ClearField(employeemaster.FieldModifiedByEmpId, field.TypeInt64)
	}
	if value, ok := emuo.mutation.ModifiedByDesignantion(); ok {
		_spec.SetField(employeemaster.FieldModifiedByDesignantion, field.TypeString, value)
	}
	if emuo.mutation.ModifiedByDesignantionCleared() {
		_spec.ClearField(employeemaster.FieldModifiedByDesignantion, field.TypeString)
	}
	if value, ok := emuo.mutation.ModifiedDate(); ok {
		_spec.SetField(employeemaster.FieldModifiedDate, field.TypeTime, value)
	}
	if emuo.mutation.ModifiedDateCleared() {
		_spec.ClearField(employeemaster.FieldModifiedDate, field.TypeTime)
	}
	if value, ok := emuo.mutation.DeletedById(); ok {
		_spec.SetField(employeemaster.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.AddedDeletedById(); ok {
		_spec.AddField(employeemaster.FieldDeletedById, field.TypeInt64, value)
	}
	if emuo.mutation.DeletedByIdCleared() {
		_spec.ClearField(employeemaster.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := emuo.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeemaster.FieldDeletedByUserName, field.TypeString, value)
	}
	if emuo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(employeemaster.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := emuo.mutation.DeletedByEmpId(); ok {
		_spec.SetField(employeemaster.FieldDeletedByEmpId, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.AddedDeletedByEmpId(); ok {
		_spec.AddField(employeemaster.FieldDeletedByEmpId, field.TypeInt64, value)
	}
	if emuo.mutation.DeletedByEmpIdCleared() {
		_spec.ClearField(employeemaster.FieldDeletedByEmpId, field.TypeInt64)
	}
	if value, ok := emuo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeemaster.FieldDeletedByDesignation, field.TypeString, value)
	}
	if emuo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(employeemaster.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := emuo.mutation.DeletedDate(); ok {
		_spec.SetField(employeemaster.FieldDeletedDate, field.TypeTime, value)
	}
	if emuo.mutation.DeletedDateCleared() {
		_spec.ClearField(employeemaster.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := emuo.mutation.UpdatedAt(); ok {
		_spec.SetField(employeemaster.FieldUpdatedAt, field.TypeTime, value)
	}
	if emuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(employeemaster.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := emuo.mutation.UpdatedBy(); ok {
		_spec.SetField(employeemaster.FieldUpdatedBy, field.TypeString, value)
	}
	if emuo.mutation.UpdatedByCleared() {
		_spec.ClearField(employeemaster.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := emuo.mutation.SmsOtp(); ok {
		_spec.SetField(employeemaster.FieldSmsOtp, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.AddedSmsOtp(); ok {
		_spec.AddField(employeemaster.FieldSmsOtp, field.TypeInt64, value)
	}
	if emuo.mutation.SmsOtpCleared() {
		_spec.ClearField(employeemaster.FieldSmsOtp, field.TypeInt64)
	}
	if value, ok := emuo.mutation.SmsTriggeredTime(); ok {
		_spec.SetField(employeemaster.FieldSmsTriggeredTime, field.TypeTime, value)
	}
	if emuo.mutation.SmsTriggeredTimeCleared() {
		_spec.ClearField(employeemaster.FieldSmsTriggeredTime, field.TypeTime)
	}
	if value, ok := emuo.mutation.SmsVerifyStatus(); ok {
		_spec.SetField(employeemaster.FieldSmsVerifyStatus, field.TypeBool, value)
	}
	if value, ok := emuo.mutation.EmailOtp(); ok {
		_spec.SetField(employeemaster.FieldEmailOtp, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.AddedEmailOtp(); ok {
		_spec.AddField(employeemaster.FieldEmailOtp, field.TypeInt64, value)
	}
	if emuo.mutation.EmailOtpCleared() {
		_spec.ClearField(employeemaster.FieldEmailOtp, field.TypeInt64)
	}
	if value, ok := emuo.mutation.EmailTriggeredTime(); ok {
		_spec.SetField(employeemaster.FieldEmailTriggeredTime, field.TypeTime, value)
	}
	if emuo.mutation.EmailTriggeredTimeCleared() {
		_spec.ClearField(employeemaster.FieldEmailTriggeredTime, field.TypeTime)
	}
	if value, ok := emuo.mutation.EmailVerifyStatus(); ok {
		_spec.SetField(employeemaster.FieldEmailVerifyStatus, field.TypeBool, value)
	}
	if value, ok := emuo.mutation.FinalSubmitStatus(); ok {
		_spec.SetField(employeemaster.FieldFinalSubmitStatus, field.TypeBool, value)
	}
	if value, ok := emuo.mutation.DCInPresentCadre(); ok {
		_spec.SetField(employeemaster.FieldDCInPresentCadre, field.TypeString, value)
	}
	if emuo.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(employeemaster.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := emuo.mutation.Cadre(); ok {
		_spec.SetField(employeemaster.FieldCadre, field.TypeString, value)
	}
	if emuo.mutation.CadreCleared() {
		_spec.ClearField(employeemaster.FieldCadre, field.TypeString)
	}
	if emuo.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.RemovedUsermasterRefIDs(); len(nodes) > 0 && !emuo.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.UsermasterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emuo.mutation.EmpRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.RemovedEmpRefIDs(); len(nodes) > 0 && !emuo.mutation.EmpRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.EmpRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.LogDataTable,
			Columns: []string{employeemaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !emuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.LogDataTable,
			Columns: []string{employeemaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.LogDataTable,
			Columns: []string{employeemaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmployeeMaster{config: emuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, emuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeemaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	emuo.mutation.done = true
	return _node, nil
}
